<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>Vector3.inl</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 
<a name="l00029"></a>00029 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00030"></a>00030 Vector3&lt;T&gt;::Vector3() :
<a name="l00031"></a>00031 x(0),
<a name="l00032"></a>00032 y(0),
<a name="l00033"></a>00033 z(0)
<a name="l00034"></a>00034 {
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 }
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 
<a name="l00042"></a>00042 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00043"></a>00043 <a class="code" href="classsf_1_1Vector3.htm#ee8be1985c6e45e381ad4071265636f9" title="Default constructor.">Vector3&lt;T&gt;::Vector3</a>(T X, T Y, T Z) :
<a name="l00044"></a>00044 x(X),
<a name="l00045"></a>00045 y(Y),
<a name="l00046"></a>00046 z(Z)
<a name="l00047"></a>00047 {
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 }
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 
<a name="l00055"></a>00055 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00056"></a>00056 Vector3&lt;T&gt; operator -(<span class="keyword">const</span> Vector3&lt;T&gt;&amp; V)
<a name="l00057"></a>00057 {
<a name="l00058"></a>00058     <span class="keywordflow">return</span> Vector3&lt;T&gt;(-V.x, -V.y, -V.z);
<a name="l00059"></a>00059 }
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 
<a name="l00065"></a>00065 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00066"></a>00066 Vector3&lt;T&gt;&amp; operator +=(Vector3&lt;T&gt;&amp; V1, <span class="keyword">const</span> Vector3&lt;T&gt;&amp; V2)
<a name="l00067"></a>00067 {
<a name="l00068"></a>00068     V1.x += V2.x;
<a name="l00069"></a>00069     V1.y += V2.y;
<a name="l00070"></a>00070     V1.z += V2.z;
<a name="l00071"></a>00071 
<a name="l00072"></a>00072     <span class="keywordflow">return</span> V1;
<a name="l00073"></a>00073 }
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 
<a name="l00079"></a>00079 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00080"></a>00080 Vector3&lt;T&gt;&amp; operator -=(Vector3&lt;T&gt;&amp; V1, <span class="keyword">const</span> Vector3&lt;T&gt;&amp; V2)
<a name="l00081"></a>00081 {
<a name="l00082"></a>00082     V1.x -= V2.x;
<a name="l00083"></a>00083     V1.y -= V2.y;
<a name="l00084"></a>00084     V1.z -= V2.z;
<a name="l00085"></a>00085 
<a name="l00086"></a>00086     <span class="keywordflow">return</span> V1;
<a name="l00087"></a>00087 }
<a name="l00088"></a>00088 
<a name="l00089"></a>00089 
<a name="l00093"></a>00093 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00094"></a>00094 Vector3&lt;T&gt; operator +(<span class="keyword">const</span> Vector3&lt;T&gt;&amp; V1, <span class="keyword">const</span> Vector3&lt;T&gt;&amp; V2)
<a name="l00095"></a>00095 {
<a name="l00096"></a>00096     <span class="keywordflow">return</span> Vector3&lt;T&gt;(V1.x + V2.x, V1.y + V2.y, V1.z + V2.z);
<a name="l00097"></a>00097 }
<a name="l00098"></a>00098 
<a name="l00099"></a>00099 
<a name="l00103"></a>00103 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00104"></a>00104 Vector3&lt;T&gt; operator -(<span class="keyword">const</span> Vector3&lt;T&gt;&amp; V1, <span class="keyword">const</span> Vector3&lt;T&gt;&amp; V2)
<a name="l00105"></a>00105 {
<a name="l00106"></a>00106     <span class="keywordflow">return</span> Vector3&lt;T&gt;(V1.x - V2.x, V1.y - V2.y, V1.z - V2.z);
<a name="l00107"></a>00107 }
<a name="l00108"></a>00108 
<a name="l00109"></a>00109 
<a name="l00113"></a>00113 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00114"></a>00114 Vector3&lt;T&gt; operator *(<span class="keyword">const</span> Vector3&lt;T&gt;&amp; V, T X)
<a name="l00115"></a>00115 {
<a name="l00116"></a>00116     <span class="keywordflow">return</span> Vector3&lt;T&gt;(V.x * X, V.y * X, V.z * X);
<a name="l00117"></a>00117 }
<a name="l00118"></a>00118 
<a name="l00119"></a>00119 
<a name="l00123"></a>00123 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00124"></a>00124 Vector3&lt;T&gt; operator *(T X, <span class="keyword">const</span> Vector3&lt;T&gt;&amp; V)
<a name="l00125"></a>00125 {
<a name="l00126"></a>00126     <span class="keywordflow">return</span> Vector3&lt;T&gt;(V.x * X, V.y * X, V.z * X);
<a name="l00127"></a>00127 }
<a name="l00128"></a>00128 
<a name="l00129"></a>00129 
<a name="l00133"></a>00133 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00134"></a>00134 Vector3&lt;T&gt;&amp; operator *=(Vector3&lt;T&gt;&amp; V, T X)
<a name="l00135"></a>00135 {
<a name="l00136"></a>00136     V.x *= X;
<a name="l00137"></a>00137     V.y *= X;
<a name="l00138"></a>00138     V.z *= X;
<a name="l00139"></a>00139 
<a name="l00140"></a>00140     <span class="keywordflow">return</span> V;
<a name="l00141"></a>00141 }
<a name="l00142"></a>00142 
<a name="l00143"></a>00143 
<a name="l00147"></a>00147 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00148"></a>00148 Vector3&lt;T&gt; operator /(<span class="keyword">const</span> Vector3&lt;T&gt;&amp; V, T X)
<a name="l00149"></a>00149 {
<a name="l00150"></a>00150     <span class="keywordflow">return</span> Vector3&lt;T&gt;(V.x / X, V.y / X, V.z / X);
<a name="l00151"></a>00151 }
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 
<a name="l00157"></a>00157 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00158"></a>00158 Vector3&lt;T&gt;&amp; operator /=(Vector3&lt;T&gt;&amp; V, T X)
<a name="l00159"></a>00159 {
<a name="l00160"></a>00160     V.x /= X;
<a name="l00161"></a>00161     V.y /= X;
<a name="l00162"></a>00162     V.z /= X;
<a name="l00163"></a>00163 
<a name="l00164"></a>00164     <span class="keywordflow">return</span> V;
<a name="l00165"></a>00165 }
<a name="l00166"></a>00166 
<a name="l00167"></a>00167 
<a name="l00171"></a>00171 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00172"></a>00172 <span class="keywordtype">bool</span> operator ==(<span class="keyword">const</span> Vector3&lt;T&gt;&amp; V1, <span class="keyword">const</span> Vector3&lt;T&gt;&amp; V2)
<a name="l00173"></a>00173 {
<a name="l00174"></a>00174     <span class="keywordflow">return</span> (V1.x == V2.x) &amp;&amp; (V1.y == V2.y) &amp;&amp; (V1.z == V2.z);
<a name="l00175"></a>00175 }
<a name="l00176"></a>00176 
<a name="l00177"></a>00177 
<a name="l00181"></a>00181 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00182"></a>00182 <span class="keywordtype">bool</span> operator !=(<span class="keyword">const</span> Vector3&lt;T&gt;&amp; V1, <span class="keyword">const</span> Vector3&lt;T&gt;&amp; V2)
<a name="l00183"></a>00183 {
<a name="l00184"></a>00184     <span class="keywordflow">return</span> (V1.x != V2.x) || (V1.y != V2.y) || (V1.z != V2.z);
<a name="l00185"></a>00185 }
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
