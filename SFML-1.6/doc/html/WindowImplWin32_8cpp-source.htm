<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>WindowImplWin32.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#define _WIN32_WINDOWS 0x0501</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">#define _WIN32_WINNT   0x0501</span>
<a name="l00030"></a>00030 <span class="preprocessor"></span><span class="preprocessor">#include &lt;SFML/Window/Win32/WindowImplWin32.hpp&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;SFML/Window/WindowSettings.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;SFML/Window/WindowStyle.hpp&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;GL/gl.h&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;SFML/Window/glext/wglext.h&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;SFML/Window/glext/glext.h&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="comment">// MinGW lacks the definition of some Win32 constants</span>
<a name="l00040"></a>00040 <span class="preprocessor">#ifndef XBUTTON1</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span><span class="preprocessor">    #define XBUTTON1 0x0001</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span><span class="preprocessor">#ifndef XBUTTON2</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span><span class="preprocessor">    #define XBUTTON2 0x0002</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span><span class="preprocessor">#ifndef MAPVK_VK_TO_VSC</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span><span class="preprocessor">    #define MAPVK_VK_TO_VSC (0)</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span>
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="keyword">namespace </span>sf
<a name="l00052"></a>00052 {
<a name="l00053"></a>00053 <span class="keyword">namespace </span>priv
<a name="l00054"></a>00054 {
<a name="l00056"></a>00056 <span class="comment">// Static member data</span>
<a name="l00058"></a>00058 <span class="comment"></span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     WindowImplWin32::ourWindowCount      = 0;
<a name="l00059"></a>00059 <span class="keyword">const</span> <span class="keywordtype">char</span>*      WindowImplWin32::ourClassNameA       = <span class="stringliteral">"SFML_Window"</span>;
<a name="l00060"></a>00060 <span class="keyword">const</span> <span class="keywordtype">wchar_t</span>*   WindowImplWin32::ourClassNameW       = L<span class="stringliteral">"SFML_Window"</span>;
<a name="l00061"></a>00061 WindowImplWin32* WindowImplWin32::ourFullscreenWindow = NULL;
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 
<a name="l00068"></a>00068 WindowImplWin32::WindowImplWin32() :
<a name="l00069"></a>00069 myHandle          (NULL),
<a name="l00070"></a>00070 myCallback        (0),
<a name="l00071"></a>00071 myCursor          (NULL),
<a name="l00072"></a>00072 myIcon            (NULL),
<a name="l00073"></a>00073 myKeyRepeatEnabled(true),
<a name="l00074"></a>00074 myIsCursorIn      (false)
<a name="l00075"></a>00075 {
<a name="l00076"></a>00076     <span class="comment">// Register the window class at first call</span>
<a name="l00077"></a>00077     <span class="keywordflow">if</span> (ourWindowCount == 0)
<a name="l00078"></a>00078         RegisterWindowClass();
<a name="l00079"></a>00079 
<a name="l00080"></a>00080     <span class="comment">// Use small dimensions</span>
<a name="l00081"></a>00081     myWidth  = 1;
<a name="l00082"></a>00082     myHeight = 1;
<a name="l00083"></a>00083 
<a name="l00084"></a>00084     <span class="comment">// Create a dummy window (disabled and hidden)</span>
<a name="l00085"></a>00085     <span class="keywordflow">if</span> (HasUnicodeSupport())
<a name="l00086"></a>00086     {
<a name="l00087"></a>00087         myHandle = CreateWindowW(ourClassNameW, L<span class="stringliteral">""</span>, WS_POPUP | WS_DISABLED, 0, 0, myWidth, myHeight, NULL, NULL, GetModuleHandle(NULL), NULL);
<a name="l00088"></a>00088     }
<a name="l00089"></a>00089     <span class="keywordflow">else</span>
<a name="l00090"></a>00090     {
<a name="l00091"></a>00091         myHandle = CreateWindowA(ourClassNameA, <span class="stringliteral">""</span>, WS_POPUP | WS_DISABLED, 0, 0, myWidth, myHeight, NULL, NULL, GetModuleHandle(NULL), NULL);
<a name="l00092"></a>00092     }
<a name="l00093"></a>00093     ShowWindow(myHandle, SW_HIDE);
<a name="l00094"></a>00094 
<a name="l00095"></a>00095     <span class="comment">// Create the rendering context</span>
<a name="l00096"></a>00096     <span class="keywordflow">if</span> (myHandle)
<a name="l00097"></a>00097     {
<a name="l00098"></a>00098         WindowSettings Params(0, 0, 0);
<a name="l00099"></a>00099         CreateContext(VideoMode(myWidth, myHeight, 32), Params);
<a name="l00100"></a>00100 
<a name="l00101"></a>00101         <span class="comment">// Don't activate by default</span>
<a name="l00102"></a>00102         <a class="code" href="classsf_1_1Window.htm#9fc1e745594d5cf6a30225ec9ea36675" title="Activate of deactivate the window as the current target for rendering.">SetActive</a>(<span class="keyword">false</span>);
<a name="l00103"></a>00103     }
<a name="l00104"></a>00104 }
<a name="l00105"></a>00105 
<a name="l00106"></a>00106 
<a name="l00110"></a>00110 WindowImplWin32::WindowImplWin32(WindowHandle Handle, WindowSettings&amp; Params) :
<a name="l00111"></a>00111 myHandle          (NULL),
<a name="l00112"></a>00112 myCallback        (0),
<a name="l00113"></a>00113 myCursor          (NULL),
<a name="l00114"></a>00114 myIcon            (NULL),
<a name="l00115"></a>00115 myKeyRepeatEnabled(true),
<a name="l00116"></a>00116 myIsCursorIn      (false)
<a name="l00117"></a>00117 {
<a name="l00118"></a>00118     <span class="comment">// Save window handle</span>
<a name="l00119"></a>00119     myHandle = <span class="keyword">static_cast&lt;</span>HWND<span class="keyword">&gt;</span>(Handle);
<a name="l00120"></a>00120 
<a name="l00121"></a>00121     <span class="keywordflow">if</span> (myHandle)
<a name="l00122"></a>00122     {
<a name="l00123"></a>00123         <span class="comment">// Get window client size</span>
<a name="l00124"></a>00124         RECT Rect;
<a name="l00125"></a>00125         GetClientRect(myHandle, &amp;Rect);
<a name="l00126"></a>00126         myWidth  = Rect.right - Rect.left;
<a name="l00127"></a>00127         myHeight = Rect.bottom - Rect.top;
<a name="l00128"></a>00128 
<a name="l00129"></a>00129         <span class="comment">// Create the rendering context</span>
<a name="l00130"></a>00130         VideoMode <a class="code" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca">Mode</a>(myWidth, myHeight, <a class="code" href="classsf_1_1VideoMode.htm#0b29193258c4855f75337e62f2b56eea" title="Get the current desktop video mode.">VideoMode::GetDesktopMode</a>().BitsPerPixel);
<a name="l00131"></a>00131         CreateContext(Mode, Params);
<a name="l00132"></a>00132 
<a name="l00133"></a>00133         <span class="comment">// We change the event procedure of the control (it is important to save the old one)</span>
<a name="l00134"></a>00134         SetWindowLongPtr(myHandle, GWLP_USERDATA, reinterpret_cast&lt;long&gt;(<span class="keyword">this</span>));
<a name="l00135"></a>00135         myCallback = SetWindowLongPtr(myHandle, GWLP_WNDPROC, reinterpret_cast&lt;long&gt;(&amp;WindowImplWin32::GlobalOnEvent));
<a name="l00136"></a>00136     }
<a name="l00137"></a>00137 }
<a name="l00138"></a>00138 
<a name="l00139"></a>00139 
<a name="l00143"></a>00143 WindowImplWin32::WindowImplWin32(VideoMode Mode, <span class="keyword">const</span> std::string&amp; Title, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> WindowStyle, WindowSettings&amp; Params) :
<a name="l00144"></a>00144 myHandle          (NULL),
<a name="l00145"></a>00145 myCallback        (0),
<a name="l00146"></a>00146 myCursor          (NULL),
<a name="l00147"></a>00147 myIcon            (NULL),
<a name="l00148"></a>00148 myKeyRepeatEnabled(true),
<a name="l00149"></a>00149 myIsCursorIn      (false)
<a name="l00150"></a>00150 {
<a name="l00151"></a>00151     <span class="comment">// Register the window class at first call</span>
<a name="l00152"></a>00152     <span class="keywordflow">if</span> (ourWindowCount == 0)
<a name="l00153"></a>00153         RegisterWindowClass();
<a name="l00154"></a>00154 
<a name="l00155"></a>00155     <span class="comment">// Compute position and size</span>
<a name="l00156"></a>00156     HDC ScreenDC = GetDC(NULL);
<a name="l00157"></a>00157     <span class="keywordtype">int</span> <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c811b48e9fd546b2afdcbb64ae95047be94" title="Left arrow.">Left</a>   = (GetDeviceCaps(ScreenDC, HORZRES) - Mode.Width)  / 2;
<a name="l00158"></a>00158     <span class="keywordtype">int</span> Top    = (GetDeviceCaps(ScreenDC, VERTRES) - Mode.Height) / 2;
<a name="l00159"></a>00159     <span class="keywordtype">int</span> Width  = myWidth  = Mode.Width;
<a name="l00160"></a>00160     <span class="keywordtype">int</span> Height = myHeight = Mode.Height;
<a name="l00161"></a>00161     ReleaseDC(NULL, ScreenDC);
<a name="l00162"></a>00162 
<a name="l00163"></a>00163     <span class="comment">// Choose the window style according to the Style parameter</span>
<a name="l00164"></a>00164     DWORD Win32Style = WS_VISIBLE;
<a name="l00165"></a>00165     <span class="keywordflow">if</span> (WindowStyle == <a class="code" href="namespacesf_1_1Style.htm#d001cd87b8aa5669d0eadbb8aab1c1d28c35a9c8507559e455387fc4a83ce422" title="No border / title bar (this flag and all others are mutually exclusive).">Style::None</a>)
<a name="l00166"></a>00166     {
<a name="l00167"></a>00167         Win32Style |= WS_POPUP;
<a name="l00168"></a>00168     }
<a name="l00169"></a>00169     <span class="keywordflow">else</span>
<a name="l00170"></a>00170     {
<a name="l00171"></a>00171         <span class="keywordflow">if</span> (WindowStyle &amp; <a class="code" href="namespacesf_1_1Style.htm#d001cd87b8aa5669d0eadbb8aab1c1d2b4c8b32b05ed715928513787cb1e85b6" title="Title bar + fixed border.">Style::Titlebar</a>) Win32Style |= WS_CAPTION | WS_MINIMIZEBOX;
<a name="l00172"></a>00172         <span class="keywordflow">if</span> (WindowStyle &amp; <a class="code" href="namespacesf_1_1Style.htm#d001cd87b8aa5669d0eadbb8aab1c1d2ccff967648ebcd5db2007eff7352b50f" title="Titlebar + resizable border + maximize button.">Style::Resize</a>)   Win32Style |= WS_THICKFRAME | WS_MAXIMIZEBOX;
<a name="l00173"></a>00173         <span class="keywordflow">if</span> (WindowStyle &amp; <a class="code" href="namespacesf_1_1Style.htm#d001cd87b8aa5669d0eadbb8aab1c1d2e07a7d411d5acf28f4a9a4b76a3a9493" title="Titlebar + close button.">Style::Close</a>)    Win32Style |= WS_SYSMENU;
<a name="l00174"></a>00174     }
<a name="l00175"></a>00175 
<a name="l00176"></a>00176     <span class="comment">// In windowed mode, adjust width and height so that window will have the requested client area</span>
<a name="l00177"></a>00177     <span class="keywordtype">bool</span> <a class="code" href="namespacesf_1_1Style.htm#d001cd87b8aa5669d0eadbb8aab1c1d26288ec86830245cf957e2d234f79f50d" title="Fullscreen mode (this flag and all others are mutually exclusive).">Fullscreen</a> = (WindowStyle &amp; <a class="code" href="namespacesf_1_1Style.htm#d001cd87b8aa5669d0eadbb8aab1c1d26288ec86830245cf957e2d234f79f50d" title="Fullscreen mode (this flag and all others are mutually exclusive).">Style::Fullscreen</a>) != 0;
<a name="l00178"></a>00178     <span class="keywordflow">if</span> (!Fullscreen)
<a name="l00179"></a>00179     {
<a name="l00180"></a>00180         RECT Rect = {0, 0, Width, Height};
<a name="l00181"></a>00181         AdjustWindowRect(&amp;Rect, Win32Style, <span class="keyword">false</span>);
<a name="l00182"></a>00182         Width  = Rect.right - Rect.left;
<a name="l00183"></a>00183         Height = Rect.bottom - Rect.top;
<a name="l00184"></a>00184     }
<a name="l00185"></a>00185 
<a name="l00186"></a>00186     <span class="comment">// Create the window</span>
<a name="l00187"></a>00187     <span class="keywordflow">if</span> (HasUnicodeSupport())
<a name="l00188"></a>00188     {
<a name="l00189"></a>00189         <span class="keywordtype">wchar_t</span> WTitle[256];
<a name="l00190"></a>00190         <span class="keywordtype">int</span> NbChars = MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, Title.c_str(), <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(Title.size()), WTitle, <span class="keyword">sizeof</span>(WTitle) / <span class="keyword">sizeof</span>(*WTitle));
<a name="l00191"></a>00191         WTitle[NbChars] = L<span class="charliteral">'\0'</span>;
<a name="l00192"></a>00192         myHandle = CreateWindowW(ourClassNameW, WTitle, Win32Style, Left, Top, Width, Height, NULL, NULL, GetModuleHandle(NULL), <span class="keyword">this</span>);
<a name="l00193"></a>00193     }
<a name="l00194"></a>00194     <span class="keywordflow">else</span>
<a name="l00195"></a>00195     {
<a name="l00196"></a>00196         myHandle = CreateWindowA(ourClassNameA, Title.c_str(), Win32Style, Left, Top, Width, Height, NULL, NULL, GetModuleHandle(NULL), <span class="keyword">this</span>);
<a name="l00197"></a>00197     }
<a name="l00198"></a>00198 
<a name="l00199"></a>00199     <span class="comment">// Switch to fullscreen if requested</span>
<a name="l00200"></a>00200     <span class="keywordflow">if</span> (Fullscreen)
<a name="l00201"></a>00201         SwitchToFullscreen(Mode);
<a name="l00202"></a>00202 
<a name="l00203"></a>00203     <span class="comment">// Create the rendering context</span>
<a name="l00204"></a>00204     <span class="keywordflow">if</span> (myHandle)
<a name="l00205"></a>00205         CreateContext(Mode, Params);
<a name="l00206"></a>00206 
<a name="l00207"></a>00207     <span class="comment">// Increment window count</span>
<a name="l00208"></a>00208     ourWindowCount++;
<a name="l00209"></a>00209 
<a name="l00210"></a>00210     <span class="comment">// Get the actual size of the window, which can be smaller even after the call to AdjustWindowRect</span>
<a name="l00211"></a>00211     <span class="comment">// This happens when the window is bigger than the desktop</span>
<a name="l00212"></a>00212     RECT ActualRect;
<a name="l00213"></a>00213     GetClientRect(myHandle, &amp;ActualRect);
<a name="l00214"></a>00214     myWidth  = ActualRect.right - ActualRect.left;
<a name="l00215"></a>00215     myHeight = ActualRect.bottom - ActualRect.top;
<a name="l00216"></a>00216 }
<a name="l00217"></a>00217 
<a name="l00218"></a>00218 
<a name="l00222"></a>00222 WindowImplWin32::~WindowImplWin32()
<a name="l00223"></a>00223 {
<a name="l00224"></a>00224     <span class="comment">// Destroy the custom icon, if any</span>
<a name="l00225"></a>00225     <span class="keywordflow">if</span> (myIcon)
<a name="l00226"></a>00226         DestroyIcon(myIcon);
<a name="l00227"></a>00227 
<a name="l00228"></a>00228     <span class="keywordflow">if</span> (!myCallback)
<a name="l00229"></a>00229     {
<a name="l00230"></a>00230         <span class="comment">// Destroy the window</span>
<a name="l00231"></a>00231         <span class="keywordflow">if</span> (myHandle)
<a name="l00232"></a>00232             DestroyWindow(myHandle);
<a name="l00233"></a>00233 
<a name="l00234"></a>00234         <span class="comment">// Decrement the window count</span>
<a name="l00235"></a>00235         ourWindowCount--;
<a name="l00236"></a>00236 
<a name="l00237"></a>00237         <span class="comment">// Unregister window class if we were the last window</span>
<a name="l00238"></a>00238         <span class="keywordflow">if</span> (ourWindowCount == 0)
<a name="l00239"></a>00239         {
<a name="l00240"></a>00240             <span class="keywordflow">if</span> (HasUnicodeSupport())
<a name="l00241"></a>00241             {
<a name="l00242"></a>00242                 UnregisterClassW(ourClassNameW, GetModuleHandle(NULL));
<a name="l00243"></a>00243             }
<a name="l00244"></a>00244             <span class="keywordflow">else</span>
<a name="l00245"></a>00245             {
<a name="l00246"></a>00246                 UnregisterClassA(ourClassNameA, GetModuleHandle(NULL));
<a name="l00247"></a>00247             }
<a name="l00248"></a>00248         }
<a name="l00249"></a>00249     }
<a name="l00250"></a>00250     <span class="keywordflow">else</span>
<a name="l00251"></a>00251     {
<a name="l00252"></a>00252         <span class="comment">// The window is external : remove the hook on its message callback</span>
<a name="l00253"></a>00253         SetWindowLongPtr(myHandle, GWLP_WNDPROC, myCallback);
<a name="l00254"></a>00254     }
<a name="l00255"></a>00255 }
<a name="l00256"></a>00256 
<a name="l00257"></a>00257 
<a name="l00261"></a>00261 <span class="keywordtype">bool</span> WindowImplWin32::IsContextActive()
<a name="l00262"></a>00262 {
<a name="l00263"></a>00263     <span class="keywordflow">return</span> wglGetCurrentContext() != NULL;
<a name="l00264"></a>00264 }
<a name="l00265"></a>00265 
<a name="l00266"></a>00266 
<a name="l00270"></a>00270 <span class="keywordtype">void</span> WindowImplWin32::ProcessEvents()
<a name="l00271"></a>00271 {
<a name="l00272"></a>00272     <span class="comment">// We update the window only if we own it</span>
<a name="l00273"></a>00273     <span class="keywordflow">if</span> (!myCallback)
<a name="l00274"></a>00274     {
<a name="l00275"></a>00275         MSG Message;
<a name="l00276"></a>00276         <span class="keywordflow">while</span> (PeekMessage(&amp;Message, NULL, 0, 0, PM_REMOVE))
<a name="l00277"></a>00277         {
<a name="l00278"></a>00278             TranslateMessage(&amp;Message);
<a name="l00279"></a>00279             DispatchMessage(&amp;Message);
<a name="l00280"></a>00280         }
<a name="l00281"></a>00281     }
<a name="l00282"></a>00282 }
<a name="l00283"></a>00283 
<a name="l00284"></a>00284 
<a name="l00288"></a>00288 <span class="keywordtype">void</span> WindowImplWin32::Display()
<a name="l00289"></a>00289 {
<a name="l00290"></a>00290     <span class="keywordflow">if</span> (myDeviceContext &amp;&amp; myGLContext)
<a name="l00291"></a>00291         SwapBuffers(myDeviceContext);
<a name="l00292"></a>00292 }
<a name="l00293"></a>00293 
<a name="l00294"></a>00294 
<a name="l00298"></a>00298 <span class="keywordtype">void</span> WindowImplWin32::SetActive(<span class="keywordtype">bool</span> Active)<span class="keyword"> const</span>
<a name="l00299"></a>00299 <span class="keyword"></span>{
<a name="l00300"></a>00300     <span class="keywordflow">if</span> (Active)
<a name="l00301"></a>00301     {
<a name="l00302"></a>00302         <span class="keywordflow">if</span> (myDeviceContext &amp;&amp; myGLContext &amp;&amp; (wglGetCurrentContext() != myGLContext))
<a name="l00303"></a>00303             wglMakeCurrent(myDeviceContext, myGLContext);
<a name="l00304"></a>00304     }
<a name="l00305"></a>00305     <span class="keywordflow">else</span>
<a name="l00306"></a>00306     {
<a name="l00307"></a>00307         <span class="keywordflow">if</span> (wglGetCurrentContext() == myGLContext)
<a name="l00308"></a>00308             wglMakeCurrent(NULL, NULL);
<a name="l00309"></a>00309     }
<a name="l00310"></a>00310 }
<a name="l00311"></a>00311 
<a name="l00312"></a>00312 
<a name="l00316"></a>00316 <span class="keywordtype">void</span> WindowImplWin32::UseVerticalSync(<span class="keywordtype">bool</span> Enabled)
<a name="l00317"></a>00317 {
<a name="l00318"></a>00318     PFNWGLSWAPINTERVALEXTPROC wglSwapIntervalEXT = <span class="keyword">reinterpret_cast&lt;</span>PFNWGLSWAPINTERVALEXTPROC<span class="keyword">&gt;</span>(wglGetProcAddress(<span class="stringliteral">"wglSwapIntervalEXT"</span>));
<a name="l00319"></a>00319     <span class="keywordflow">if</span> (wglSwapIntervalEXT)
<a name="l00320"></a>00320         wglSwapIntervalEXT(Enabled ? 1 : 0);
<a name="l00321"></a>00321 }
<a name="l00322"></a>00322 
<a name="l00323"></a>00323 
<a name="l00327"></a>00327 <span class="keywordtype">void</span> WindowImplWin32::ShowMouseCursor(<span class="keywordtype">bool</span> Show)
<a name="l00328"></a>00328 {
<a name="l00329"></a>00329     <span class="keywordflow">if</span> (Show)
<a name="l00330"></a>00330         myCursor = LoadCursor(NULL, IDC_ARROW);
<a name="l00331"></a>00331     <span class="keywordflow">else</span>
<a name="l00332"></a>00332         myCursor = NULL;
<a name="l00333"></a>00333 
<a name="l00334"></a>00334     SetCursor(myCursor);
<a name="l00335"></a>00335 }
<a name="l00336"></a>00336 
<a name="l00337"></a>00337 
<a name="l00341"></a>00341 <span class="keywordtype">void</span> WindowImplWin32::SetCursorPosition(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Left, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Top)
<a name="l00342"></a>00342 {
<a name="l00343"></a>00343     POINT Pos = {Left, Top};
<a name="l00344"></a>00344     ClientToScreen(myHandle, &amp;Pos);
<a name="l00345"></a>00345     SetCursorPos(Pos.x, Pos.y);
<a name="l00346"></a>00346 }
<a name="l00347"></a>00347 
<a name="l00348"></a>00348 
<a name="l00352"></a>00352 <span class="keywordtype">void</span> WindowImplWin32::SetPosition(<span class="keywordtype">int</span> Left, <span class="keywordtype">int</span> Top)
<a name="l00353"></a>00353 {
<a name="l00354"></a>00354     SetWindowPos(myHandle, NULL, Left, Top, 0, 0, SWP_NOSIZE | SWP_NOZORDER);
<a name="l00355"></a>00355 }
<a name="l00356"></a>00356 
<a name="l00357"></a>00357 
<a name="l00361"></a>00361 <span class="keywordtype">void</span> WindowImplWin32::SetSize(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Height)
<a name="l00362"></a>00362 {
<a name="l00363"></a>00363     <span class="comment">// SetWindowPos wants the total size of the window (including title bar and borders),</span>
<a name="l00364"></a>00364     <span class="comment">// so we have to compute it</span>
<a name="l00365"></a>00365     RECT Rect = {0, 0, Width, Height};
<a name="l00366"></a>00366     AdjustWindowRect(&amp;Rect, GetWindowLong(myHandle, GWL_STYLE), <span class="keyword">false</span>);
<a name="l00367"></a>00367     Width  = Rect.right - Rect.left;
<a name="l00368"></a>00368     Height = Rect.bottom - Rect.top;
<a name="l00369"></a>00369 
<a name="l00370"></a>00370     SetWindowPos(myHandle, NULL, 0, 0, Width, Height, SWP_NOMOVE | SWP_NOZORDER);
<a name="l00371"></a>00371 }
<a name="l00372"></a>00372 
<a name="l00373"></a>00373 
<a name="l00377"></a>00377 <span class="keywordtype">void</span> WindowImplWin32::Show(<span class="keywordtype">bool</span> State)
<a name="l00378"></a>00378 {
<a name="l00379"></a>00379     ShowWindow(myHandle, State ? SW_SHOW : SW_HIDE);
<a name="l00380"></a>00380 }
<a name="l00381"></a>00381 
<a name="l00382"></a>00382 
<a name="l00386"></a>00386 <span class="keywordtype">void</span> WindowImplWin32::EnableKeyRepeat(<span class="keywordtype">bool</span> Enabled)
<a name="l00387"></a>00387 {
<a name="l00388"></a>00388     myKeyRepeatEnabled = Enabled;
<a name="l00389"></a>00389 }
<a name="l00390"></a>00390 
<a name="l00391"></a>00391 
<a name="l00395"></a>00395 <span class="keywordtype">void</span> WindowImplWin32::SetIcon(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Height, <span class="keyword">const</span> Uint8* Pixels)
<a name="l00396"></a>00396 {
<a name="l00397"></a>00397     <span class="comment">// First destroy the previous one</span>
<a name="l00398"></a>00398     <span class="keywordflow">if</span> (myIcon)
<a name="l00399"></a>00399         DestroyIcon(myIcon);
<a name="l00400"></a>00400 
<a name="l00401"></a>00401     <span class="comment">// Windows wants BGRA pixels : swap red and blue channels</span>
<a name="l00402"></a>00402     std::vector&lt;Uint8&gt; IconPixels(Width * Height * 4);
<a name="l00403"></a>00403     <span class="keywordflow">for</span> (std::size_t i = 0; i &lt; IconPixels.size() / 4; ++i)
<a name="l00404"></a>00404     {
<a name="l00405"></a>00405         IconPixels[i * 4 + 0] = Pixels[i * 4 + 2];
<a name="l00406"></a>00406         IconPixels[i * 4 + 1] = Pixels[i * 4 + 1];
<a name="l00407"></a>00407         IconPixels[i * 4 + 2] = Pixels[i * 4 + 0];
<a name="l00408"></a>00408         IconPixels[i * 4 + 3] = Pixels[i * 4 + 3];
<a name="l00409"></a>00409     }
<a name="l00410"></a>00410 
<a name="l00411"></a>00411     <span class="comment">// Create the icon from the pixels array</span>
<a name="l00412"></a>00412     myIcon = CreateIcon(GetModuleHandle(NULL), Width, Height, 1, 32, NULL, &amp;IconPixels[0]);
<a name="l00413"></a>00413 
<a name="l00414"></a>00414     <span class="comment">// Set it as both big and small icon of the window</span>
<a name="l00415"></a>00415     <span class="keywordflow">if</span> (myIcon)
<a name="l00416"></a>00416     {
<a name="l00417"></a>00417         SendMessage(myHandle, WM_SETICON, ICON_BIG,   (LPARAM)myIcon);
<a name="l00418"></a>00418         SendMessage(myHandle, WM_SETICON, ICON_SMALL, (LPARAM)myIcon);
<a name="l00419"></a>00419     }
<a name="l00420"></a>00420     <span class="keywordflow">else</span>
<a name="l00421"></a>00421     {
<a name="l00422"></a>00422         std::cerr &lt;&lt; <span class="stringliteral">"Failed to set the window's icon"</span> &lt;&lt; std::endl;
<a name="l00423"></a>00423     }
<a name="l00424"></a>00424 }
<a name="l00425"></a>00425 
<a name="l00426"></a>00426 
<a name="l00430"></a>00430 <span class="keywordtype">void</span> WindowImplWin32::RegisterWindowClass()
<a name="l00431"></a>00431 {
<a name="l00432"></a>00432     <span class="keywordflow">if</span> (HasUnicodeSupport())
<a name="l00433"></a>00433     {
<a name="l00434"></a>00434         WNDCLASSW WindowClass;
<a name="l00435"></a>00435         WindowClass.style         = 0;
<a name="l00436"></a>00436         WindowClass.lpfnWndProc   = &amp;WindowImplWin32::GlobalOnEvent;
<a name="l00437"></a>00437         WindowClass.cbClsExtra    = 0;
<a name="l00438"></a>00438         WindowClass.cbWndExtra    = 0;
<a name="l00439"></a>00439         WindowClass.hInstance     = GetModuleHandle(NULL);
<a name="l00440"></a>00440         WindowClass.hIcon         = NULL;
<a name="l00441"></a>00441         WindowClass.hCursor       = 0;
<a name="l00442"></a>00442         WindowClass.hbrBackground = 0;
<a name="l00443"></a>00443         WindowClass.lpszMenuName  = NULL;
<a name="l00444"></a>00444         WindowClass.lpszClassName = ourClassNameW;
<a name="l00445"></a>00445         RegisterClassW(&amp;WindowClass);
<a name="l00446"></a>00446     }
<a name="l00447"></a>00447     <span class="keywordflow">else</span>
<a name="l00448"></a>00448     {
<a name="l00449"></a>00449         WNDCLASSA WindowClass;
<a name="l00450"></a>00450         WindowClass.style         = 0;
<a name="l00451"></a>00451         WindowClass.lpfnWndProc   = &amp;WindowImplWin32::GlobalOnEvent;
<a name="l00452"></a>00452         WindowClass.cbClsExtra    = 0;
<a name="l00453"></a>00453         WindowClass.cbWndExtra    = 0;
<a name="l00454"></a>00454         WindowClass.hInstance     = GetModuleHandle(NULL);
<a name="l00455"></a>00455         WindowClass.hIcon         = NULL;
<a name="l00456"></a>00456         WindowClass.hCursor       = 0;
<a name="l00457"></a>00457         WindowClass.hbrBackground = 0;
<a name="l00458"></a>00458         WindowClass.lpszMenuName  = NULL;
<a name="l00459"></a>00459         WindowClass.lpszClassName = ourClassNameA;
<a name="l00460"></a>00460         RegisterClassA(&amp;WindowClass);
<a name="l00461"></a>00461     }
<a name="l00462"></a>00462 }
<a name="l00463"></a>00463 
<a name="l00464"></a>00464 
<a name="l00468"></a>00468 <span class="keywordtype">void</span> WindowImplWin32::SwitchToFullscreen(<span class="keyword">const</span> VideoMode&amp; Mode)
<a name="l00469"></a>00469 {
<a name="l00470"></a>00470     DEVMODE DevMode;
<a name="l00471"></a>00471     DevMode.dmSize       = <span class="keyword">sizeof</span>(DEVMODE);
<a name="l00472"></a>00472     DevMode.dmPelsWidth  = Mode.Width;
<a name="l00473"></a>00473     DevMode.dmPelsHeight = Mode.Height;
<a name="l00474"></a>00474     DevMode.dmBitsPerPel = Mode.BitsPerPixel;
<a name="l00475"></a>00475     DevMode.dmFields     = DM_PELSWIDTH | DM_PELSHEIGHT | DM_BITSPERPEL;
<a name="l00476"></a>00476 
<a name="l00477"></a>00477     <span class="comment">// Apply fullscreen mode</span>
<a name="l00478"></a>00478     <span class="keywordflow">if</span> (ChangeDisplaySettings(&amp;DevMode, CDS_FULLSCREEN) != DISP_CHANGE_SUCCESSFUL)
<a name="l00479"></a>00479     {
<a name="l00480"></a>00480         std::cerr &lt;&lt; <span class="stringliteral">"Failed to change display mode for fullscreen"</span> &lt;&lt; std::endl;
<a name="l00481"></a>00481         <span class="keywordflow">return</span>;
<a name="l00482"></a>00482     }
<a name="l00483"></a>00483 
<a name="l00484"></a>00484     <span class="comment">// Make the window flags compatible with fullscreen mode</span>
<a name="l00485"></a>00485     SetWindowLong(myHandle, GWL_STYLE, WS_POPUP | WS_CLIPCHILDREN | WS_CLIPSIBLINGS);
<a name="l00486"></a>00486     SetWindowLong(myHandle, GWL_EXSTYLE, WS_EX_APPWINDOW);
<a name="l00487"></a>00487 
<a name="l00488"></a>00488     <span class="comment">// Resize the window so that it fits the entire screen</span>
<a name="l00489"></a>00489     SetWindowPos(myHandle, HWND_TOP, 0, 0, Mode.Width, Mode.Height, SWP_FRAMECHANGED);
<a name="l00490"></a>00490     ShowWindow(myHandle, SW_SHOW);
<a name="l00491"></a>00491 
<a name="l00492"></a>00492     <span class="comment">// Set "this" as the current fullscreen window</span>
<a name="l00493"></a>00493     ourFullscreenWindow = <span class="keyword">this</span>;
<a name="l00494"></a>00494 }
<a name="l00495"></a>00495 
<a name="l00496"></a>00496 
<a name="l00500"></a>00500 <span class="keywordtype">void</span> WindowImplWin32::CreateContext(<span class="keyword">const</span> VideoMode&amp; Mode, WindowSettings&amp; Params)
<a name="l00501"></a>00501 {
<a name="l00502"></a>00502     <span class="comment">// Get the device context attached to the window</span>
<a name="l00503"></a>00503     myDeviceContext = GetDC(myHandle);
<a name="l00504"></a>00504     <span class="keywordflow">if</span> (myDeviceContext == NULL)
<a name="l00505"></a>00505     {
<a name="l00506"></a>00506         std::cerr &lt;&lt; <span class="stringliteral">"Failed to get device context of window -- cannot create OpenGL context"</span> &lt;&lt; std::endl;
<a name="l00507"></a>00507         <span class="keywordflow">return</span>;
<a name="l00508"></a>00508     }
<a name="l00509"></a>00509 
<a name="l00510"></a>00510     <span class="comment">// Let's find a suitable pixel format -- first try with antialiasing</span>
<a name="l00511"></a>00511     <span class="keywordtype">int</span> BestFormat = 0;
<a name="l00512"></a>00512     <span class="keywordflow">if</span> (Params.AntialiasingLevel &gt; 0)
<a name="l00513"></a>00513     {
<a name="l00514"></a>00514         <span class="comment">// Get the wglChoosePixelFormatARB function (it is an extension)</span>
<a name="l00515"></a>00515         PFNWGLCHOOSEPIXELFORMATARBPROC wglChoosePixelFormatARB = <span class="keyword">reinterpret_cast&lt;</span>PFNWGLCHOOSEPIXELFORMATARBPROC<span class="keyword">&gt;</span>(wglGetProcAddress(<span class="stringliteral">"wglChoosePixelFormatARB"</span>));
<a name="l00516"></a>00516         <span class="keywordflow">if</span> (wglChoosePixelFormatARB)
<a name="l00517"></a>00517         {
<a name="l00518"></a>00518             <span class="comment">// Define the basic attributes we want for our window</span>
<a name="l00519"></a>00519             <span class="keywordtype">int</span> IntAttributes[] =
<a name="l00520"></a>00520             {
<a name="l00521"></a>00521                 WGL_DRAW_TO_WINDOW_ARB, GL_TRUE,
<a name="l00522"></a>00522                 WGL_SUPPORT_OPENGL_ARB, GL_TRUE,
<a name="l00523"></a>00523                 WGL_ACCELERATION_ARB,   WGL_FULL_ACCELERATION_ARB,
<a name="l00524"></a>00524                 WGL_DOUBLE_BUFFER_ARB,  GL_TRUE,
<a name="l00525"></a>00525                 WGL_SAMPLE_BUFFERS_ARB, (Params.AntialiasingLevel ? GL_TRUE : GL_FALSE),
<a name="l00526"></a>00526                 WGL_SAMPLES_ARB,        Params.AntialiasingLevel,
<a name="l00527"></a>00527                 0,                      0
<a name="l00528"></a>00528             };
<a name="l00529"></a>00529 
<a name="l00530"></a>00530             <span class="comment">// Let's check how many formats are supporting our requirements</span>
<a name="l00531"></a>00531             <span class="keywordtype">int</span>   Formats[128];
<a name="l00532"></a>00532             UINT  NbFormats;
<a name="l00533"></a>00533             <span class="keywordtype">float</span> FloatAttributes[] = {0, 0};
<a name="l00534"></a>00534             <span class="keywordtype">bool</span>  IsValid = wglChoosePixelFormatARB(myDeviceContext, IntAttributes, FloatAttributes, <span class="keyword">sizeof</span>(Formats) / <span class="keyword">sizeof</span>(*Formats), Formats, &amp;NbFormats) != 0;
<a name="l00535"></a>00535             <span class="keywordflow">if</span> (!IsValid || (NbFormats == 0))
<a name="l00536"></a>00536             {
<a name="l00537"></a>00537                 <span class="keywordflow">if</span> (Params.AntialiasingLevel &gt; 2)
<a name="l00538"></a>00538                 {
<a name="l00539"></a>00539                     <span class="comment">// No format matching our needs : reduce the multisampling level</span>
<a name="l00540"></a>00540                     std::cerr &lt;&lt; <span class="stringliteral">"Failed to find a pixel format supporting "</span>
<a name="l00541"></a>00541                               &lt;&lt; Params.AntialiasingLevel &lt;&lt; <span class="stringliteral">" antialiasing levels ; trying with 2 levels"</span> &lt;&lt; std::endl;
<a name="l00542"></a>00542 
<a name="l00543"></a>00543                     Params.AntialiasingLevel = IntAttributes[11] = 2;
<a name="l00544"></a>00544                     IsValid = wglChoosePixelFormatARB(myDeviceContext, IntAttributes, FloatAttributes, <span class="keyword">sizeof</span>(Formats) / <span class="keyword">sizeof</span>(*Formats), Formats, &amp;NbFormats) != 0;
<a name="l00545"></a>00545                 }
<a name="l00546"></a>00546 
<a name="l00547"></a>00547                 <span class="keywordflow">if</span> (!IsValid || (NbFormats == 0))
<a name="l00548"></a>00548                 {
<a name="l00549"></a>00549                     <span class="comment">// Cannot find any pixel format supporting multisampling ; disabling antialiasing</span>
<a name="l00550"></a>00550                     std::cerr &lt;&lt; <span class="stringliteral">"Failed to find a pixel format supporting antialiasing ; antialiasing will be disabled"</span> &lt;&lt; std::endl;
<a name="l00551"></a>00551                     Params.AntialiasingLevel = 0;
<a name="l00552"></a>00552                 }
<a name="l00553"></a>00553             }
<a name="l00554"></a>00554 
<a name="l00555"></a>00555             <span class="comment">// Get the best format among the returned ones</span>
<a name="l00556"></a>00556             <span class="keywordflow">if</span> (IsValid &amp;&amp; (NbFormats &gt; 0))
<a name="l00557"></a>00557             {
<a name="l00558"></a>00558                 <span class="keywordtype">int</span> BestScore = 0xFFFF;
<a name="l00559"></a>00559                 <span class="keywordflow">for</span> (UINT i = 0; i &lt; NbFormats; ++i)
<a name="l00560"></a>00560                 {
<a name="l00561"></a>00561                     <span class="comment">// Get the current format's attributes</span>
<a name="l00562"></a>00562                     PIXELFORMATDESCRIPTOR Attribs;
<a name="l00563"></a>00563                     Attribs.nSize    = <span class="keyword">sizeof</span>(PIXELFORMATDESCRIPTOR);
<a name="l00564"></a>00564                     Attribs.nVersion = 1;
<a name="l00565"></a>00565                     DescribePixelFormat(myDeviceContext, Formats[i], <span class="keyword">sizeof</span>(PIXELFORMATDESCRIPTOR), &amp;Attribs);
<a name="l00566"></a>00566 
<a name="l00567"></a>00567                     <span class="comment">// Evaluate the current configuration</span>
<a name="l00568"></a>00568                     <span class="keywordtype">int</span> Color = Attribs.cRedBits + Attribs.cGreenBits + Attribs.cBlueBits + Attribs.cAlphaBits;
<a name="l00569"></a>00569                     <span class="keywordtype">int</span> Score = EvaluateConfig(Mode, Params, Color, Attribs.cDepthBits, Attribs.cStencilBits, Params.AntialiasingLevel);
<a name="l00570"></a>00570 
<a name="l00571"></a>00571                     <span class="comment">// Keep it if it's better than the current best</span>
<a name="l00572"></a>00572                     <span class="keywordflow">if</span> (Score &lt; BestScore)
<a name="l00573"></a>00573                     {
<a name="l00574"></a>00574                         BestScore  = Score;
<a name="l00575"></a>00575                         BestFormat = Formats[i];
<a name="l00576"></a>00576                     }
<a name="l00577"></a>00577                 }
<a name="l00578"></a>00578             }
<a name="l00579"></a>00579         }
<a name="l00580"></a>00580         <span class="keywordflow">else</span>
<a name="l00581"></a>00581         {
<a name="l00582"></a>00582             <span class="comment">// wglChoosePixelFormatARB not supported ; disabling antialiasing</span>
<a name="l00583"></a>00583             std::cerr &lt;&lt; <span class="stringliteral">"Antialiasing is not supported ; it will be disabled"</span> &lt;&lt; std::endl;
<a name="l00584"></a>00584             Params.AntialiasingLevel = 0;
<a name="l00585"></a>00585         }
<a name="l00586"></a>00586     }
<a name="l00587"></a>00587 
<a name="l00588"></a>00588     <span class="comment">// Find a pixel format with no antialiasing, if not needed or not supported</span>
<a name="l00589"></a>00589     <span class="keywordflow">if</span> (BestFormat == 0)
<a name="l00590"></a>00590     {
<a name="l00591"></a>00591         <span class="comment">// Setup a pixel format descriptor from the rendering settings</span>
<a name="l00592"></a>00592         PIXELFORMATDESCRIPTOR PixelDescriptor;
<a name="l00593"></a>00593         ZeroMemory(&amp;PixelDescriptor, <span class="keyword">sizeof</span>(PIXELFORMATDESCRIPTOR));
<a name="l00594"></a>00594         PixelDescriptor.nSize        = <span class="keyword">sizeof</span>(PIXELFORMATDESCRIPTOR);
<a name="l00595"></a>00595         PixelDescriptor.nVersion     = 1;
<a name="l00596"></a>00596         PixelDescriptor.iLayerType   = PFD_MAIN_PLANE;
<a name="l00597"></a>00597         PixelDescriptor.dwFlags      = PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER;
<a name="l00598"></a>00598         PixelDescriptor.iPixelType   = PFD_TYPE_RGBA;
<a name="l00599"></a>00599         PixelDescriptor.cColorBits   = <span class="keyword">static_cast&lt;</span>BYTE<span class="keyword">&gt;</span>(Mode.BitsPerPixel);
<a name="l00600"></a>00600         PixelDescriptor.cDepthBits   = <span class="keyword">static_cast&lt;</span>BYTE<span class="keyword">&gt;</span>(Params.DepthBits);
<a name="l00601"></a>00601         PixelDescriptor.cStencilBits = <span class="keyword">static_cast&lt;</span>BYTE<span class="keyword">&gt;</span>(Params.StencilBits);
<a name="l00602"></a>00602         PixelDescriptor.cAlphaBits   = Mode.BitsPerPixel == 32 ? 8 : 0;
<a name="l00603"></a>00603 
<a name="l00604"></a>00604         <span class="comment">// Get the pixel format that best matches our requirements</span>
<a name="l00605"></a>00605         BestFormat = ChoosePixelFormat(myDeviceContext, &amp;PixelDescriptor);
<a name="l00606"></a>00606         <span class="keywordflow">if</span> (BestFormat == 0)
<a name="l00607"></a>00607         {
<a name="l00608"></a>00608             std::cerr &lt;&lt; <span class="stringliteral">"Failed to find a suitable pixel format for device context -- cannot create OpenGL context"</span> &lt;&lt; std::endl;
<a name="l00609"></a>00609             <span class="keywordflow">return</span>;
<a name="l00610"></a>00610         }
<a name="l00611"></a>00611     }
<a name="l00612"></a>00612 
<a name="l00613"></a>00613     <span class="comment">// Extract the depth and stencil bits from the chosen format</span>
<a name="l00614"></a>00614     PIXELFORMATDESCRIPTOR ActualFormat;
<a name="l00615"></a>00615     ActualFormat.nSize    = <span class="keyword">sizeof</span>(PIXELFORMATDESCRIPTOR);
<a name="l00616"></a>00616     ActualFormat.nVersion = 1;
<a name="l00617"></a>00617     DescribePixelFormat(myDeviceContext, BestFormat, <span class="keyword">sizeof</span>(PIXELFORMATDESCRIPTOR), &amp;ActualFormat);
<a name="l00618"></a>00618     Params.DepthBits   = ActualFormat.cDepthBits;
<a name="l00619"></a>00619     Params.StencilBits = ActualFormat.cStencilBits;
<a name="l00620"></a>00620 
<a name="l00621"></a>00621     <span class="comment">// Set the chosen pixel format</span>
<a name="l00622"></a>00622     <span class="keywordflow">if</span> (!SetPixelFormat(myDeviceContext, BestFormat, &amp;ActualFormat))
<a name="l00623"></a>00623     {
<a name="l00624"></a>00624         std::cerr &lt;&lt; <span class="stringliteral">"Failed to set pixel format for device context -- cannot create OpenGL context"</span> &lt;&lt; std::endl;
<a name="l00625"></a>00625         <span class="keywordflow">return</span>;
<a name="l00626"></a>00626     }
<a name="l00627"></a>00627 
<a name="l00628"></a>00628     <span class="comment">// Create the OpenGL context from the device context</span>
<a name="l00629"></a>00629     myGLContext = wglCreateContext(myDeviceContext);
<a name="l00630"></a>00630     <span class="keywordflow">if</span> (myGLContext == NULL)
<a name="l00631"></a>00631     {
<a name="l00632"></a>00632         std::cerr &lt;&lt; <span class="stringliteral">"Failed to create an OpenGL context for this window"</span> &lt;&lt; std::endl;
<a name="l00633"></a>00633         <span class="keywordflow">return</span>;
<a name="l00634"></a>00634     }
<a name="l00635"></a>00635 
<a name="l00636"></a>00636     <span class="comment">// Share display lists with other contexts</span>
<a name="l00637"></a>00637     HGLRC CurrentContext = wglGetCurrentContext();
<a name="l00638"></a>00638     <span class="keywordflow">if</span> (CurrentContext)
<a name="l00639"></a>00639         wglShareLists(CurrentContext, myGLContext);
<a name="l00640"></a>00640 
<a name="l00641"></a>00641     <span class="comment">// Activate the context</span>
<a name="l00642"></a>00642     <a class="code" href="classsf_1_1Window.htm#9fc1e745594d5cf6a30225ec9ea36675" title="Activate of deactivate the window as the current target for rendering.">SetActive</a>(<span class="keyword">true</span>);
<a name="l00643"></a>00643 
<a name="l00644"></a>00644     <span class="comment">// Enable multisampling</span>
<a name="l00645"></a>00645     <span class="keywordflow">if</span> (Params.AntialiasingLevel &gt; 0)
<a name="l00646"></a>00646         glEnable(GL_MULTISAMPLE_ARB);
<a name="l00647"></a>00647 }
<a name="l00648"></a>00648 
<a name="l00649"></a>00649 
<a name="l00653"></a>00653 <span class="keywordtype">void</span> WindowImplWin32::Cleanup()
<a name="l00654"></a>00654 {
<a name="l00655"></a>00655     <span class="comment">// Restore the previous video mode (in case we were running in fullscreen)</span>
<a name="l00656"></a>00656     <span class="keywordflow">if</span> (ourFullscreenWindow == <span class="keyword">this</span>)
<a name="l00657"></a>00657     {
<a name="l00658"></a>00658         ChangeDisplaySettings(NULL, 0);
<a name="l00659"></a>00659         ourFullscreenWindow = NULL;
<a name="l00660"></a>00660     }
<a name="l00661"></a>00661 
<a name="l00662"></a>00662     <span class="comment">// Unhide the mouse cursor (in case it was hidden)</span>
<a name="l00663"></a>00663     <a class="code" href="classsf_1_1Window.htm#6142e38cb60901e6604284425714f3f0" title="Show or hide the mouse cursor.">ShowMouseCursor</a>(<span class="keyword">true</span>);
<a name="l00664"></a>00664 
<a name="l00665"></a>00665     <span class="comment">// Destroy the OpenGL context</span>
<a name="l00666"></a>00666     <span class="keywordflow">if</span> (myGLContext)
<a name="l00667"></a>00667     {
<a name="l00668"></a>00668         <span class="comment">// Unbind the context before destroying it</span>
<a name="l00669"></a>00669         <a class="code" href="classsf_1_1Window.htm#9fc1e745594d5cf6a30225ec9ea36675" title="Activate of deactivate the window as the current target for rendering.">SetActive</a>(<span class="keyword">false</span>);
<a name="l00670"></a>00670 
<a name="l00671"></a>00671         wglDeleteContext(myGLContext);
<a name="l00672"></a>00672         myGLContext = NULL;
<a name="l00673"></a>00673     }
<a name="l00674"></a>00674     <span class="keywordflow">if</span> (myDeviceContext)
<a name="l00675"></a>00675     {
<a name="l00676"></a>00676         ReleaseDC(myHandle, myDeviceContext);
<a name="l00677"></a>00677         myDeviceContext = NULL;
<a name="l00678"></a>00678     }
<a name="l00679"></a>00679 }
<a name="l00680"></a>00680 
<a name="l00681"></a>00681 
<a name="l00685"></a>00685 <span class="keywordtype">void</span> WindowImplWin32::ProcessEvent(UINT Message, WPARAM WParam, LPARAM LParam)
<a name="l00686"></a>00686 {
<a name="l00687"></a>00687     <span class="comment">// Don't process any message until window is created</span>
<a name="l00688"></a>00688     <span class="keywordflow">if</span> (myHandle == NULL)
<a name="l00689"></a>00689         <span class="keywordflow">return</span>;
<a name="l00690"></a>00690 
<a name="l00691"></a>00691     <span class="keywordflow">switch</span> (Message)
<a name="l00692"></a>00692     {
<a name="l00693"></a>00693         <span class="comment">// Destroy event</span>
<a name="l00694"></a>00694         <span class="keywordflow">case</span> WM_DESTROY :
<a name="l00695"></a>00695         {
<a name="l00696"></a>00696             <span class="comment">// Here we must cleanup resources !</span>
<a name="l00697"></a>00697             Cleanup();
<a name="l00698"></a>00698             <span class="keywordflow">break</span>;
<a name="l00699"></a>00699         }
<a name="l00700"></a>00700 
<a name="l00701"></a>00701         <span class="comment">// Set cursor event</span>
<a name="l00702"></a>00702         <span class="keywordflow">case</span> WM_SETCURSOR :
<a name="l00703"></a>00703         {
<a name="l00704"></a>00704             <span class="comment">// The mouse has moved, if the cursor is in our window we must refresh the cursor</span>
<a name="l00705"></a>00705             <span class="keywordflow">if</span> (LOWORD(LParam) == HTCLIENT)
<a name="l00706"></a>00706                 SetCursor(myCursor);
<a name="l00707"></a>00707 
<a name="l00708"></a>00708             <span class="keywordflow">break</span>;
<a name="l00709"></a>00709         }
<a name="l00710"></a>00710 
<a name="l00711"></a>00711         <span class="comment">// Close event</span>
<a name="l00712"></a>00712         <span class="keywordflow">case</span> WM_CLOSE :
<a name="l00713"></a>00713         {
<a name="l00714"></a>00714             Event Evt;
<a name="l00715"></a>00715             Evt.Type = Event::Closed;
<a name="l00716"></a>00716             SendEvent(Evt);
<a name="l00717"></a>00717             <span class="keywordflow">break</span>;
<a name="l00718"></a>00718         }
<a name="l00719"></a>00719 
<a name="l00720"></a>00720         <span class="comment">// Resize event</span>
<a name="l00721"></a>00721         <span class="keywordflow">case</span> WM_SIZE :
<a name="l00722"></a>00722         {
<a name="l00723"></a>00723             <span class="comment">// Update window size</span>
<a name="l00724"></a>00724             RECT Rect;
<a name="l00725"></a>00725             GetClientRect(myHandle, &amp;Rect);
<a name="l00726"></a>00726             myWidth  = Rect.right - Rect.left;
<a name="l00727"></a>00727             myHeight = Rect.bottom - Rect.top;
<a name="l00728"></a>00728 
<a name="l00729"></a>00729             Event Evt;
<a name="l00730"></a>00730             Evt.Type        = Event::Resized;
<a name="l00731"></a>00731             Evt.Size.Width  = myWidth;
<a name="l00732"></a>00732             Evt.Size.Height = myHeight;
<a name="l00733"></a>00733             SendEvent(Evt);
<a name="l00734"></a>00734             <span class="keywordflow">break</span>;
<a name="l00735"></a>00735         }
<a name="l00736"></a>00736 
<a name="l00737"></a>00737         <span class="comment">// Gain focus event</span>
<a name="l00738"></a>00738         <span class="keywordflow">case</span> WM_SETFOCUS :
<a name="l00739"></a>00739         {
<a name="l00740"></a>00740             Event Evt;
<a name="l00741"></a>00741             Evt.Type = Event::GainedFocus;
<a name="l00742"></a>00742             SendEvent(Evt);
<a name="l00743"></a>00743             <span class="keywordflow">break</span>;
<a name="l00744"></a>00744         }
<a name="l00745"></a>00745 
<a name="l00746"></a>00746         <span class="comment">// Lost focus event</span>
<a name="l00747"></a>00747         <span class="keywordflow">case</span> WM_KILLFOCUS :
<a name="l00748"></a>00748         {
<a name="l00749"></a>00749             Event Evt;
<a name="l00750"></a>00750             Evt.Type = Event::LostFocus;
<a name="l00751"></a>00751             SendEvent(Evt);
<a name="l00752"></a>00752             <span class="keywordflow">break</span>;
<a name="l00753"></a>00753         }
<a name="l00754"></a>00754 
<a name="l00755"></a>00755         <span class="comment">// Text event</span>
<a name="l00756"></a>00756         <span class="keywordflow">case</span> WM_CHAR :
<a name="l00757"></a>00757         {
<a name="l00758"></a>00758             <span class="keywordflow">if</span> (myKeyRepeatEnabled || ((LParam &amp; (1 &lt;&lt; 30)) == 0))
<a name="l00759"></a>00759             {
<a name="l00760"></a>00760                 Event Evt;
<a name="l00761"></a>00761                 Evt.Type = Event::TextEntered;
<a name="l00762"></a>00762                 Evt.Text.Unicode = <span class="keyword">static_cast&lt;</span>Uint32<span class="keyword">&gt;</span>(WParam);
<a name="l00763"></a>00763                 SendEvent(Evt);
<a name="l00764"></a>00764             }
<a name="l00765"></a>00765             <span class="keywordflow">break</span>;
<a name="l00766"></a>00766         }
<a name="l00767"></a>00767 
<a name="l00768"></a>00768         <span class="comment">// Keydown event</span>
<a name="l00769"></a>00769         <span class="keywordflow">case</span> WM_KEYDOWN :
<a name="l00770"></a>00770         <span class="keywordflow">case</span> WM_SYSKEYDOWN :
<a name="l00771"></a>00771         {
<a name="l00772"></a>00772             <span class="keywordflow">if</span> (myKeyRepeatEnabled || ((HIWORD(LParam) &amp; KF_REPEAT) == 0))
<a name="l00773"></a>00773             {
<a name="l00774"></a>00774                 Event Evt;
<a name="l00775"></a>00775                 Evt.Type        = Event::KeyPressed;
<a name="l00776"></a>00776                 Evt.Key.Alt     = HIWORD(GetAsyncKeyState(VK_MENU))    != 0;
<a name="l00777"></a>00777                 Evt.Key.Control = HIWORD(GetAsyncKeyState(VK_CONTROL)) != 0;
<a name="l00778"></a>00778                 Evt.Key.Shift   = HIWORD(GetAsyncKeyState(VK_SHIFT))   != 0;
<a name="l00779"></a>00779                 Evt.Key.Code    = VirtualKeyCodeToSF(WParam, LParam);
<a name="l00780"></a>00780                 SendEvent(Evt);
<a name="l00781"></a>00781             }
<a name="l00782"></a>00782             <span class="keywordflow">break</span>;
<a name="l00783"></a>00783         }
<a name="l00784"></a>00784 
<a name="l00785"></a>00785         <span class="comment">// Keyup event</span>
<a name="l00786"></a>00786         <span class="keywordflow">case</span> WM_KEYUP :
<a name="l00787"></a>00787         <span class="keywordflow">case</span> WM_SYSKEYUP :
<a name="l00788"></a>00788         {
<a name="l00789"></a>00789             Event Evt;
<a name="l00790"></a>00790             Evt.Type        = Event::KeyReleased;
<a name="l00791"></a>00791             Evt.Key.Alt     = HIWORD(GetAsyncKeyState(VK_MENU))    != 0;
<a name="l00792"></a>00792             Evt.Key.Control = HIWORD(GetAsyncKeyState(VK_CONTROL)) != 0;
<a name="l00793"></a>00793             Evt.Key.Shift   = HIWORD(GetAsyncKeyState(VK_SHIFT))   != 0;
<a name="l00794"></a>00794             Evt.Key.Code    = VirtualKeyCodeToSF(WParam, LParam);
<a name="l00795"></a>00795             SendEvent(Evt);
<a name="l00796"></a>00796 
<a name="l00797"></a>00797             <span class="keywordflow">break</span>;
<a name="l00798"></a>00798         }
<a name="l00799"></a>00799 
<a name="l00800"></a>00800         <span class="comment">// Mouse wheel event</span>
<a name="l00801"></a>00801         <span class="keywordflow">case</span> WM_MOUSEWHEEL :
<a name="l00802"></a>00802         {
<a name="l00803"></a>00803             Event Evt;
<a name="l00804"></a>00804             Evt.Type = Event::MouseWheelMoved;
<a name="l00805"></a>00805             Evt.MouseWheel.Delta = <span class="keyword">static_cast&lt;</span>Int16<span class="keyword">&gt;</span>(HIWORD(WParam)) / 120;
<a name="l00806"></a>00806             SendEvent(Evt);
<a name="l00807"></a>00807             <span class="keywordflow">break</span>;
<a name="l00808"></a>00808         }
<a name="l00809"></a>00809 
<a name="l00810"></a>00810         <span class="comment">// Mouse left button down event</span>
<a name="l00811"></a>00811         <span class="keywordflow">case</span> WM_LBUTTONDOWN :
<a name="l00812"></a>00812         {
<a name="l00813"></a>00813             Event Evt;
<a name="l00814"></a>00814             Evt.Type               = Event::MouseButtonPressed;
<a name="l00815"></a>00815             Evt.MouseButton.Button = Mouse::Left;
<a name="l00816"></a>00816             Evt.MouseButton.X      = LOWORD(LParam);
<a name="l00817"></a>00817             Evt.MouseButton.Y      = HIWORD(LParam);
<a name="l00818"></a>00818             SendEvent(Evt);
<a name="l00819"></a>00819             <span class="keywordflow">break</span>;
<a name="l00820"></a>00820         }
<a name="l00821"></a>00821 
<a name="l00822"></a>00822         <span class="comment">// Mouse left button up event</span>
<a name="l00823"></a>00823         <span class="keywordflow">case</span> WM_LBUTTONUP :
<a name="l00824"></a>00824         {
<a name="l00825"></a>00825             Event Evt;
<a name="l00826"></a>00826             Evt.Type               = Event::MouseButtonReleased;
<a name="l00827"></a>00827             Evt.MouseButton.Button = Mouse::Left;
<a name="l00828"></a>00828             Evt.MouseButton.X      = LOWORD(LParam);
<a name="l00829"></a>00829             Evt.MouseButton.Y      = HIWORD(LParam);
<a name="l00830"></a>00830             SendEvent(Evt);
<a name="l00831"></a>00831             <span class="keywordflow">break</span>;
<a name="l00832"></a>00832         }
<a name="l00833"></a>00833 
<a name="l00834"></a>00834         <span class="comment">// Mouse right button down event</span>
<a name="l00835"></a>00835         <span class="keywordflow">case</span> WM_RBUTTONDOWN :
<a name="l00836"></a>00836         {
<a name="l00837"></a>00837             Event Evt;
<a name="l00838"></a>00838             Evt.Type               = Event::MouseButtonPressed;
<a name="l00839"></a>00839             Evt.MouseButton.Button = Mouse::Right;
<a name="l00840"></a>00840             Evt.MouseButton.X      = LOWORD(LParam);
<a name="l00841"></a>00841             Evt.MouseButton.Y      = HIWORD(LParam);
<a name="l00842"></a>00842             SendEvent(Evt);
<a name="l00843"></a>00843             <span class="keywordflow">break</span>;
<a name="l00844"></a>00844         }
<a name="l00845"></a>00845 
<a name="l00846"></a>00846         <span class="comment">// Mouse right button up event</span>
<a name="l00847"></a>00847         <span class="keywordflow">case</span> WM_RBUTTONUP :
<a name="l00848"></a>00848         {
<a name="l00849"></a>00849             Event Evt;
<a name="l00850"></a>00850             Evt.Type               = Event::MouseButtonReleased;
<a name="l00851"></a>00851             Evt.MouseButton.Button = Mouse::Right;
<a name="l00852"></a>00852             Evt.MouseButton.X      = LOWORD(LParam);
<a name="l00853"></a>00853             Evt.MouseButton.Y      = HIWORD(LParam);
<a name="l00854"></a>00854             SendEvent(Evt);
<a name="l00855"></a>00855             <span class="keywordflow">break</span>;
<a name="l00856"></a>00856         }
<a name="l00857"></a>00857 
<a name="l00858"></a>00858         <span class="comment">// Mouse wheel button down event</span>
<a name="l00859"></a>00859         <span class="keywordflow">case</span> WM_MBUTTONDOWN :
<a name="l00860"></a>00860         {
<a name="l00861"></a>00861             Event Evt;
<a name="l00862"></a>00862             Evt.Type               = Event::MouseButtonPressed;
<a name="l00863"></a>00863             Evt.MouseButton.Button = Mouse::Middle;
<a name="l00864"></a>00864             Evt.MouseButton.X      = LOWORD(LParam);
<a name="l00865"></a>00865             Evt.MouseButton.Y      = HIWORD(LParam);
<a name="l00866"></a>00866             SendEvent(Evt);
<a name="l00867"></a>00867             <span class="keywordflow">break</span>;
<a name="l00868"></a>00868         }
<a name="l00869"></a>00869 
<a name="l00870"></a>00870         <span class="comment">// Mouse wheel button up event</span>
<a name="l00871"></a>00871         <span class="keywordflow">case</span> WM_MBUTTONUP :
<a name="l00872"></a>00872         {
<a name="l00873"></a>00873             Event Evt;
<a name="l00874"></a>00874             Evt.Type               = Event::MouseButtonReleased;
<a name="l00875"></a>00875             Evt.MouseButton.Button = Mouse::Middle;
<a name="l00876"></a>00876             Evt.MouseButton.X      = LOWORD(LParam);
<a name="l00877"></a>00877             Evt.MouseButton.Y      = HIWORD(LParam);
<a name="l00878"></a>00878             SendEvent(Evt);
<a name="l00879"></a>00879             <span class="keywordflow">break</span>;
<a name="l00880"></a>00880         }
<a name="l00881"></a>00881 
<a name="l00882"></a>00882         <span class="comment">// Mouse X button down event</span>
<a name="l00883"></a>00883         <span class="keywordflow">case</span> WM_XBUTTONDOWN :
<a name="l00884"></a>00884         {
<a name="l00885"></a>00885             Event Evt;
<a name="l00886"></a>00886             Evt.Type               = Event::MouseButtonPressed;
<a name="l00887"></a>00887             Evt.MouseButton.Button = HIWORD(WParam) == XBUTTON1 ? Mouse::XButton1 : Mouse::XButton2;
<a name="l00888"></a>00888             Evt.MouseButton.X      = LOWORD(LParam);
<a name="l00889"></a>00889             Evt.MouseButton.Y      = HIWORD(LParam);
<a name="l00890"></a>00890             SendEvent(Evt);
<a name="l00891"></a>00891             <span class="keywordflow">break</span>;
<a name="l00892"></a>00892         }
<a name="l00893"></a>00893 
<a name="l00894"></a>00894         <span class="comment">// Mouse X button up event</span>
<a name="l00895"></a>00895         <span class="keywordflow">case</span> WM_XBUTTONUP :
<a name="l00896"></a>00896         {
<a name="l00897"></a>00897             Event Evt;
<a name="l00898"></a>00898             Evt.Type               = Event::MouseButtonReleased;
<a name="l00899"></a>00899             Evt.MouseButton.Button = HIWORD(WParam) == XBUTTON1 ? Mouse::XButton1 : Mouse::XButton2;
<a name="l00900"></a>00900             Evt.MouseButton.X      = LOWORD(LParam);
<a name="l00901"></a>00901             Evt.MouseButton.Y      = HIWORD(LParam);
<a name="l00902"></a>00902             SendEvent(Evt);
<a name="l00903"></a>00903             <span class="keywordflow">break</span>;
<a name="l00904"></a>00904         }
<a name="l00905"></a>00905 
<a name="l00906"></a>00906         <span class="comment">// Mouse move event</span>
<a name="l00907"></a>00907         <span class="keywordflow">case</span> WM_MOUSEMOVE :
<a name="l00908"></a>00908         {
<a name="l00909"></a>00909             <span class="comment">// Check if we need to generate a MouseEntered event</span>
<a name="l00910"></a>00910             <span class="keywordflow">if</span> (!myIsCursorIn)
<a name="l00911"></a>00911             {
<a name="l00912"></a>00912                 TRACKMOUSEEVENT MouseEvent;
<a name="l00913"></a>00913                 MouseEvent.cbSize    = <span class="keyword">sizeof</span>(TRACKMOUSEEVENT);
<a name="l00914"></a>00914                 MouseEvent.hwndTrack = myHandle;
<a name="l00915"></a>00915                 MouseEvent.dwFlags   = TME_LEAVE;
<a name="l00916"></a>00916                 TrackMouseEvent(&amp;MouseEvent);
<a name="l00917"></a>00917 
<a name="l00918"></a>00918                 myIsCursorIn = <span class="keyword">true</span>;
<a name="l00919"></a>00919 
<a name="l00920"></a>00920                 Event Evt;
<a name="l00921"></a>00921                 Evt.Type = Event::MouseEntered;
<a name="l00922"></a>00922                 SendEvent(Evt);
<a name="l00923"></a>00923             }
<a name="l00924"></a>00924 
<a name="l00925"></a>00925             Event Evt;
<a name="l00926"></a>00926             Evt.Type        = Event::MouseMoved;
<a name="l00927"></a>00927             Evt.MouseMove.X = LOWORD(LParam);
<a name="l00928"></a>00928             Evt.MouseMove.Y = HIWORD(LParam);
<a name="l00929"></a>00929             SendEvent(Evt);
<a name="l00930"></a>00930             <span class="keywordflow">break</span>;
<a name="l00931"></a>00931         }
<a name="l00932"></a>00932 
<a name="l00933"></a>00933         <span class="comment">// Mouse leave event</span>
<a name="l00934"></a>00934         <span class="keywordflow">case</span> WM_MOUSELEAVE :
<a name="l00935"></a>00935         {
<a name="l00936"></a>00936             myIsCursorIn = <span class="keyword">false</span>;
<a name="l00937"></a>00937 
<a name="l00938"></a>00938             Event Evt;
<a name="l00939"></a>00939             Evt.Type = Event::MouseLeft;
<a name="l00940"></a>00940             SendEvent(Evt);
<a name="l00941"></a>00941             <span class="keywordflow">break</span>;
<a name="l00942"></a>00942         }
<a name="l00943"></a>00943     }
<a name="l00944"></a>00944 }
<a name="l00945"></a>00945 
<a name="l00946"></a>00946 
<a name="l00950"></a>00950 <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c81">Key::Code</a> WindowImplWin32::VirtualKeyCodeToSF(WPARAM VirtualKey, LPARAM Flags)
<a name="l00951"></a>00951 {
<a name="l00952"></a>00952     <span class="keywordflow">switch</span> (VirtualKey)
<a name="l00953"></a>00953     {
<a name="l00954"></a>00954         <span class="comment">// Check the scancode to distinguish between left and right shift</span>
<a name="l00955"></a>00955         <span class="keywordflow">case</span> VK_SHIFT :
<a name="l00956"></a>00956         {
<a name="l00957"></a>00957             <span class="keyword">static</span> UINT LShift = MapVirtualKey(VK_LSHIFT, MAPVK_VK_TO_VSC);
<a name="l00958"></a>00958             UINT scancode = (Flags &amp; (0xFF &lt;&lt; 16)) &gt;&gt; 16;
<a name="l00959"></a>00959             <span class="keywordflow">return</span> scancode == LShift ? Key::LShift : Key::RShift;
<a name="l00960"></a>00960         }
<a name="l00961"></a>00961 
<a name="l00962"></a>00962         <span class="comment">// Check the "extended" flag to distinguish between left and right alt</span>
<a name="l00963"></a>00963         <span class="keywordflow">case</span> VK_MENU : <span class="keywordflow">return</span> (HIWORD(Flags) &amp; KF_EXTENDED) ? Key::RAlt : Key::LAlt;
<a name="l00964"></a>00964 
<a name="l00965"></a>00965         <span class="comment">// Check the "extended" flag to distinguish between left and right control</span>
<a name="l00966"></a>00966         <span class="keywordflow">case</span> VK_CONTROL : <span class="keywordflow">return</span> (HIWORD(Flags) &amp; KF_EXTENDED) ? Key::RControl : Key::LControl;
<a name="l00967"></a>00967 
<a name="l00968"></a>00968         <span class="comment">// Other keys are reported properly</span>
<a name="l00969"></a>00969         <span class="keywordflow">case</span> VK_LWIN :       <span class="keywordflow">return</span> <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c81819a5d0739e89a6543b8a1d3b2ed4bdb" title="OS specific key (left side) : windows (Win and Linux), apple (MacOS), ...">Key::LSystem</a>;
<a name="l00970"></a>00970         <span class="keywordflow">case</span> VK_RWIN :       <span class="keywordflow">return</span> <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c81461545de42376b666cb38860a0beec49" title="OS specific key (right side) : windows (Win and Linux), apple (MacOS), ...">Key::RSystem</a>;
<a name="l00971"></a>00971         <span class="keywordflow">case</span> VK_APPS :       <span class="keywordflow">return</span> Key::Menu;
<a name="l00972"></a>00972         <span class="keywordflow">case</span> VK_OEM_1 :      <span class="keywordflow">return</span> <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c819221b62140c199d7d4babe3ab45bdb01" title=";">Key::SemiColon</a>;
<a name="l00973"></a>00973         <span class="keywordflow">case</span> VK_OEM_2 :      <span class="keywordflow">return</span> <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c815e4e1a9e56e51395103ccf57093fb9fd" title="/">Key::Slash</a>;
<a name="l00974"></a>00974         <span class="keywordflow">case</span> VK_OEM_PLUS :   <span class="keywordflow">return</span> <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c815f4b9b3ede3db0e0a009ae02aaf81359" title="=">Key::Equal</a>;
<a name="l00975"></a>00975         <span class="keywordflow">case</span> VK_OEM_MINUS :  <span class="keywordflow">return</span> <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c81cabf862b02044080f5691ff510fcbf00" title="-">Key::Dash</a>;
<a name="l00976"></a>00976         <span class="keywordflow">case</span> VK_OEM_4 :      <span class="keywordflow">return</span> <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c817c927ff513554092cbd16d275542ca93" title="[">Key::LBracket</a>;
<a name="l00977"></a>00977         <span class="keywordflow">case</span> VK_OEM_6 :      <span class="keywordflow">return</span> <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c819b950e8ca9b87c679c0dd34b978323a5" title="]">Key::RBracket</a>;
<a name="l00978"></a>00978         <span class="keywordflow">case</span> VK_OEM_COMMA :  <span class="keywordflow">return</span> <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c81d7c3cca627323fa271fd141a0bfec207" title=",">Key::Comma</a>;
<a name="l00979"></a>00979         <span class="keywordflow">case</span> VK_OEM_PERIOD : <span class="keywordflow">return</span> <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c8150ec4d0d46359708e3337f7c5c9a00b8" title=".">Key::Period</a>;
<a name="l00980"></a>00980         <span class="keywordflow">case</span> VK_OEM_7 :      <span class="keywordflow">return</span> <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c81d8e07863826f31633566959e55fbd1b9" title="&amp;#39;">Key::Quote</a>;
<a name="l00981"></a>00981         <span class="keywordflow">case</span> VK_OEM_5 :      <span class="keywordflow">return</span> Key::BackSlash;
<a name="l00982"></a>00982         <span class="keywordflow">case</span> VK_OEM_3 :      <span class="keywordflow">return</span> <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c81e1e8ba49e9a03ae9db79d671372baf67" title="~">Key::Tilde</a>;
<a name="l00983"></a>00983         <span class="keywordflow">case</span> VK_ESCAPE :     <span class="keywordflow">return</span> Key::Escape;
<a name="l00984"></a>00984         <span class="keywordflow">case</span> VK_SPACE :      <span class="keywordflow">return</span> Key::Space;
<a name="l00985"></a>00985         <span class="keywordflow">case</span> VK_RETURN :     <span class="keywordflow">return</span> Key::Return;
<a name="l00986"></a>00986         <span class="keywordflow">case</span> VK_BACK :       <span class="keywordflow">return</span> Key::Back;
<a name="l00987"></a>00987         <span class="keywordflow">case</span> VK_TAB :        <span class="keywordflow">return</span> Key::Tab;
<a name="l00988"></a>00988         <span class="keywordflow">case</span> VK_PRIOR :      <span class="keywordflow">return</span> Key::PageUp;
<a name="l00989"></a>00989         <span class="keywordflow">case</span> VK_NEXT :       <span class="keywordflow">return</span> Key::PageDown;
<a name="l00990"></a>00990         <span class="keywordflow">case</span> VK_END :        <span class="keywordflow">return</span> Key::End;
<a name="l00991"></a>00991         <span class="keywordflow">case</span> VK_HOME :       <span class="keywordflow">return</span> Key::Home;
<a name="l00992"></a>00992         <span class="keywordflow">case</span> VK_INSERT :     <span class="keywordflow">return</span> Key::Insert;
<a name="l00993"></a>00993         <span class="keywordflow">case</span> VK_DELETE :     <span class="keywordflow">return</span> Key::Delete;
<a name="l00994"></a>00994         <span class="keywordflow">case</span> VK_ADD :        <span class="keywordflow">return</span> <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c81c1a4bc755e274027f79cd34a6951977e" title="+">Key::Add</a>;
<a name="l00995"></a>00995         <span class="keywordflow">case</span> VK_SUBTRACT :   <span class="keywordflow">return</span> <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c8161d59029edf2f17e0c562a674e2a1865" title="-">Key::Subtract</a>;
<a name="l00996"></a>00996         <span class="keywordflow">case</span> VK_MULTIPLY :   <span class="keywordflow">return</span> <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c810c2cf360fb1665c3387f205a001a6814" title="*">Key::Multiply</a>;
<a name="l00997"></a>00997         <span class="keywordflow">case</span> VK_DIVIDE :     <span class="keywordflow">return</span> <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c81f0ef65e172118c443e123935e64269e2" title="/">Key::Divide</a>;
<a name="l00998"></a>00998         <span class="keywordflow">case</span> VK_PAUSE :      <span class="keywordflow">return</span> Key::Pause;
<a name="l00999"></a>00999         <span class="keywordflow">case</span> VK_F1 :         <span class="keywordflow">return</span> Key::F1;
<a name="l01000"></a>01000         <span class="keywordflow">case</span> VK_F2 :         <span class="keywordflow">return</span> Key::F2;
<a name="l01001"></a>01001         <span class="keywordflow">case</span> VK_F3 :         <span class="keywordflow">return</span> Key::F3;
<a name="l01002"></a>01002         <span class="keywordflow">case</span> VK_F4 :         <span class="keywordflow">return</span> Key::F4;
<a name="l01003"></a>01003         <span class="keywordflow">case</span> VK_F5 :         <span class="keywordflow">return</span> Key::F5;
<a name="l01004"></a>01004         <span class="keywordflow">case</span> VK_F6 :         <span class="keywordflow">return</span> Key::F6;
<a name="l01005"></a>01005         <span class="keywordflow">case</span> VK_F7 :         <span class="keywordflow">return</span> Key::F7;
<a name="l01006"></a>01006         <span class="keywordflow">case</span> VK_F8 :         <span class="keywordflow">return</span> Key::F8;
<a name="l01007"></a>01007         <span class="keywordflow">case</span> VK_F9 :         <span class="keywordflow">return</span> Key::F9;
<a name="l01008"></a>01008         <span class="keywordflow">case</span> VK_F10 :        <span class="keywordflow">return</span> Key::F10;
<a name="l01009"></a>01009         <span class="keywordflow">case</span> VK_F11 :        <span class="keywordflow">return</span> Key::F11;
<a name="l01010"></a>01010         <span class="keywordflow">case</span> VK_F12 :        <span class="keywordflow">return</span> Key::F12;
<a name="l01011"></a>01011         <span class="keywordflow">case</span> VK_F13 :        <span class="keywordflow">return</span> Key::F13;
<a name="l01012"></a>01012         <span class="keywordflow">case</span> VK_F14 :        <span class="keywordflow">return</span> Key::F14;
<a name="l01013"></a>01013         <span class="keywordflow">case</span> VK_F15 :        <span class="keywordflow">return</span> Key::F15;
<a name="l01014"></a>01014         <span class="keywordflow">case</span> VK_LEFT :       <span class="keywordflow">return</span> <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c811b48e9fd546b2afdcbb64ae95047be94" title="Left arrow.">Key::Left</a>;
<a name="l01015"></a>01015         <span class="keywordflow">case</span> VK_RIGHT :      <span class="keywordflow">return</span> <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c8132eb7e9964eda306d83efd2442991f8e" title="Right arrow.">Key::Right</a>;
<a name="l01016"></a>01016         <span class="keywordflow">case</span> VK_UP :         <span class="keywordflow">return</span> <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c8193a664cfe6ee856cf5027a01f03954ff" title="Up arrow.">Key::Up</a>;
<a name="l01017"></a>01017         <span class="keywordflow">case</span> VK_DOWN :       <span class="keywordflow">return</span> <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c81db621980e92786cf06b6fb65d622bb62" title="Down arrow.">Key::Down</a>;
<a name="l01018"></a>01018         <span class="keywordflow">case</span> VK_NUMPAD0 :    <span class="keywordflow">return</span> Key::Numpad0;
<a name="l01019"></a>01019         <span class="keywordflow">case</span> VK_NUMPAD1 :    <span class="keywordflow">return</span> Key::Numpad1;
<a name="l01020"></a>01020         <span class="keywordflow">case</span> VK_NUMPAD2 :    <span class="keywordflow">return</span> Key::Numpad2;
<a name="l01021"></a>01021         <span class="keywordflow">case</span> VK_NUMPAD3 :    <span class="keywordflow">return</span> Key::Numpad3;
<a name="l01022"></a>01022         <span class="keywordflow">case</span> VK_NUMPAD4 :    <span class="keywordflow">return</span> Key::Numpad4;
<a name="l01023"></a>01023         <span class="keywordflow">case</span> VK_NUMPAD5 :    <span class="keywordflow">return</span> Key::Numpad5;
<a name="l01024"></a>01024         <span class="keywordflow">case</span> VK_NUMPAD6 :    <span class="keywordflow">return</span> Key::Numpad6;
<a name="l01025"></a>01025         <span class="keywordflow">case</span> VK_NUMPAD7 :    <span class="keywordflow">return</span> Key::Numpad7;
<a name="l01026"></a>01026         <span class="keywordflow">case</span> VK_NUMPAD8 :    <span class="keywordflow">return</span> Key::Numpad8;
<a name="l01027"></a>01027         <span class="keywordflow">case</span> VK_NUMPAD9 :    <span class="keywordflow">return</span> Key::Numpad9;
<a name="l01028"></a>01028         <span class="keywordflow">case</span> <span class="charliteral">'A'</span> :           <span class="keywordflow">return</span> Key::A;
<a name="l01029"></a>01029         <span class="keywordflow">case</span> <span class="charliteral">'Z'</span> :           <span class="keywordflow">return</span> Key::Z;
<a name="l01030"></a>01030         <span class="keywordflow">case</span> <span class="charliteral">'E'</span> :           <span class="keywordflow">return</span> Key::E;
<a name="l01031"></a>01031         <span class="keywordflow">case</span> <span class="charliteral">'R'</span> :           <span class="keywordflow">return</span> Key::R;
<a name="l01032"></a>01032         <span class="keywordflow">case</span> <span class="charliteral">'T'</span> :           <span class="keywordflow">return</span> Key::T;
<a name="l01033"></a>01033         <span class="keywordflow">case</span> <span class="charliteral">'Y'</span> :           <span class="keywordflow">return</span> Key::Y;
<a name="l01034"></a>01034         <span class="keywordflow">case</span> <span class="charliteral">'U'</span> :           <span class="keywordflow">return</span> Key::U;
<a name="l01035"></a>01035         <span class="keywordflow">case</span> <span class="charliteral">'I'</span> :           <span class="keywordflow">return</span> Key::I;
<a name="l01036"></a>01036         <span class="keywordflow">case</span> <span class="charliteral">'O'</span> :           <span class="keywordflow">return</span> Key::O;
<a name="l01037"></a>01037         <span class="keywordflow">case</span> <span class="charliteral">'P'</span> :           <span class="keywordflow">return</span> Key::P;
<a name="l01038"></a>01038         <span class="keywordflow">case</span> <span class="charliteral">'Q'</span> :           <span class="keywordflow">return</span> Key::Q;
<a name="l01039"></a>01039         <span class="keywordflow">case</span> <span class="charliteral">'S'</span> :           <span class="keywordflow">return</span> Key::S;
<a name="l01040"></a>01040         <span class="keywordflow">case</span> <span class="charliteral">'D'</span> :           <span class="keywordflow">return</span> Key::D;
<a name="l01041"></a>01041         <span class="keywordflow">case</span> <span class="charliteral">'F'</span> :           <span class="keywordflow">return</span> Key::F;
<a name="l01042"></a>01042         <span class="keywordflow">case</span> <span class="charliteral">'G'</span> :           <span class="keywordflow">return</span> Key::G;
<a name="l01043"></a>01043         <span class="keywordflow">case</span> <span class="charliteral">'H'</span> :           <span class="keywordflow">return</span> Key::H;
<a name="l01044"></a>01044         <span class="keywordflow">case</span> <span class="charliteral">'J'</span> :           <span class="keywordflow">return</span> Key::J;
<a name="l01045"></a>01045         <span class="keywordflow">case</span> <span class="charliteral">'K'</span> :           <span class="keywordflow">return</span> Key::K;
<a name="l01046"></a>01046         <span class="keywordflow">case</span> <span class="charliteral">'L'</span> :           <span class="keywordflow">return</span> Key::L;
<a name="l01047"></a>01047         <span class="keywordflow">case</span> <span class="charliteral">'M'</span> :           <span class="keywordflow">return</span> Key::M;
<a name="l01048"></a>01048         <span class="keywordflow">case</span> <span class="charliteral">'W'</span> :           <span class="keywordflow">return</span> Key::W;
<a name="l01049"></a>01049         <span class="keywordflow">case</span> <span class="charliteral">'X'</span> :           <span class="keywordflow">return</span> Key::X;
<a name="l01050"></a>01050         <span class="keywordflow">case</span> <span class="charliteral">'C'</span> :           <span class="keywordflow">return</span> Key::C;
<a name="l01051"></a>01051         <span class="keywordflow">case</span> <span class="charliteral">'V'</span> :           <span class="keywordflow">return</span> Key::V;
<a name="l01052"></a>01052         <span class="keywordflow">case</span> <span class="charliteral">'B'</span> :           <span class="keywordflow">return</span> Key::B;
<a name="l01053"></a>01053         <span class="keywordflow">case</span> <span class="charliteral">'N'</span> :           <span class="keywordflow">return</span> Key::N;
<a name="l01054"></a>01054         <span class="keywordflow">case</span> <span class="charliteral">'0'</span> :           <span class="keywordflow">return</span> Key::Num0;
<a name="l01055"></a>01055         <span class="keywordflow">case</span> <span class="charliteral">'1'</span> :           <span class="keywordflow">return</span> Key::Num1;
<a name="l01056"></a>01056         <span class="keywordflow">case</span> <span class="charliteral">'2'</span> :           <span class="keywordflow">return</span> Key::Num2;
<a name="l01057"></a>01057         <span class="keywordflow">case</span> <span class="charliteral">'3'</span> :           <span class="keywordflow">return</span> Key::Num3;
<a name="l01058"></a>01058         <span class="keywordflow">case</span> <span class="charliteral">'4'</span> :           <span class="keywordflow">return</span> Key::Num4;
<a name="l01059"></a>01059         <span class="keywordflow">case</span> <span class="charliteral">'5'</span> :           <span class="keywordflow">return</span> Key::Num5;
<a name="l01060"></a>01060         <span class="keywordflow">case</span> <span class="charliteral">'6'</span> :           <span class="keywordflow">return</span> Key::Num6;
<a name="l01061"></a>01061         <span class="keywordflow">case</span> <span class="charliteral">'7'</span> :           <span class="keywordflow">return</span> Key::Num7;
<a name="l01062"></a>01062         <span class="keywordflow">case</span> <span class="charliteral">'8'</span> :           <span class="keywordflow">return</span> Key::Num8;
<a name="l01063"></a>01063         <span class="keywordflow">case</span> <span class="charliteral">'9'</span> :           <span class="keywordflow">return</span> Key::Num9;
<a name="l01064"></a>01064     }
<a name="l01065"></a>01065 
<a name="l01066"></a>01066     <span class="keywordflow">return</span> <a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c81">Key::Code</a>(0);
<a name="l01067"></a>01067 }
<a name="l01068"></a>01068 
<a name="l01069"></a>01069 
<a name="l01075"></a>01075 <span class="keywordtype">bool</span> WindowImplWin32::HasUnicodeSupport()
<a name="l01076"></a>01076 {
<a name="l01077"></a>01077     OSVERSIONINFO VersionInfo;
<a name="l01078"></a>01078     ZeroMemory(&amp;VersionInfo, <span class="keyword">sizeof</span>(VersionInfo));
<a name="l01079"></a>01079     VersionInfo.dwOSVersionInfoSize = <span class="keyword">sizeof</span>(VersionInfo);
<a name="l01080"></a>01080 
<a name="l01081"></a>01081     <span class="keywordflow">if</span> (GetVersionEx(&amp;VersionInfo))
<a name="l01082"></a>01082     {
<a name="l01083"></a>01083         <span class="keywordflow">return</span> VersionInfo.dwPlatformId == VER_PLATFORM_WIN32_NT;
<a name="l01084"></a>01084     }
<a name="l01085"></a>01085     <span class="keywordflow">else</span>
<a name="l01086"></a>01086     {
<a name="l01087"></a>01087         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l01088"></a>01088     }
<a name="l01089"></a>01089 }
<a name="l01090"></a>01090 
<a name="l01091"></a>01091 
<a name="l01095"></a>01095 LRESULT CALLBACK WindowImplWin32::GlobalOnEvent(HWND Handle, UINT Message, WPARAM WParam, LPARAM LParam)
<a name="l01096"></a>01096 {
<a name="l01097"></a>01097     <span class="comment">// Associate handle and Window instance when the creation message is received</span>
<a name="l01098"></a>01098     <span class="keywordflow">if</span> (Message == WM_CREATE)
<a name="l01099"></a>01099     {
<a name="l01100"></a>01100         <span class="comment">// Get WindowImplWin32 instance (it was passed as the last argument of CreateWindow)</span>
<a name="l01101"></a>01101         <span class="keywordtype">long</span> This = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">long</span><span class="keyword">&gt;</span>(<span class="keyword">reinterpret_cast&lt;</span>CREATESTRUCT*<span class="keyword">&gt;</span>(LParam)-&gt;lpCreateParams);
<a name="l01102"></a>01102 
<a name="l01103"></a>01103         <span class="comment">// Set as the "user data" parameter of the window</span>
<a name="l01104"></a>01104         SetWindowLongPtr(Handle, GWLP_USERDATA, This);
<a name="l01105"></a>01105     }
<a name="l01106"></a>01106 
<a name="l01107"></a>01107     <span class="comment">// Get the WindowImpl instance corresponding to the window handle</span>
<a name="l01108"></a>01108     WindowImplWin32* <a class="code" href="classsf_1_1Window.htm#5359122166b4dc492c3d25caf08ccfc4" title="Default constructor.">Window</a> = <span class="keyword">reinterpret_cast&lt;</span>WindowImplWin32*<span class="keyword">&gt;</span>(GetWindowLongPtr(Handle, GWLP_USERDATA));
<a name="l01109"></a>01109 
<a name="l01110"></a>01110     <span class="comment">// Forward the event to the appropriate function</span>
<a name="l01111"></a>01111     <span class="keywordflow">if</span> (Window)
<a name="l01112"></a>01112     {
<a name="l01113"></a>01113         Window-&gt;ProcessEvent(Message, WParam, LParam);
<a name="l01114"></a>01114 
<a name="l01115"></a>01115         <span class="keywordflow">if</span> (Window-&gt;myCallback)
<a name="l01116"></a>01116             <span class="keywordflow">return</span> CallWindowProc(reinterpret_cast&lt;WNDPROC&gt;(Window-&gt;myCallback), Handle, Message, WParam, LParam);
<a name="l01117"></a>01117     }
<a name="l01118"></a>01118 
<a name="l01119"></a>01119     <span class="comment">// We don't forward the WM_CLOSE message to prevent the OS from automatically destroying the window</span>
<a name="l01120"></a>01120     <span class="keywordflow">if</span> (Message == WM_CLOSE)
<a name="l01121"></a>01121         <span class="keywordflow">return</span> 0;
<a name="l01122"></a>01122 
<a name="l01123"></a>01123     <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">bool</span> HasUnicode = HasUnicodeSupport();
<a name="l01124"></a>01124     <span class="keywordflow">return</span> HasUnicode ? DefWindowProcW(Handle, Message, WParam, LParam) :
<a name="l01125"></a>01125                         DefWindowProcA(Handle, Message, WParam, LParam);
<a name="l01126"></a>01126 }
<a name="l01127"></a>01127 
<a name="l01128"></a>01128 } <span class="comment">// namespace priv</span>
<a name="l01129"></a>01129 
<a name="l01130"></a>01130 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
