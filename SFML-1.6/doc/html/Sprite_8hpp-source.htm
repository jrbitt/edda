<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>Sprite.hpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_SPRITE_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_SPRITE_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/System/Resource.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;SFML/Graphics/Drawable.hpp&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;SFML/Graphics/Rect.hpp&gt;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="keyword">namespace </span>sf
<a name="l00037"></a>00037 {
<a name="l00038"></a>00038 <span class="keyword">class </span>Image;
<a name="l00039"></a>00039 
<a name="l00044"></a><a class="code" href="classsf_1_1Sprite.htm">00044</a> <span class="keyword">class </span>SFML_API <a class="code" href="classsf_1_1Sprite.htm" title="Sprite defines a sprite : texture, transformations, color, and draw on screen.">Sprite</a> : <span class="keyword">public</span> <a class="code" href="classsf_1_1Drawable.htm" title="Abstract base class for every object that can be drawn into a render window.">Drawable</a>
<a name="l00045"></a>00045 {
<a name="l00046"></a>00046 <span class="keyword">public</span> :
<a name="l00047"></a>00047 
<a name="l00052"></a>00052     <a class="code" href="classsf_1_1Sprite.htm" title="Sprite defines a sprite : texture, transformations, color, and draw on screen.">Sprite</a>();
<a name="l00053"></a>00053 
<a name="l00064"></a>00064     <span class="keyword">explicit</span> <a class="code" href="classsf_1_1Sprite.htm" title="Sprite defines a sprite : texture, transformations, color, and draw on screen.">Sprite</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a>&amp; Img, <span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; Position = <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>(0, 0), <span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; Scale = <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>(1, 1), <span class="keywordtype">float</span> Rotation = 0.f, <span class="keyword">const</span> <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a>&amp; Col = <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a>(255, 255, 255, 255));
<a name="l00065"></a>00065 
<a name="l00072"></a>00072     <span class="keywordtype">void</span> SetImage(<span class="keyword">const</span> <a class="code" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a>&amp; Img);
<a name="l00073"></a>00073 
<a name="l00081"></a>00081     <span class="keywordtype">void</span> SetSubRect(<span class="keyword">const</span> <a class="code" href="classsf_1_1Rect.htm">IntRect</a>&amp; SubRect);
<a name="l00082"></a>00082 
<a name="l00091"></a>00091     <span class="keywordtype">void</span> Resize(<span class="keywordtype">float</span> Width, <span class="keywordtype">float</span> Height);
<a name="l00092"></a>00092 
<a name="l00100"></a>00100     <span class="keywordtype">void</span> Resize(<span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; Size);
<a name="l00101"></a>00101 
<a name="l00108"></a>00108     <span class="keywordtype">void</span> FlipX(<span class="keywordtype">bool</span> Flipped);
<a name="l00109"></a>00109 
<a name="l00116"></a>00116     <span class="keywordtype">void</span> FlipY(<span class="keywordtype">bool</span> Flipped);
<a name="l00117"></a>00117 
<a name="l00124"></a>00124     <span class="keyword">const</span> <a class="code" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a>* GetImage() <span class="keyword">const</span>;
<a name="l00125"></a>00125 
<a name="l00132"></a>00132     <span class="keyword">const</span> <a class="code" href="classsf_1_1Rect.htm">IntRect</a>&amp; GetSubRect() <span class="keyword">const</span>;
<a name="l00133"></a>00133 
<a name="l00140"></a>00140     <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a> GetSize() <span class="keyword">const</span>;
<a name="l00141"></a>00141 
<a name="l00152"></a>00152     <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> GetPixel(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> X, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Y) <span class="keyword">const</span>;
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 <span class="keyword">protected</span> :
<a name="l00155"></a>00155 
<a name="l00160"></a>00160     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Render(<a class="code" href="classsf_1_1RenderTarget.htm" title="Base class for all render targets (window, image, .">RenderTarget</a>&amp; Target) <span class="keyword">const</span>;
<a name="l00161"></a>00161 
<a name="l00162"></a>00162 <span class="keyword">private</span> :
<a name="l00163"></a>00163 
<a name="l00165"></a>00165     <span class="comment">// Member data</span>
<a name="l00167"></a>00167 <span class="comment"></span>    <a class="code" href="classsf_1_1ResourcePtr.htm">ResourcePtr&lt;Image&gt;</a> myImage;      
<a name="l00168"></a>00168     <a class="code" href="classsf_1_1Rect.htm">IntRect</a>            mySubRect;    
<a name="l00169"></a>00169     <span class="keywordtype">bool</span>               myIsFlippedX; 
<a name="l00170"></a>00170     <span class="keywordtype">bool</span>               myIsFlippedY; 
<a name="l00171"></a>00171 };
<a name="l00172"></a>00172 
<a name="l00173"></a>00173 } <span class="comment">// namespace sf</span>
<a name="l00174"></a>00174 
<a name="l00175"></a>00175 
<a name="l00176"></a>00176 <span class="preprocessor">#endif // SFML_SPRITE_HPP</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
