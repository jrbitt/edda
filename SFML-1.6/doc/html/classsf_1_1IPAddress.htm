<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><b>sf</b>::<a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a>
  </div>
</div>
<div class="contents">
<h1>sf::IPAddress Class Reference</h1><!-- doxytag: class="sf::IPAddress" --><a class="el" href="classsf_1_1IPAddress.htm" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a> provides easy manipulation of IP v4 addresses.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="IPAddress_8hpp-source.htm">IPAddress.hpp</a>&gt;</code>
<p>

<p>
<a href="classsf_1_1IPAddress-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.htm#d0d6a00a3fd597aab4b86f2bc5a85831">IPAddress</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Default constructor -- constructs an invalid address.  <a href="#d0d6a00a3fd597aab4b86f2bc5a85831"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.htm#df8d2e87ea8076b627c3e7254b5e4039">IPAddress</a> (const std::string &amp;Address)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct the address from a string.  <a href="#df8d2e87ea8076b627c3e7254b5e4039"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.htm#00c1b422265e1261509d5030534bfb0f">IPAddress</a> (const char *Address)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct the address from a C-style string ; Needed for implicit conversions from literal strings to <a class="el" href="classsf_1_1IPAddress.htm" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a> to work.  <a href="#00c1b422265e1261509d5030534bfb0f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.htm#16fa44fa881e32a03b67006d90db0c39">IPAddress</a> (Uint8 Byte0, Uint8 Byte1, Uint8 Byte2, Uint8 Byte3)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct the address from 4 bytes.  <a href="#16fa44fa881e32a03b67006d90db0c39"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.htm#d692d581e4b96ae3377e95947abb7565">IPAddress</a> (Uint32 Address)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct the address from a 32-bits integer.  <a href="#d692d581e4b96ae3377e95947abb7565"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.htm#943e91f407afa5d9ae9b988492385697">IsValid</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Tell if the address is a valid one.  <a href="#943e91f407afa5d9ae9b988492385697"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.htm#76eadca85be545b5c1c68a4d0dc1c643">ToString</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get a string representation of the address.  <a href="#76eadca85be545b5c1c68a4d0dc1c643"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">Uint32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.htm#ec6999cce584d3b275072cb6da839c3c">ToInteger</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get an integer representation of the address.  <a href="#ec6999cce584d3b275072cb6da839c3c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.htm#326dc00d3ab26ada6ed3168460545b48">operator==</a> (const <a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> &amp;Other) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Comparison operator ==.  <a href="#326dc00d3ab26ada6ed3168460545b48"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.htm#dcab830aa4008d469c235582d90ae104">operator!=</a> (const <a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> &amp;Other) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Comparison operator !=.  <a href="#dcab830aa4008d469c235582d90ae104"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.htm#90ca315772725588df2a5fe73565cb3e">operator&lt;</a> (const <a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> &amp;Other) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Comparison operator &lt;.  <a href="#90ca315772725588df2a5fe73565cb3e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.htm#6cd4ab449515009f0d1ab0cd41ddbab0">operator&gt;</a> (const <a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> &amp;Other) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Comparison operator &gt;.  <a href="#6cd4ab449515009f0d1ab0cd41ddbab0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.htm#d9159e1fbdfffb81b45ac2518143c2be">operator&lt;=</a> (const <a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> &amp;Other) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Comparison operator &lt;=.  <a href="#d9159e1fbdfffb81b45ac2518143c2be"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.htm#7b0f3e471d2286737023d80220a1313b">operator&gt;=</a> (const <a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> &amp;Other) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Comparison operator &gt;=.  <a href="#7b0f3e471d2286737023d80220a1313b"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.htm#c17d4ad5721ad2bbe5ab14fc1522668e">GetLocalAddress</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the computer's local IP address (from the LAN point of view).  <a href="#c17d4ad5721ad2bbe5ab14fc1522668e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.htm#d025962b430dd6da4e10ea3e69551956">GetPublicAddress</a> (float Timeout=0.f)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the computer's public IP address (from the web point of view).  <a href="#d025962b430dd6da4e10ea3e69551956"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Static Public Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static const <a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.htm#3529ec93755712b038fe6b1456c4f7e0">LocalHost</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Local host address (to connect to the same computer).  <a href="#3529ec93755712b038fe6b1456c4f7e0"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
<a class="el" href="classsf_1_1IPAddress.htm" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a> provides easy manipulation of IP v4 addresses. 
<p>Definition at line <a class="el" href="IPAddress_8hpp-source.htm#l00042">42</a> of file <a class="el" href="IPAddress_8hpp-source.htm">IPAddress.hpp</a>.</p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="d0d6a00a3fd597aab4b86f2bc5a85831"></a><!-- doxytag: member="sf::IPAddress::IPAddress" ref="d0d6a00a3fd597aab4b86f2bc5a85831" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::IPAddress::IPAddress           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Default constructor -- constructs an invalid address. 
<p>
Default constructor.
<p>Definition at line <a class="el" href="IPAddress_8cpp-source.htm#l00045">45</a> of file <a class="el" href="IPAddress_8cpp-source.htm">IPAddress.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="df8d2e87ea8076b627c3e7254b5e4039"></a><!-- doxytag: member="sf::IPAddress::IPAddress" ref="df8d2e87ea8076b627c3e7254b5e4039" args="(const std::string &amp;Address)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::IPAddress::IPAddress           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>Address</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Construct the address from a string. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Address</em>&nbsp;</td><td>: IP address ("xxx.xxx.xxx.xxx") or network name </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="IPAddress_8cpp-source.htm#l00055">55</a> of file <a class="el" href="IPAddress_8cpp-source.htm">IPAddress.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="00c1b422265e1261509d5030534bfb0f"></a><!-- doxytag: member="sf::IPAddress::IPAddress" ref="00c1b422265e1261509d5030534bfb0f" args="(const char *Address)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::IPAddress::IPAddress           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>Address</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Construct the address from a C-style string ; Needed for implicit conversions from literal strings to <a class="el" href="classsf_1_1IPAddress.htm" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a> to work. 
<p>
Construct the address from a C-style string ; Needed for implicit conversions from literal strings to <a class="el" href="classsf_1_1IPAddress.htm" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a> to work.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Address</em>&nbsp;</td><td>: IP address ("xxx.xxx.xxx.xxx") or network name </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="IPAddress_8cpp-source.htm#l00082">82</a> of file <a class="el" href="IPAddress_8cpp-source.htm">IPAddress.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="16fa44fa881e32a03b67006d90db0c39"></a><!-- doxytag: member="sf::IPAddress::IPAddress" ref="16fa44fa881e32a03b67006d90db0c39" args="(Uint8 Byte0, Uint8 Byte1, Uint8 Byte2, Uint8 Byte3)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::IPAddress::IPAddress           </td>
          <td>(</td>
          <td class="paramtype">Uint8&nbsp;</td>
          <td class="paramname"> <em>Byte0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint8&nbsp;</td>
          <td class="paramname"> <em>Byte1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint8&nbsp;</td>
          <td class="paramname"> <em>Byte2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint8&nbsp;</td>
          <td class="paramname"> <em>Byte3</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Construct the address from 4 bytes. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Byte0</em>&nbsp;</td><td>: First byte of the address </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Byte1</em>&nbsp;</td><td>: Second byte of the address </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Byte2</em>&nbsp;</td><td>: Third byte of the address </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Byte3</em>&nbsp;</td><td>: Fourth byte of the address </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="IPAddress_8cpp-source.htm#l00108">108</a> of file <a class="el" href="IPAddress_8cpp-source.htm">IPAddress.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="d692d581e4b96ae3377e95947abb7565"></a><!-- doxytag: member="sf::IPAddress::IPAddress" ref="d692d581e4b96ae3377e95947abb7565" args="(Uint32 Address)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::IPAddress::IPAddress           </td>
          <td>(</td>
          <td class="paramtype">Uint32&nbsp;</td>
          <td class="paramname"> <em>Address</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Construct the address from a 32-bits integer. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Address</em>&nbsp;</td><td>: 4 bytes of the address packed into a 32-bits integer </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="IPAddress_8cpp-source.htm#l00117">117</a> of file <a class="el" href="IPAddress_8cpp-source.htm">IPAddress.cpp</a>.</p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="c17d4ad5721ad2bbe5ab14fc1522668e"></a><!-- doxytag: member="sf::IPAddress::GetLocalAddress" ref="c17d4ad5721ad2bbe5ab14fc1522668e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> sf::IPAddress::GetLocalAddress           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the computer's local IP address (from the LAN point of view). 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Local IP address </dd></dl>

<p>Definition at line <a class="el" href="IPAddress_8cpp-source.htm#l00156">156</a> of file <a class="el" href="IPAddress_8cpp-source.htm">IPAddress.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="d025962b430dd6da4e10ea3e69551956"></a><!-- doxytag: member="sf::IPAddress::GetPublicAddress" ref="d025962b430dd6da4e10ea3e69551956" args="(float Timeout=0.f)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> sf::IPAddress::GetPublicAddress           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Timeout</em> = <code>0.f</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the computer's public IP address (from the web point of view). 
<p>
The only way to get a public address is to ask it to a distant website ; as a consequence, this function may be very slow -- use it as few as possible !<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Timeout</em>&nbsp;</td><td>: Maximum time to wait, in seconds (0 by default : no timeout)</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Public IP address </dd></dl>

<p>Definition at line <a class="el" href="IPAddress_8cpp-source.htm#l00204">204</a> of file <a class="el" href="IPAddress_8cpp-source.htm">IPAddress.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="943e91f407afa5d9ae9b988492385697"></a><!-- doxytag: member="sf::IPAddress::IsValid" ref="943e91f407afa5d9ae9b988492385697" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::IPAddress::IsValid           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Tell if the address is a valid one. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if address has a valid syntax </dd></dl>

<p>Definition at line <a class="el" href="IPAddress_8cpp-source.htm#l00126">126</a> of file <a class="el" href="IPAddress_8cpp-source.htm">IPAddress.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="dcab830aa4008d469c235582d90ae104"></a><!-- doxytag: member="sf::IPAddress::operator!=" ref="dcab830aa4008d469c235582d90ae104" args="(const IPAddress &amp;Other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::IPAddress::operator!=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Other</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Comparison operator !=. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Other</em>&nbsp;</td><td>: Address to compare</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if *this != Other </dd></dl>

<p>Definition at line <a class="el" href="IPAddress_8cpp-source.htm#l00235">235</a> of file <a class="el" href="IPAddress_8cpp-source.htm">IPAddress.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="90ca315772725588df2a5fe73565cb3e"></a><!-- doxytag: member="sf::IPAddress::operator&lt;" ref="90ca315772725588df2a5fe73565cb3e" args="(const IPAddress &amp;Other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::IPAddress::operator&lt;           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Other</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Comparison operator &lt;. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Other</em>&nbsp;</td><td>: Address to compare</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if *this &lt; Other </dd></dl>

<p>Definition at line <a class="el" href="IPAddress_8cpp-source.htm#l00244">244</a> of file <a class="el" href="IPAddress_8cpp-source.htm">IPAddress.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="d9159e1fbdfffb81b45ac2518143c2be"></a><!-- doxytag: member="sf::IPAddress::operator&lt;=" ref="d9159e1fbdfffb81b45ac2518143c2be" args="(const IPAddress &amp;Other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::IPAddress::operator&lt;=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Other</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Comparison operator &lt;=. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Other</em>&nbsp;</td><td>: Address to compare</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if *this &lt;= Other </dd></dl>

<p>Definition at line <a class="el" href="IPAddress_8cpp-source.htm#l00262">262</a> of file <a class="el" href="IPAddress_8cpp-source.htm">IPAddress.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="326dc00d3ab26ada6ed3168460545b48"></a><!-- doxytag: member="sf::IPAddress::operator==" ref="326dc00d3ab26ada6ed3168460545b48" args="(const IPAddress &amp;Other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::IPAddress::operator==           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Other</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Comparison operator ==. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Other</em>&nbsp;</td><td>: Address to compare</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if *this == Other </dd></dl>

<p>Definition at line <a class="el" href="IPAddress_8cpp-source.htm#l00226">226</a> of file <a class="el" href="IPAddress_8cpp-source.htm">IPAddress.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="6cd4ab449515009f0d1ab0cd41ddbab0"></a><!-- doxytag: member="sf::IPAddress::operator&gt;" ref="6cd4ab449515009f0d1ab0cd41ddbab0" args="(const IPAddress &amp;Other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::IPAddress::operator&gt;           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Other</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Comparison operator &gt;. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Other</em>&nbsp;</td><td>: Address to compare</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if *this &gt; Other </dd></dl>

<p>Definition at line <a class="el" href="IPAddress_8cpp-source.htm#l00253">253</a> of file <a class="el" href="IPAddress_8cpp-source.htm">IPAddress.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="7b0f3e471d2286737023d80220a1313b"></a><!-- doxytag: member="sf::IPAddress::operator&gt;=" ref="7b0f3e471d2286737023d80220a1313b" args="(const IPAddress &amp;Other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::IPAddress::operator&gt;=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Other</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Comparison operator &gt;=. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Other</em>&nbsp;</td><td>: Address to compare</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if *this &gt;= Other </dd></dl>

<p>Definition at line <a class="el" href="IPAddress_8cpp-source.htm#l00271">271</a> of file <a class="el" href="IPAddress_8cpp-source.htm">IPAddress.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="ec6999cce584d3b275072cb6da839c3c"></a><!-- doxytag: member="sf::IPAddress::ToInteger" ref="ec6999cce584d3b275072cb6da839c3c" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Uint32 sf::IPAddress::ToInteger           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get an integer representation of the address. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>32-bits integer containing the 4 bytes of the address, in system endianness </dd></dl>

<p>Definition at line <a class="el" href="IPAddress_8cpp-source.htm#l00147">147</a> of file <a class="el" href="IPAddress_8cpp-source.htm">IPAddress.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="76eadca85be545b5c1c68a4d0dc1c643"></a><!-- doxytag: member="sf::IPAddress::ToString" ref="76eadca85be545b5c1c68a4d0dc1c643" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string sf::IPAddress::ToString           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get a string representation of the address. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd><a class="el" href="classsf_1_1String.htm" title="String defines a graphical 2D text, that can be drawn on screen.">String</a> representation of the IP address ("xxx.xxx.xxx.xxx") </dd></dl>

<p>Definition at line <a class="el" href="IPAddress_8cpp-source.htm#l00135">135</a> of file <a class="el" href="IPAddress_8cpp-source.htm">IPAddress.cpp</a>.</p>

</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="3529ec93755712b038fe6b1456c4f7e0"></a><!-- doxytag: member="sf::IPAddress::LocalHost" ref="3529ec93755712b038fe6b1456c4f7e0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> <a class="el" href="classsf_1_1IPAddress.htm#3529ec93755712b038fe6b1456c4f7e0">sf::IPAddress::LocalHost</a><code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Local host address (to connect to the same computer). 
<p>
Static member data. 
<p>Definition at line <a class="el" href="IPAddress_8hpp-source.htm#l00196">196</a> of file <a class="el" href="IPAddress_8hpp-source.htm">IPAddress.hpp</a>.</p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="IPAddress_8hpp-source.htm">IPAddress.hpp</a><li><a class="el" href="IPAddress_8cpp-source.htm">IPAddress.cpp</a></ul>
</div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
