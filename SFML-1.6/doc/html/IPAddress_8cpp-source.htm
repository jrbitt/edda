<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>IPAddress.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Network/IPAddress.hpp&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;SFML/Network/Http.hpp&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;SFML/Network/SocketHelper.hpp&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="keyword">namespace </span>sf
<a name="l00035"></a>00035 {
<a name="l00039"></a>00039 <span class="keyword">const</span> IPAddress <a class="code" href="classsf_1_1IPAddress.htm#3529ec93755712b038fe6b1456c4f7e0" title="Local host address (to connect to the same computer).">IPAddress::LocalHost</a>(<span class="stringliteral">"127.0.0.1"</span>);
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 
<a name="l00045"></a><a class="code" href="classsf_1_1IPAddress.htm#d0d6a00a3fd597aab4b86f2bc5a85831">00045</a> <a class="code" href="classsf_1_1IPAddress.htm#d0d6a00a3fd597aab4b86f2bc5a85831" title="Default constructor -- constructs an invalid address.">IPAddress::IPAddress</a>() :
<a name="l00046"></a>00046 myAddress(INADDR_NONE)
<a name="l00047"></a>00047 {
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 }
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 
<a name="l00055"></a><a class="code" href="classsf_1_1IPAddress.htm#df8d2e87ea8076b627c3e7254b5e4039">00055</a> <a class="code" href="classsf_1_1IPAddress.htm#d0d6a00a3fd597aab4b86f2bc5a85831" title="Default constructor -- constructs an invalid address.">IPAddress::IPAddress</a>(<span class="keyword">const</span> std::string&amp; Address)
<a name="l00056"></a>00056 {
<a name="l00057"></a>00057     <span class="comment">// First try to convert it as a byte representation ("xxx.xxx.xxx.xxx")</span>
<a name="l00058"></a>00058     myAddress = inet_addr(Address.c_str());
<a name="l00059"></a>00059 
<a name="l00060"></a>00060     <span class="comment">// If not successful, try to convert it as a host name</span>
<a name="l00061"></a>00061     <span class="keywordflow">if</span> (!<a class="code" href="classsf_1_1IPAddress.htm#943e91f407afa5d9ae9b988492385697" title="Tell if the address is a valid one.">IsValid</a>())
<a name="l00062"></a>00062     {
<a name="l00063"></a>00063         hostent* Host = gethostbyname(Address.c_str());
<a name="l00064"></a>00064         <span class="keywordflow">if</span> (Host)
<a name="l00065"></a>00065         {
<a name="l00066"></a>00066             <span class="comment">// Host found, extract its IP address</span>
<a name="l00067"></a>00067             myAddress = <span class="keyword">reinterpret_cast&lt;</span>in_addr*<span class="keyword">&gt;</span>(Host-&gt;h_addr)-&gt;s_addr;
<a name="l00068"></a>00068         }
<a name="l00069"></a>00069         <span class="keywordflow">else</span>
<a name="l00070"></a>00070         {
<a name="l00071"></a>00071             <span class="comment">// Host name not found on the network</span>
<a name="l00072"></a>00072             myAddress = INADDR_NONE;
<a name="l00073"></a>00073         }
<a name="l00074"></a>00074     }
<a name="l00075"></a>00075 }
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 
<a name="l00082"></a><a class="code" href="classsf_1_1IPAddress.htm#00c1b422265e1261509d5030534bfb0f">00082</a> <a class="code" href="classsf_1_1IPAddress.htm#d0d6a00a3fd597aab4b86f2bc5a85831" title="Default constructor -- constructs an invalid address.">IPAddress::IPAddress</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* Address)
<a name="l00083"></a>00083 {
<a name="l00084"></a>00084     <span class="comment">// First try to convert it as a byte representation ("xxx.xxx.xxx.xxx")</span>
<a name="l00085"></a>00085     myAddress = inet_addr(Address);
<a name="l00086"></a>00086 
<a name="l00087"></a>00087     <span class="comment">// If not successful, try to convert it as a host name</span>
<a name="l00088"></a>00088     <span class="keywordflow">if</span> (!<a class="code" href="classsf_1_1IPAddress.htm#943e91f407afa5d9ae9b988492385697" title="Tell if the address is a valid one.">IsValid</a>())
<a name="l00089"></a>00089     {
<a name="l00090"></a>00090         hostent* Host = gethostbyname(Address);
<a name="l00091"></a>00091         <span class="keywordflow">if</span> (Host)
<a name="l00092"></a>00092         {
<a name="l00093"></a>00093             <span class="comment">// Host found, extract its IP address</span>
<a name="l00094"></a>00094             myAddress = <span class="keyword">reinterpret_cast&lt;</span>in_addr*<span class="keyword">&gt;</span>(Host-&gt;h_addr)-&gt;s_addr;
<a name="l00095"></a>00095         }
<a name="l00096"></a>00096         <span class="keywordflow">else</span>
<a name="l00097"></a>00097         {
<a name="l00098"></a>00098             <span class="comment">// Host name not found on the network</span>
<a name="l00099"></a>00099             myAddress = INADDR_NONE;
<a name="l00100"></a>00100         }
<a name="l00101"></a>00101     }
<a name="l00102"></a>00102 }
<a name="l00103"></a>00103 
<a name="l00104"></a>00104 
<a name="l00108"></a><a class="code" href="classsf_1_1IPAddress.htm#16fa44fa881e32a03b67006d90db0c39">00108</a> <a class="code" href="classsf_1_1IPAddress.htm#d0d6a00a3fd597aab4b86f2bc5a85831" title="Default constructor -- constructs an invalid address.">IPAddress::IPAddress</a>(Uint8 Byte0, Uint8 Byte1, Uint8 Byte2, Uint8 Byte3)
<a name="l00109"></a>00109 {
<a name="l00110"></a>00110     myAddress = htonl((Byte0 &lt;&lt; 24) | (Byte1 &lt;&lt; 16) | (Byte2 &lt;&lt; 8) | Byte3);
<a name="l00111"></a>00111 }
<a name="l00112"></a>00112 
<a name="l00113"></a>00113 
<a name="l00117"></a><a class="code" href="classsf_1_1IPAddress.htm#d692d581e4b96ae3377e95947abb7565">00117</a> <a class="code" href="classsf_1_1IPAddress.htm#d0d6a00a3fd597aab4b86f2bc5a85831" title="Default constructor -- constructs an invalid address.">IPAddress::IPAddress</a>(Uint32 Address)
<a name="l00118"></a>00118 {
<a name="l00119"></a>00119     myAddress = htonl(Address);
<a name="l00120"></a>00120 }
<a name="l00121"></a>00121 
<a name="l00122"></a>00122 
<a name="l00126"></a><a class="code" href="classsf_1_1IPAddress.htm#943e91f407afa5d9ae9b988492385697">00126</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1IPAddress.htm#943e91f407afa5d9ae9b988492385697" title="Tell if the address is a valid one.">IPAddress::IsValid</a>()<span class="keyword"> const</span>
<a name="l00127"></a>00127 <span class="keyword"></span>{
<a name="l00128"></a>00128     <span class="keywordflow">return</span> myAddress != INADDR_NONE;
<a name="l00129"></a>00129 }
<a name="l00130"></a>00130 
<a name="l00131"></a>00131 
<a name="l00135"></a><a class="code" href="classsf_1_1IPAddress.htm#76eadca85be545b5c1c68a4d0dc1c643">00135</a> std::string <a class="code" href="classsf_1_1IPAddress.htm#76eadca85be545b5c1c68a4d0dc1c643" title="Get a string representation of the address.">IPAddress::ToString</a>()<span class="keyword"> const</span>
<a name="l00136"></a>00136 <span class="keyword"></span>{
<a name="l00137"></a>00137     in_addr InAddr;
<a name="l00138"></a>00138     InAddr.s_addr = myAddress;
<a name="l00139"></a>00139 
<a name="l00140"></a>00140     <span class="keywordflow">return</span> inet_ntoa(InAddr);
<a name="l00141"></a>00141 }
<a name="l00142"></a>00142 
<a name="l00143"></a>00143 
<a name="l00147"></a><a class="code" href="classsf_1_1IPAddress.htm#ec6999cce584d3b275072cb6da839c3c">00147</a> Uint32 <a class="code" href="classsf_1_1IPAddress.htm#ec6999cce584d3b275072cb6da839c3c" title="Get an integer representation of the address.">IPAddress::ToInteger</a>()<span class="keyword"> const</span>
<a name="l00148"></a>00148 <span class="keyword"></span>{
<a name="l00149"></a>00149     <span class="keywordflow">return</span> ntohl(myAddress);
<a name="l00150"></a>00150 }
<a name="l00151"></a>00151 
<a name="l00152"></a>00152 
<a name="l00156"></a><a class="code" href="classsf_1_1IPAddress.htm#c17d4ad5721ad2bbe5ab14fc1522668e">00156</a> <a class="code" href="classsf_1_1IPAddress.htm" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a> <a class="code" href="classsf_1_1IPAddress.htm#c17d4ad5721ad2bbe5ab14fc1522668e" title="Get the computer&amp;#39;s local IP address (from the LAN point of view).">IPAddress::GetLocalAddress</a>()
<a name="l00157"></a>00157 {
<a name="l00158"></a>00158     <span class="comment">// The method here is to connect a UDP socket to anyone (here to localhost),</span>
<a name="l00159"></a>00159     <span class="comment">// and get the local socket address with the getsockname function.</span>
<a name="l00160"></a>00160     <span class="comment">// UDP connection will not send anything to the network, so this function won't cause any overhead.</span>
<a name="l00161"></a>00161 
<a name="l00162"></a>00162     <a class="code" href="classsf_1_1IPAddress.htm" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a> LocalAddress;
<a name="l00163"></a>00163 
<a name="l00164"></a>00164     <span class="comment">// Create the socket</span>
<a name="l00165"></a>00165     SocketHelper::SocketType Socket = socket(PF_INET, SOCK_DGRAM, 0);
<a name="l00166"></a>00166     <span class="keywordflow">if</span> (Socket == <a class="code" href="classsf_1_1SocketHelper.htm#99e426a217cc8847264f837632b4e458" title="Return the value of the invalid socket.">SocketHelper::InvalidSocket</a>())
<a name="l00167"></a>00167         <span class="keywordflow">return</span> LocalAddress;
<a name="l00168"></a>00168 
<a name="l00169"></a>00169     <span class="comment">// Build the host address (use a random port)</span>
<a name="l00170"></a>00170     sockaddr_in SockAddr;
<a name="l00171"></a>00171     memset(SockAddr.sin_zero, 0, <span class="keyword">sizeof</span>(SockAddr.sin_zero));
<a name="l00172"></a>00172     SockAddr.sin_addr.s_addr = INADDR_LOOPBACK;
<a name="l00173"></a>00173     SockAddr.sin_family      = AF_INET;
<a name="l00174"></a>00174     SockAddr.sin_port        = htons(4567);
<a name="l00175"></a>00175 
<a name="l00176"></a>00176     <span class="comment">// Connect the socket</span>
<a name="l00177"></a>00177     <span class="keywordflow">if</span> (connect(Socket, reinterpret_cast&lt;sockaddr*&gt;(&amp;SockAddr), <span class="keyword">sizeof</span>(SockAddr)) == -1)
<a name="l00178"></a>00178     {
<a name="l00179"></a>00179         <a class="code" href="classsf_1_1SocketHelper.htm#ec266cafe3270d1f2e210909b9b6d232" title="Close / destroy a socket.">SocketHelper::Close</a>(Socket);
<a name="l00180"></a>00180         <span class="keywordflow">return</span> LocalAddress;
<a name="l00181"></a>00181     }
<a name="l00182"></a>00182  
<a name="l00183"></a>00183     <span class="comment">// Get the local address of the socket connection</span>
<a name="l00184"></a>00184     SocketHelper::LengthType Size = <span class="keyword">sizeof</span>(SockAddr);
<a name="l00185"></a>00185     <span class="keywordflow">if</span> (getsockname(Socket, reinterpret_cast&lt;sockaddr*&gt;(&amp;SockAddr), &amp;Size) == -1)
<a name="l00186"></a>00186     {
<a name="l00187"></a>00187         <a class="code" href="classsf_1_1SocketHelper.htm#ec266cafe3270d1f2e210909b9b6d232" title="Close / destroy a socket.">SocketHelper::Close</a>(Socket);
<a name="l00188"></a>00188         <span class="keywordflow">return</span> LocalAddress;
<a name="l00189"></a>00189     }
<a name="l00190"></a>00190 
<a name="l00191"></a>00191     <span class="comment">// Close the socket</span>
<a name="l00192"></a>00192     <a class="code" href="classsf_1_1SocketHelper.htm#ec266cafe3270d1f2e210909b9b6d232" title="Close / destroy a socket.">SocketHelper::Close</a>(Socket);
<a name="l00193"></a>00193 
<a name="l00194"></a>00194     <span class="comment">// Finally build the IP address</span>
<a name="l00195"></a>00195     LocalAddress.<a class="code" href="classsf_1_1IPAddress.htm#c409a25542eb61b8bd0dda9ee2ed9ac2" title="Address stored as an unsigned 32 bits integer.">myAddress</a> = SockAddr.sin_addr.s_addr;
<a name="l00196"></a>00196 
<a name="l00197"></a>00197     <span class="keywordflow">return</span> LocalAddress;
<a name="l00198"></a>00198 }
<a name="l00199"></a>00199 
<a name="l00200"></a>00200 
<a name="l00204"></a><a class="code" href="classsf_1_1IPAddress.htm#d025962b430dd6da4e10ea3e69551956">00204</a> <a class="code" href="classsf_1_1IPAddress.htm" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a> <a class="code" href="classsf_1_1IPAddress.htm#d025962b430dd6da4e10ea3e69551956" title="Get the computer&amp;#39;s public IP address (from the web point of view).">IPAddress::GetPublicAddress</a>(<span class="keywordtype">float</span> Timeout)
<a name="l00205"></a>00205 {
<a name="l00206"></a>00206     <span class="comment">// The trick here is more complicated, because the only way</span>
<a name="l00207"></a>00207     <span class="comment">// to get our public IP address is to get it from a distant computer.</span>
<a name="l00208"></a>00208     <span class="comment">// Here we get the web page from http://www.sfml-dev.org/ip-provider.php</span>
<a name="l00209"></a>00209     <span class="comment">// and parse the result to extract our IP address</span>
<a name="l00210"></a>00210     <span class="comment">// (not very hard : the web page contains only our IP address).</span>
<a name="l00211"></a>00211 
<a name="l00212"></a>00212     <a class="code" href="classsf_1_1Http.htm" title="This class provides methods for manipulating the HTTP protocol (described in RFC...">Http</a> Server(<span class="stringliteral">"www.sfml-dev.org"</span>);
<a name="l00213"></a>00213     <a class="code" href="classsf_1_1Http_1_1Request.htm" title="This class wraps an HTTP request, which is basically :a header with a method, a target...">Http::Request</a> Request(<a class="code" href="classsf_1_1Http_1_1Request.htm#620f8bff6f43e1378f321bf53fbf5598f6c1b04e35501cd5f5a85207c2b37f00" title="Request in get mode, standard method to retrieve a page.">Http::Request::Get</a>, <span class="stringliteral">"/ip-provider.php"</span>);
<a name="l00214"></a>00214     <a class="code" href="classsf_1_1Http_1_1Response.htm" title="This class wraps an HTTP response, which is basically :a header with a status code...">Http::Response</a> Page = Server.<a class="code" href="classsf_1_1Http.htm#25a88ce405f43feb9faf4480ea3c2d61" title="Send a HTTP request and return the server&amp;#39;s response.">SendRequest</a>(Request, Timeout);
<a name="l00215"></a>00215     <span class="keywordflow">if</span> (Page.<a class="code" href="classsf_1_1Http_1_1Response.htm#542d55a3e0a88f0dfecb8811373669eb" title="Get the header&amp;#39;s status code.">GetStatus</a>() == <a class="code" href="classsf_1_1Http_1_1Response.htm#663e071978e30fbbeb20ed045be874d851b3f82163c2a9da6d0b59861438a6e5" title="Most common code returned when operation was successful.">Http::Response::Ok</a>)
<a name="l00216"></a>00216         <span class="keywordflow">return</span> <a class="code" href="classsf_1_1IPAddress.htm#d0d6a00a3fd597aab4b86f2bc5a85831" title="Default constructor -- constructs an invalid address.">IPAddress</a>(Page.<a class="code" href="classsf_1_1Http_1_1Response.htm#e9d26d9ec2e1c98b3880d7d01c49c179" title="Get the body of the response.">GetBody</a>());
<a name="l00217"></a>00217 
<a name="l00218"></a>00218     <span class="comment">// Something failed: return an invalid address</span>
<a name="l00219"></a>00219     <span class="keywordflow">return</span> <a class="code" href="classsf_1_1IPAddress.htm#d0d6a00a3fd597aab4b86f2bc5a85831" title="Default constructor -- constructs an invalid address.">IPAddress</a>();
<a name="l00220"></a>00220 }
<a name="l00221"></a>00221 
<a name="l00222"></a>00222 
<a name="l00226"></a><a class="code" href="classsf_1_1IPAddress.htm#326dc00d3ab26ada6ed3168460545b48">00226</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1IPAddress.htm#326dc00d3ab26ada6ed3168460545b48" title="Comparison operator ==.">IPAddress::operator ==</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1IPAddress.htm" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a>&amp; Other)<span class="keyword"> const</span>
<a name="l00227"></a>00227 <span class="keyword"></span>{
<a name="l00228"></a>00228     <span class="keywordflow">return</span> myAddress == Other.<a class="code" href="classsf_1_1IPAddress.htm#c409a25542eb61b8bd0dda9ee2ed9ac2" title="Address stored as an unsigned 32 bits integer.">myAddress</a>;
<a name="l00229"></a>00229 }
<a name="l00230"></a>00230 
<a name="l00231"></a>00231 
<a name="l00235"></a><a class="code" href="classsf_1_1IPAddress.htm#dcab830aa4008d469c235582d90ae104">00235</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1IPAddress.htm#dcab830aa4008d469c235582d90ae104" title="Comparison operator !=.">IPAddress::operator !=</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1IPAddress.htm" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a>&amp; Other)<span class="keyword"> const</span>
<a name="l00236"></a>00236 <span class="keyword"></span>{
<a name="l00237"></a>00237     <span class="keywordflow">return</span> myAddress != Other.<a class="code" href="classsf_1_1IPAddress.htm#c409a25542eb61b8bd0dda9ee2ed9ac2" title="Address stored as an unsigned 32 bits integer.">myAddress</a>;
<a name="l00238"></a>00238 }
<a name="l00239"></a>00239 
<a name="l00240"></a>00240 
<a name="l00244"></a><a class="code" href="classsf_1_1IPAddress.htm#90ca315772725588df2a5fe73565cb3e">00244</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1IPAddress.htm#90ca315772725588df2a5fe73565cb3e" title="Comparison operator &amp;lt;.">IPAddress::operator &lt;</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1IPAddress.htm" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a>&amp; Other)<span class="keyword"> const</span>
<a name="l00245"></a>00245 <span class="keyword"></span>{
<a name="l00246"></a>00246     <span class="keywordflow">return</span> myAddress &lt; Other.<a class="code" href="classsf_1_1IPAddress.htm#c409a25542eb61b8bd0dda9ee2ed9ac2" title="Address stored as an unsigned 32 bits integer.">myAddress</a>;
<a name="l00247"></a>00247 }
<a name="l00248"></a>00248 
<a name="l00249"></a>00249 
<a name="l00253"></a><a class="code" href="classsf_1_1IPAddress.htm#6cd4ab449515009f0d1ab0cd41ddbab0">00253</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1IPAddress.htm#6cd4ab449515009f0d1ab0cd41ddbab0" title="Comparison operator &amp;gt;.">IPAddress::operator &gt;</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1IPAddress.htm" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a>&amp; Other)<span class="keyword"> const</span>
<a name="l00254"></a>00254 <span class="keyword"></span>{
<a name="l00255"></a>00255     <span class="keywordflow">return</span> myAddress &gt; Other.<a class="code" href="classsf_1_1IPAddress.htm#c409a25542eb61b8bd0dda9ee2ed9ac2" title="Address stored as an unsigned 32 bits integer.">myAddress</a>;
<a name="l00256"></a>00256 }
<a name="l00257"></a>00257 
<a name="l00258"></a>00258 
<a name="l00262"></a><a class="code" href="classsf_1_1IPAddress.htm#d9159e1fbdfffb81b45ac2518143c2be">00262</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1IPAddress.htm#d9159e1fbdfffb81b45ac2518143c2be" title="Comparison operator &amp;lt;=.">IPAddress::operator &lt;=</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1IPAddress.htm" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a>&amp; Other)<span class="keyword"> const</span>
<a name="l00263"></a>00263 <span class="keyword"></span>{
<a name="l00264"></a>00264     <span class="keywordflow">return</span> myAddress &lt;= Other.<a class="code" href="classsf_1_1IPAddress.htm#c409a25542eb61b8bd0dda9ee2ed9ac2" title="Address stored as an unsigned 32 bits integer.">myAddress</a>;
<a name="l00265"></a>00265 }
<a name="l00266"></a>00266 
<a name="l00267"></a>00267 
<a name="l00271"></a><a class="code" href="classsf_1_1IPAddress.htm#7b0f3e471d2286737023d80220a1313b">00271</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1IPAddress.htm#7b0f3e471d2286737023d80220a1313b" title="Comparison operator &amp;gt;=.">IPAddress::operator &gt;=</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1IPAddress.htm" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a>&amp; Other)<span class="keyword"> const</span>
<a name="l00272"></a>00272 <span class="keyword"></span>{
<a name="l00273"></a>00273     <span class="keywordflow">return</span> myAddress &gt;= Other.<a class="code" href="classsf_1_1IPAddress.htm#c409a25542eb61b8bd0dda9ee2ed9ac2" title="Address stored as an unsigned 32 bits integer.">myAddress</a>;
<a name="l00274"></a>00274 }
<a name="l00275"></a>00275 
<a name="l00276"></a>00276 
<a name="l00280"></a>00280 std::istream&amp; operator &gt;&gt;(std::istream&amp; Stream, <a class="code" href="classsf_1_1IPAddress.htm" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a>&amp; Address)
<a name="l00281"></a>00281 {
<a name="l00282"></a>00282     std::string Str;
<a name="l00283"></a>00283     Stream &gt;&gt; Str;
<a name="l00284"></a>00284     Address = <a class="code" href="classsf_1_1IPAddress.htm" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a>(Str);
<a name="l00285"></a>00285 
<a name="l00286"></a>00286     <span class="keywordflow">return</span> Stream;
<a name="l00287"></a>00287 }
<a name="l00288"></a>00288 
<a name="l00289"></a>00289 
<a name="l00293"></a>00293 std::ostream&amp; operator &lt;&lt;(std::ostream&amp; Stream, <span class="keyword">const</span> IPAddress&amp; Address)
<a name="l00294"></a>00294 {
<a name="l00295"></a>00295     <span class="keywordflow">return</span> Stream &lt;&lt; Address.ToString();
<a name="l00296"></a>00296 }
<a name="l00297"></a>00297 
<a name="l00298"></a>00298 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
