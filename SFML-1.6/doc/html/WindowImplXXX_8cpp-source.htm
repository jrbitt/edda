<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>WindowImplXXX.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Window/XXX/WindowImplXXX.hpp&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;SFML/Window/WindowStyle.hpp&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;GL/gl.h&gt;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="keyword">namespace </span>sf
<a name="l00034"></a>00034 {
<a name="l00035"></a>00035 <span class="keyword">namespace </span>priv
<a name="l00036"></a>00036 {
<a name="l00041"></a>00041 WindowImplXXX::WindowImplXXX()
<a name="l00042"></a>00042 {
<a name="l00043"></a>00043     <span class="comment">// Create a dummy window (with the fewest attributes -- it's just to have a valid support for an OpenGL context)</span>
<a name="l00044"></a>00044 
<a name="l00045"></a>00045     <span class="comment">// Initialize myWidth and myHeight members from base class with the window size</span>
<a name="l00046"></a>00046 
<a name="l00047"></a>00047     <span class="comment">// Create an OpenGL context in this window and DO NOT make it active</span>
<a name="l00048"></a>00048 }
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 
<a name="l00054"></a>00054 WindowImplXXX::WindowImplXXX(WindowHandle Handle, WindowSettings&amp; Params)
<a name="l00055"></a>00055 {
<a name="l00056"></a>00056     <span class="comment">// Make sure we'll be able to catch all the events of the given window</span>
<a name="l00057"></a>00057 
<a name="l00058"></a>00058     <span class="comment">// Initialize myWidth and myHeight members from base class with the window size</span>
<a name="l00059"></a>00059 
<a name="l00060"></a>00060     <span class="comment">// Create an OpenGL context in this window and make it active</span>
<a name="l00061"></a>00061 }
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 
<a name="l00067"></a>00067 WindowImplXXX::WindowImplXXX(VideoMode Mode, <span class="keyword">const</span> std::string&amp; Title, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> WindowStyle, WindowSettings&amp; Params) :
<a name="l00068"></a>00068 {
<a name="l00069"></a>00069     <span class="comment">// Create a new window with given size, title and style</span>
<a name="l00070"></a>00070 
<a name="l00071"></a>00071     <span class="comment">// Initialize myWidth and myHeight members from base class with the window size</span>
<a name="l00072"></a>00072 
<a name="l00073"></a>00073     <span class="comment">// Create an OpenGL context in this window and make it active</span>
<a name="l00074"></a>00074 }
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 
<a name="l00080"></a>00080 WindowImplXXX::~WindowImplXXX()
<a name="l00081"></a>00081 {
<a name="l00082"></a>00082     <span class="comment">// Destroy the OpenGL context, the window and every resource allocated by this class</span>
<a name="l00083"></a>00083 }
<a name="l00084"></a>00084 
<a name="l00085"></a>00085 
<a name="l00089"></a>00089 <span class="keywordtype">bool</span> WindowImplXXX::IsContextActive()
<a name="l00090"></a>00090 {
<a name="l00091"></a>00091     <span class="comment">// Should return whether xxxGetCurrentContext() is NULL or not;</span>
<a name="l00092"></a>00092 }
<a name="l00093"></a>00093 
<a name="l00094"></a>00094 
<a name="l00098"></a>00098 <span class="keywordtype">void</span> WindowImplXXX::Display()
<a name="l00099"></a>00099 {
<a name="l00100"></a>00100     <span class="comment">// Swap OpenGL buffers (should be a call to xxxSwapBuffers)</span>
<a name="l00101"></a>00101 }
<a name="l00102"></a>00102 
<a name="l00103"></a>00103 
<a name="l00107"></a>00107 <span class="keywordtype">void</span> WindowImplXXX::ProcessEvents()
<a name="l00108"></a>00108 {
<a name="l00109"></a>00109     <span class="comment">// Process every event for this window</span>
<a name="l00110"></a>00110 
<a name="l00111"></a>00111     <span class="comment">// Generate a sf::Event and call SendEvent(Evt) for each event</span>
<a name="l00112"></a>00112 }
<a name="l00113"></a>00113 
<a name="l00114"></a>00114 
<a name="l00118"></a>00118 <span class="keywordtype">void</span> WindowImplXXX::SetActive(<span class="keywordtype">bool</span> Active)<span class="keyword"> const</span>
<a name="l00119"></a>00119 <span class="keyword"></span>{
<a name="l00120"></a>00120     <span class="comment">// Bind / unbind OpenGL context (should be a call to xxxMakeCurrent)</span>
<a name="l00121"></a>00121 }
<a name="l00122"></a>00122 
<a name="l00123"></a>00123 
<a name="l00127"></a>00127 <span class="keywordtype">void</span> WindowImplXXX::UseVerticalSync(<span class="keywordtype">bool</span> Enabled)
<a name="l00128"></a>00128 {
<a name="l00129"></a>00129     <span class="comment">// Activate / deactivate vertical synchronization</span>
<a name="l00130"></a>00130     <span class="comment">// usually using an OpenGL extension (should be a call to xxxSwapInterval)</span>
<a name="l00131"></a>00131 }
<a name="l00132"></a>00132 
<a name="l00133"></a>00133 
<a name="l00137"></a>00137 <span class="keywordtype">void</span> WindowImplXXX::ShowMouseCursor(<span class="keywordtype">bool</span> Show)
<a name="l00138"></a>00138 {
<a name="l00139"></a>00139     <span class="comment">// Show or hide the system cursor in this window</span>
<a name="l00140"></a>00140 }
<a name="l00141"></a>00141 
<a name="l00142"></a>00142 
<a name="l00146"></a>00146 <span class="keywordtype">void</span> WindowImplXXX::SetCursorPosition(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Left, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Top)
<a name="l00147"></a>00147 {
<a name="l00148"></a>00148     <span class="comment">// Change the cursor position (Left and Top are relative to this window)</span>
<a name="l00149"></a>00149 }
<a name="l00150"></a>00150 
<a name="l00151"></a>00151 
<a name="l00155"></a>00155 <span class="keywordtype">void</span> WindowImplXXX::SetPosition(<span class="keywordtype">int</span> Left, <span class="keywordtype">int</span> Top)
<a name="l00156"></a>00156 {
<a name="l00157"></a>00157     <span class="comment">// Change the window position</span>
<a name="l00158"></a>00158 }
<a name="l00159"></a>00159 
<a name="l00160"></a>00160 
<a name="l00164"></a>00164 <span class="keywordtype">void</span> WindowImplWin32::SetSize(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Height)
<a name="l00165"></a>00165 {
<a name="l00166"></a>00166     <span class="comment">// Change the window size</span>
<a name="l00167"></a>00167 }
<a name="l00168"></a>00168 
<a name="l00169"></a>00169 
<a name="l00173"></a>00173 <span class="keywordtype">void</span> WindowImplXXX::Show(<span class="keywordtype">bool</span> State)
<a name="l00174"></a>00174 {
<a name="l00175"></a>00175     <span class="comment">// Show or hide the window</span>
<a name="l00176"></a>00176 }
<a name="l00177"></a>00177 
<a name="l00181"></a>00181 <span class="keywordtype">void</span> WindowImplXXX::EnableKeyRepeat(<span class="keywordtype">bool</span> Enabled)
<a name="l00182"></a>00182 {
<a name="l00183"></a>00183     <span class="comment">// Enable or disable automatic key-repeat for keydown events</span>
<a name="l00184"></a>00184 }
<a name="l00185"></a>00185 
<a name="l00186"></a>00186 
<a name="l00190"></a>00190 <span class="keywordtype">void</span> WindowImplXXX::SetIcon(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Height, <span class="keyword">const</span> Uint8* Pixels)
<a name="l00191"></a>00191 {
<a name="l00192"></a>00192     <span class="comment">// Change all the necessary icons of the window (titlebar, task bar, ...) with the</span>
<a name="l00193"></a>00193     <span class="comment">// provided array of 32 bits RGBA pixels</span>
<a name="l00194"></a>00194 }
<a name="l00195"></a>00195 
<a name="l00196"></a>00196 
<a name="l00197"></a>00197 <span class="comment">/*===========================================================</span>
<a name="l00198"></a>00198 <span class="comment">            STRATEGY FOR OPENGL CONTEXT CREATION</span>
<a name="l00199"></a>00199 <span class="comment"></span>
<a name="l00200"></a>00200 <span class="comment">- If the requested level of anti-aliasing is not supported and is greater than 2, try with 2</span>
<a name="l00201"></a>00201 <span class="comment">  --&gt; if level 2 fails, disable anti-aliasing</span>
<a name="l00202"></a>00202 <span class="comment">  --&gt; it's important not to generate an error if anti-aliasing is not supported</span>
<a name="l00203"></a>00203 <span class="comment"></span>
<a name="l00204"></a>00204 <span class="comment">- Use a matching pixel mode, or the best of all available pixel modes if no perfect match ;</span>
<a name="l00205"></a>00205 <span class="comment">  You should use the function EvaluateConfig to get a score for a given configuration</span>
<a name="l00206"></a>00206 <span class="comment"></span>
<a name="l00207"></a>00207 <span class="comment">- Don't forget to fill Params (see constructors) back with the actual parameters we got from the chosen pixel format</span>
<a name="l00208"></a>00208 <span class="comment"></span>
<a name="l00209"></a>00209 <span class="comment">- IMPORTANT : all OpenGL contexts must be shared (usually a call to xxxShareLists)</span>
<a name="l00210"></a>00210 <span class="comment"></span>
<a name="l00211"></a>00211 <span class="comment">===========================================================*/</span>
<a name="l00212"></a>00212 
<a name="l00213"></a>00213 
<a name="l00214"></a>00214 <span class="comment">/*===========================================================</span>
<a name="l00215"></a>00215 <span class="comment">               STRATEGY FOR EVENT HANDLING</span>
<a name="l00216"></a>00216 <span class="comment"></span>
<a name="l00217"></a>00217 <span class="comment">- Process any event matching with the ones in sf::Event::EventType</span>
<a name="l00218"></a>00218 <span class="comment">  --&gt; Create a sf::Event, fill the members corresponding to the event type</span>
<a name="l00219"></a>00219 <span class="comment">  --&gt; No need to handle joystick events, they are handled by WindowImpl::ProcessJoystickEvents</span>
<a name="l00220"></a>00220 <span class="comment">  --&gt; Event::TextEntered must provide UTF-16 characters</span>
<a name="l00221"></a>00221 <span class="comment">      (see http://www.unicode.org/Public/PROGRAMS/CVTUTF/ for unicode conversions)</span>
<a name="l00222"></a>00222 <span class="comment">  --&gt; Don't forget to process any destroy-like event (ie. when the window is destroyed externally)</span>
<a name="l00223"></a>00223 <span class="comment"></span>
<a name="l00224"></a>00224 <span class="comment">- Use SendEvent function from base class to propagate the created events</span>
<a name="l00225"></a>00225 <span class="comment"></span>
<a name="l00226"></a>00226 <span class="comment">===========================================================*/</span>
<a name="l00227"></a>00227 
<a name="l00228"></a>00228 
<a name="l00229"></a>00229 } <span class="comment">// namespace priv</span>
<a name="l00230"></a>00230 
<a name="l00231"></a>00231 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
