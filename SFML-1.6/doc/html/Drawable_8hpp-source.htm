<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>Drawable.hpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_DRAWABLE_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_DRAWABLE_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/System/Vector2.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;SFML/Graphics/Color.hpp&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;SFML/Graphics/Matrix3.hpp&gt;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="keyword">namespace </span>sf
<a name="l00037"></a>00037 {
<a name="l00038"></a>00038 <span class="keyword">class </span>RenderTarget;
<a name="l00039"></a>00039 
<a name="l00043"></a><a class="code" href="namespacesf_1_1Blend.htm">00043</a> <span class="keyword">namespace </span>Blend
<a name="l00044"></a>00044 {
<a name="l00045"></a><a class="code" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca">00045</a>     <span class="keyword">enum</span> <a class="code" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca">Mode</a>
<a name="l00046"></a>00046     {
<a name="l00047"></a><a class="code" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca23075ecfbf49e19b713cc18188a7661a">00047</a>         <a class="code" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca23075ecfbf49e19b713cc18188a7661a" title="Pixel = Src * a + Dest * (1 - a).">Alpha</a>,    
<a name="l00048"></a><a class="code" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575cad40133cc93b5ee0975eb4c2266815563">00048</a>         <a class="code" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575cad40133cc93b5ee0975eb4c2266815563" title="Pixel = Src + Dest.">Add</a>,      
<a name="l00049"></a><a class="code" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca7a5f5cbb669b8ec859e3f7927451c736">00049</a>         <a class="code" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca7a5f5cbb669b8ec859e3f7927451c736" title="Pixel = Src * Dest.">Multiply</a>, 
<a name="l00050"></a><a class="code" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca4b6aa39cf8edd92775ee03ba7fd047ea">00050</a>         <a class="code" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca4b6aa39cf8edd92775ee03ba7fd047ea" title="No blending.">None</a>      
<a name="l00051"></a>00051     };
<a name="l00052"></a>00052 }
<a name="l00053"></a>00053 
<a name="l00058"></a><a class="code" href="classsf_1_1Drawable.htm">00058</a> <span class="keyword">class </span>SFML_API <a class="code" href="classsf_1_1Drawable.htm" title="Abstract base class for every object that can be drawn into a render window.">Drawable</a>
<a name="l00059"></a>00059 {
<a name="l00060"></a>00060 <span class="keyword">public</span> :
<a name="l00061"></a>00061 
<a name="l00071"></a>00071     <a class="code" href="classsf_1_1Drawable.htm" title="Abstract base class for every object that can be drawn into a render window.">Drawable</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; Position = <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>(0, 0), <span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; Scale = <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>(1, 1), <span class="keywordtype">float</span> Rotation = 0.f, <span class="keyword">const</span> <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a>&amp; Col = <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a>(255, 255, 255, 255));
<a name="l00072"></a>00072 
<a name="l00077"></a>00077     <span class="keyword">virtual</span> ~<a class="code" href="classsf_1_1Drawable.htm" title="Abstract base class for every object that can be drawn into a render window.">Drawable</a>();
<a name="l00078"></a>00078 
<a name="l00086"></a>00086     <span class="keywordtype">void</span> SetPosition(<span class="keywordtype">float</span> X, <span class="keywordtype">float</span> Y);
<a name="l00087"></a>00087 
<a name="l00094"></a>00094     <span class="keywordtype">void</span> SetPosition(<span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; Position);
<a name="l00095"></a>00095 
<a name="l00102"></a>00102     <span class="keywordtype">void</span> SetX(<span class="keywordtype">float</span> X);
<a name="l00103"></a>00103 
<a name="l00110"></a>00110     <span class="keywordtype">void</span> SetY(<span class="keywordtype">float</span> Y);
<a name="l00111"></a>00111 
<a name="l00119"></a>00119     <span class="keywordtype">void</span> SetScale(<span class="keywordtype">float</span> ScaleX, <span class="keywordtype">float</span> ScaleY);
<a name="l00120"></a>00120 
<a name="l00127"></a>00127     <span class="keywordtype">void</span> SetScale(<span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; Scale);
<a name="l00128"></a>00128 
<a name="l00135"></a>00135     <span class="keywordtype">void</span> SetScaleX(<span class="keywordtype">float</span> FactorX);
<a name="l00136"></a>00136 
<a name="l00143"></a>00143     <span class="keywordtype">void</span> SetScaleY(<span class="keywordtype">float</span> FactorY);
<a name="l00144"></a>00144 
<a name="l00154"></a>00154     <span class="keywordtype">void</span> SetCenter(<span class="keywordtype">float</span> CenterX, <span class="keywordtype">float</span> CenterY);
<a name="l00155"></a>00155 
<a name="l00164"></a>00164     <span class="keywordtype">void</span> SetCenter(<span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; Center);
<a name="l00165"></a>00165 
<a name="l00172"></a>00172     <span class="keywordtype">void</span> SetRotation(<span class="keywordtype">float</span> Rotation);
<a name="l00173"></a>00173 
<a name="l00181"></a>00181     <span class="keywordtype">void</span> SetColor(<span class="keyword">const</span> <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a>&amp; Col);
<a name="l00182"></a>00182 
<a name="l00190"></a>00190     <span class="keywordtype">void</span> SetBlendMode(<a class="code" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca">Blend::Mode</a> Mode);
<a name="l00191"></a>00191 
<a name="l00198"></a>00198     <span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; GetPosition() <span class="keyword">const</span>;
<a name="l00199"></a>00199 
<a name="l00206"></a>00206     <span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; GetScale() <span class="keyword">const</span>;
<a name="l00207"></a>00207 
<a name="l00214"></a>00214     <span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; GetCenter() <span class="keyword">const</span>;
<a name="l00215"></a>00215 
<a name="l00223"></a>00223     <span class="keywordtype">float</span> GetRotation() <span class="keyword">const</span>;
<a name="l00224"></a>00224 
<a name="l00231"></a>00231     <span class="keyword">const</span> <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a>&amp; GetColor() <span class="keyword">const</span>;
<a name="l00232"></a>00232 
<a name="l00239"></a>00239     <a class="code" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca">Blend::Mode</a> GetBlendMode() <span class="keyword">const</span>;
<a name="l00240"></a>00240 
<a name="l00248"></a>00248     <span class="keywordtype">void</span> Move(<span class="keywordtype">float</span> OffsetX, <span class="keywordtype">float</span> OffsetY);
<a name="l00249"></a>00249 
<a name="l00256"></a>00256     <span class="keywordtype">void</span> Move(<span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; Offset);
<a name="l00257"></a>00257 
<a name="l00265"></a>00265     <span class="keywordtype">void</span> Scale(<span class="keywordtype">float</span> FactorX, <span class="keywordtype">float</span> FactorY);
<a name="l00266"></a>00266 
<a name="l00273"></a>00273     <span class="keywordtype">void</span> Scale(<span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; Factor);
<a name="l00274"></a>00274 
<a name="l00281"></a>00281     <span class="keywordtype">void</span> Rotate(<span class="keywordtype">float</span> Angle);
<a name="l00282"></a>00282 
<a name="l00292"></a>00292     <a class="code" href="classsf_1_1Vector2.htm">sf::Vector2f</a> TransformToLocal(<span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">sf::Vector2f</a>&amp; Point) <span class="keyword">const</span>;
<a name="l00293"></a>00293 
<a name="l00303"></a>00303     <a class="code" href="classsf_1_1Vector2.htm">sf::Vector2f</a> TransformToGlobal(<span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">sf::Vector2f</a>&amp; Point) <span class="keyword">const</span>;
<a name="l00304"></a>00304 
<a name="l00305"></a>00305 <span class="keyword">protected</span> :
<a name="l00306"></a>00306 
<a name="l00313"></a>00313     <span class="keyword">const</span> <a class="code" href="classsf_1_1Matrix3.htm" title="Utility class to manipulate 3x3 matrices representing 2D transformations.">Matrix3</a>&amp; GetMatrix() <span class="keyword">const</span>;
<a name="l00314"></a>00314 
<a name="l00321"></a>00321     <span class="keyword">const</span> <a class="code" href="classsf_1_1Matrix3.htm" title="Utility class to manipulate 3x3 matrices representing 2D transformations.">Matrix3</a>&amp; GetInverseMatrix() <span class="keyword">const</span>;
<a name="l00322"></a>00322 
<a name="l00323"></a>00323 <span class="keyword">private</span> :
<a name="l00324"></a>00324 
<a name="l00325"></a>00325     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classsf_1_1RenderTarget.htm" title="Base class for all render targets (window, image, .">RenderTarget</a>;
<a name="l00326"></a>00326 
<a name="l00333"></a>00333     <span class="keywordtype">void</span> Draw(<a class="code" href="classsf_1_1RenderTarget.htm" title="Base class for all render targets (window, image, .">RenderTarget</a>&amp; Target) <span class="keyword">const</span>;
<a name="l00334"></a>00334 
<a name="l00341"></a>00341     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Render(<a class="code" href="classsf_1_1RenderTarget.htm" title="Base class for all render targets (window, image, .">RenderTarget</a>&amp; Target) <span class="keyword">const</span> = 0;
<a name="l00342"></a>00342 
<a name="l00344"></a>00344     <span class="comment">// Member data</span>
<a name="l00346"></a>00346 <span class="comment"></span>    <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>        myPosition;      
<a name="l00347"></a>00347     <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>        myScale;         
<a name="l00348"></a>00348     <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>        myCenter;        
<a name="l00349"></a>00349     <span class="keywordtype">float</span>           myRotation;      
<a name="l00350"></a>00350     <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a>           myColor;         
<a name="l00351"></a>00351     <a class="code" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca">Blend::Mode</a>     myBlendMode;     
<a name="l00352"></a>00352     <span class="keyword">mutable</span> <span class="keywordtype">bool</span>    myNeedUpdate;    
<a name="l00353"></a>00353     <span class="keyword">mutable</span> <span class="keywordtype">bool</span>    myInvNeedUpdate; 
<a name="l00354"></a>00354     <span class="keyword">mutable</span> <a class="code" href="classsf_1_1Matrix3.htm" title="Utility class to manipulate 3x3 matrices representing 2D transformations.">Matrix3</a> myMatrix;        
<a name="l00355"></a>00355     <span class="keyword">mutable</span> <a class="code" href="classsf_1_1Matrix3.htm" title="Utility class to manipulate 3x3 matrices representing 2D transformations.">Matrix3</a> myInvMatrix;     
<a name="l00356"></a>00356 };
<a name="l00357"></a>00357 
<a name="l00358"></a>00358 } <span class="comment">// namespace sf</span>
<a name="l00359"></a>00359 
<a name="l00360"></a>00360 
<a name="l00361"></a>00361 <span class="preprocessor">#endif // SFML_DRAWABLE_HPP</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
