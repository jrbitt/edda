<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>PostFX.hpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_POSTFX_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_POSTFX_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Graphics/Drawable.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;SFML/Graphics/Image.hpp&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;istream&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="keyword">namespace </span>sf
<a name="l00039"></a>00039 {
<a name="l00043"></a><a class="code" href="classsf_1_1PostFX.htm">00043</a> <span class="keyword">class </span>SFML_API <a class="code" href="classsf_1_1PostFX.htm" title="PostFX is used to apply a post effect to a window.">PostFX</a> : <span class="keyword">public</span> <a class="code" href="classsf_1_1Drawable.htm" title="Abstract base class for every object that can be drawn into a render window.">Drawable</a>
<a name="l00044"></a>00044 {
<a name="l00045"></a>00045 <span class="keyword">public</span> :
<a name="l00046"></a>00046 
<a name="l00051"></a>00051     <a class="code" href="classsf_1_1PostFX.htm" title="PostFX is used to apply a post effect to a window.">PostFX</a>();
<a name="l00052"></a>00052 
<a name="l00059"></a>00059     <a class="code" href="classsf_1_1PostFX.htm" title="PostFX is used to apply a post effect to a window.">PostFX</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1PostFX.htm" title="PostFX is used to apply a post effect to a window.">PostFX</a>&amp; Copy);
<a name="l00060"></a>00060 
<a name="l00065"></a>00065     ~<a class="code" href="classsf_1_1PostFX.htm" title="PostFX is used to apply a post effect to a window.">PostFX</a>();
<a name="l00066"></a>00066 
<a name="l00075"></a>00075     <span class="keywordtype">bool</span> LoadFromFile(<span class="keyword">const</span> std::string&amp; Filename);
<a name="l00076"></a>00076 
<a name="l00085"></a>00085     <span class="keywordtype">bool</span> LoadFromMemory(<span class="keyword">const</span> std::string&amp; Effect);
<a name="l00086"></a>00086 
<a name="l00094"></a>00094     <span class="keywordtype">void</span> SetParameter(<span class="keyword">const</span> std::string&amp; Name, <span class="keywordtype">float</span> X);
<a name="l00095"></a>00095 
<a name="l00103"></a>00103     <span class="keywordtype">void</span> SetParameter(<span class="keyword">const</span> std::string&amp; Name, <span class="keywordtype">float</span> X, <span class="keywordtype">float</span> Y);
<a name="l00104"></a>00104 
<a name="l00112"></a>00112     <span class="keywordtype">void</span> SetParameter(<span class="keyword">const</span> std::string&amp; Name, <span class="keywordtype">float</span> X, <span class="keywordtype">float</span> Y, <span class="keywordtype">float</span> Z);
<a name="l00113"></a>00113 
<a name="l00121"></a>00121     <span class="keywordtype">void</span> SetParameter(<span class="keyword">const</span> std::string&amp; Name, <span class="keywordtype">float</span> X, <span class="keywordtype">float</span> Y, <span class="keywordtype">float</span> Z, <span class="keywordtype">float</span> W);
<a name="l00122"></a>00122 
<a name="l00130"></a>00130     <span class="keywordtype">void</span> SetTexture(<span class="keyword">const</span> std::string&amp; Name, <a class="code" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a>* Texture);
<a name="l00131"></a>00131 
<a name="l00140"></a>00140     <a class="code" href="classsf_1_1PostFX.htm" title="PostFX is used to apply a post effect to a window.">PostFX</a>&amp; operator =(<span class="keyword">const</span> <a class="code" href="classsf_1_1PostFX.htm" title="PostFX is used to apply a post effect to a window.">PostFX</a>&amp; Other);
<a name="l00141"></a>00141 
<a name="l00148"></a>00148     <span class="keyword">static</span> <span class="keywordtype">bool</span> CanUsePostFX();
<a name="l00149"></a>00149 
<a name="l00150"></a>00150 <span class="keyword">protected</span> :
<a name="l00151"></a>00151 
<a name="l00156"></a>00156     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Render(<a class="code" href="classsf_1_1RenderTarget.htm" title="Base class for all render targets (window, image, .">RenderTarget</a>&amp; Target) <span class="keyword">const</span>;
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 <span class="keyword">private</span> :
<a name="l00159"></a>00159 
<a name="l00169"></a>00169     <span class="keyword">static</span> std::string PreprocessEffect(std::istream&amp; File);
<a name="l00170"></a>00170 
<a name="l00175"></a>00175     <span class="keywordtype">void</span> CreateProgram();
<a name="l00176"></a>00176 
<a name="l00178"></a>00178     <span class="comment">// Types</span>
<a name="l00180"></a>00180 <span class="comment"></span>    <span class="keyword">typedef</span> std::map&lt;std::string, const Image*&gt; TextureTable;
<a name="l00181"></a>00181 
<a name="l00183"></a>00183     <span class="comment">// Member data</span>
<a name="l00185"></a>00185 <span class="comment"></span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  myShaderProgram;  
<a name="l00186"></a>00186     TextureTable  myTextures;       
<a name="l00187"></a>00187     std::string   myFragmentShader; 
<a name="l00188"></a>00188     <span class="keyword">mutable</span> <a class="code" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a> myFrameBuffer;    
<a name="l00189"></a>00189 };
<a name="l00190"></a>00190 
<a name="l00191"></a>00191 } <span class="comment">// namespace sf</span>
<a name="l00192"></a>00192 
<a name="l00193"></a>00193 
<a name="l00194"></a>00194 <span class="preprocessor">#endif // SFML_POSTFX_HPP</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
