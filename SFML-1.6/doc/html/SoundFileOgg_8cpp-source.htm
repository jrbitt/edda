<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>SoundFileOgg.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Audio/SoundFileOgg.hpp&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;SFML/Audio/stb_vorbis/stb_vorbis.h&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="keyword">namespace </span>sf
<a name="l00034"></a>00034 {
<a name="l00035"></a>00035 <span class="keyword">namespace </span>priv
<a name="l00036"></a>00036 {
<a name="l00040"></a>00040 SoundFileOgg::SoundFileOgg() :
<a name="l00041"></a>00041 myStream       (NULL),
<a name="l00042"></a>00042 myChannelsCount(0)
<a name="l00043"></a>00043 {
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 }
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 
<a name="l00051"></a>00051 SoundFileOgg::~SoundFileOgg()
<a name="l00052"></a>00052 {
<a name="l00053"></a>00053     <span class="keywordflow">if</span> (myStream)
<a name="l00054"></a>00054         stb_vorbis_close(myStream);
<a name="l00055"></a>00055 }
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 
<a name="l00061"></a>00061 <span class="keywordtype">bool</span> SoundFileOgg::IsFileSupported(<span class="keyword">const</span> std::string&amp; Filename, <span class="keywordtype">bool</span> Read)
<a name="l00062"></a>00062 {
<a name="l00063"></a>00063     <span class="keywordflow">if</span> (Read)
<a name="l00064"></a>00064     {
<a name="l00065"></a>00065         <span class="comment">// Open the vorbis stream</span>
<a name="l00066"></a>00066         stb_vorbis* Stream = stb_vorbis_open_filename(const_cast&lt;char*&gt;(Filename.c_str()), NULL, NULL);
<a name="l00067"></a>00067 
<a name="l00068"></a>00068         <span class="keywordflow">if</span> (Stream)
<a name="l00069"></a>00069         {
<a name="l00070"></a>00070             stb_vorbis_close(Stream);
<a name="l00071"></a>00071             <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00072"></a>00072         }
<a name="l00073"></a>00073         <span class="keywordflow">else</span>
<a name="l00074"></a>00074         {
<a name="l00075"></a>00075             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00076"></a>00076         }
<a name="l00077"></a>00077     }
<a name="l00078"></a>00078     <span class="keywordflow">else</span>
<a name="l00079"></a>00079     {
<a name="l00080"></a>00080         <span class="comment">// No support for writing ogg files yet...</span>
<a name="l00081"></a>00081         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00082"></a>00082     }
<a name="l00083"></a>00083 }
<a name="l00084"></a>00084 
<a name="l00085"></a>00085 
<a name="l00089"></a>00089 <span class="keywordtype">bool</span> SoundFileOgg::IsFileSupported(<span class="keyword">const</span> <span class="keywordtype">char</span>* Data, std::size_t SizeInBytes)
<a name="l00090"></a>00090 {
<a name="l00091"></a>00091     <span class="comment">// Open the vorbis stream</span>
<a name="l00092"></a>00092     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* Buffer = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(<span class="keyword">const_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(Data));
<a name="l00093"></a>00093     <span class="keywordtype">int</span> Length = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(SizeInBytes);
<a name="l00094"></a>00094     stb_vorbis* Stream = stb_vorbis_open_memory(Buffer, Length, NULL, NULL);
<a name="l00095"></a>00095 
<a name="l00096"></a>00096     <span class="keywordflow">if</span> (Stream)
<a name="l00097"></a>00097     {
<a name="l00098"></a>00098         stb_vorbis_close(Stream);
<a name="l00099"></a>00099         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00100"></a>00100     }
<a name="l00101"></a>00101     <span class="keywordflow">else</span>
<a name="l00102"></a>00102     {
<a name="l00103"></a>00103         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00104"></a>00104     }
<a name="l00105"></a>00105 }
<a name="l00106"></a>00106 
<a name="l00107"></a>00107 
<a name="l00111"></a>00111 <span class="keywordtype">bool</span> SoundFileOgg::OpenRead(<span class="keyword">const</span> std::string&amp; Filename, std::size_t&amp; NbSamples, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&amp; ChannelsCount, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&amp; SampleRate)
<a name="l00112"></a>00112 {
<a name="l00113"></a>00113     <span class="comment">// Close the file if already opened</span>
<a name="l00114"></a>00114     <span class="keywordflow">if</span> (myStream)
<a name="l00115"></a>00115         stb_vorbis_close(myStream);
<a name="l00116"></a>00116 
<a name="l00117"></a>00117     <span class="comment">// Open the vorbis stream</span>
<a name="l00118"></a>00118     myStream = stb_vorbis_open_filename(const_cast&lt;char*&gt;(Filename.c_str()), NULL, NULL);
<a name="l00119"></a>00119     <span class="keywordflow">if</span> (myStream == NULL)
<a name="l00120"></a>00120     {
<a name="l00121"></a>00121         std::cerr &lt;&lt; <span class="stringliteral">"Failed to read sound file \""</span> &lt;&lt; Filename &lt;&lt; <span class="stringliteral">"\" (cannot open the file)"</span> &lt;&lt; std::endl;
<a name="l00122"></a>00122         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00123"></a>00123     }
<a name="l00124"></a>00124 
<a name="l00125"></a>00125     <span class="comment">// Get the music parameters</span>
<a name="l00126"></a>00126     stb_vorbis_info Infos = stb_vorbis_get_info(myStream);
<a name="l00127"></a>00127     ChannelsCount = myChannelsCount = Infos.channels;
<a name="l00128"></a>00128     SampleRate    = Infos.sample_rate;
<a name="l00129"></a>00129     NbSamples     = <span class="keyword">static_cast&lt;</span>std::size_t<span class="keyword">&gt;</span>(stb_vorbis_stream_length_in_samples(myStream) * ChannelsCount);
<a name="l00130"></a>00130 
<a name="l00131"></a>00131     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00132"></a>00132 }
<a name="l00133"></a>00133 
<a name="l00134"></a>00134 
<a name="l00138"></a>00138 <span class="keywordtype">bool</span> SoundFileOgg::OpenRead(<span class="keyword">const</span> <span class="keywordtype">char</span>* Data, std::size_t SizeInBytes, std::size_t&amp; NbSamples, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&amp; ChannelsCount, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&amp; SampleRate)
<a name="l00139"></a>00139 {
<a name="l00140"></a>00140     <span class="comment">// Close the file if already opened</span>
<a name="l00141"></a>00141     <span class="keywordflow">if</span> (myStream)
<a name="l00142"></a>00142         stb_vorbis_close(myStream);
<a name="l00143"></a>00143 
<a name="l00144"></a>00144     <span class="comment">// Open the vorbis stream</span>
<a name="l00145"></a>00145     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* Buffer = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(<span class="keyword">const_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(Data));
<a name="l00146"></a>00146     <span class="keywordtype">int</span> Length = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(SizeInBytes);
<a name="l00147"></a>00147     myStream = stb_vorbis_open_memory(Buffer, Length, NULL, NULL);
<a name="l00148"></a>00148     <span class="keywordflow">if</span> (myStream == NULL)
<a name="l00149"></a>00149     {
<a name="l00150"></a>00150         std::cerr &lt;&lt; <span class="stringliteral">"Failed to read sound file from memory (cannot open the file)"</span> &lt;&lt; std::endl;
<a name="l00151"></a>00151         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00152"></a>00152     }
<a name="l00153"></a>00153 
<a name="l00154"></a>00154     <span class="comment">// Get the music parameters</span>
<a name="l00155"></a>00155     stb_vorbis_info Infos = stb_vorbis_get_info(myStream);
<a name="l00156"></a>00156     ChannelsCount = myChannelsCount = Infos.channels;
<a name="l00157"></a>00157     SampleRate    = Infos.sample_rate;
<a name="l00158"></a>00158     NbSamples     = <span class="keyword">static_cast&lt;</span>std::size_t<span class="keyword">&gt;</span>(stb_vorbis_stream_length_in_samples(myStream) * ChannelsCount);
<a name="l00159"></a>00159 
<a name="l00160"></a>00160     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00161"></a>00161 }
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 
<a name="l00167"></a>00167 std::size_t SoundFileOgg::Read(Int16* Data, std::size_t NbSamples)
<a name="l00168"></a>00168 {
<a name="l00169"></a>00169     <span class="keywordflow">if</span> (myStream &amp;&amp; Data &amp;&amp; NbSamples)
<a name="l00170"></a>00170     {
<a name="l00171"></a>00171         <span class="keywordtype">int</span> Read = stb_vorbis_get_samples_short_interleaved(myStream, myChannelsCount, Data, static_cast&lt;int&gt;(NbSamples));
<a name="l00172"></a>00172         <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>std::size_t<span class="keyword">&gt;</span>(Read * myChannelsCount);
<a name="l00173"></a>00173     }
<a name="l00174"></a>00174     <span class="keywordflow">else</span>
<a name="l00175"></a>00175     {
<a name="l00176"></a>00176         <span class="keywordflow">return</span> 0;
<a name="l00177"></a>00177     }
<a name="l00178"></a>00178 }
<a name="l00179"></a>00179 
<a name="l00180"></a>00180 } <span class="comment">// namespace priv</span>
<a name="l00181"></a>00181 
<a name="l00182"></a>00182 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
