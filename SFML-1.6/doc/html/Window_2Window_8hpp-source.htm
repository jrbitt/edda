<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>Window.hpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_WINDOW_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_WINDOW_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Window/Event.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;SFML/Window/Input.hpp&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;SFML/Window/VideoMode.hpp&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;SFML/Window/WindowHandle.hpp&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;SFML/Window/WindowListener.hpp&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;SFML/Window/WindowSettings.hpp&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;SFML/Window/WindowStyle.hpp&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;SFML/System/Clock.hpp&gt;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;SFML/System/NonCopyable.hpp&gt;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;queue&gt;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="keyword">namespace </span>sf
<a name="l00045"></a>00045 {
<a name="l00046"></a>00046 <span class="keyword">namespace </span>priv
<a name="l00047"></a>00047 {
<a name="l00048"></a>00048     <span class="keyword">class </span>WindowImpl;
<a name="l00049"></a>00049 }
<a name="l00050"></a>00050 
<a name="l00055"></a><a class="code" href="classsf_1_1Window.htm">00055</a> <span class="keyword">class </span>SFML_API <a class="code" href="classsf_1_1Window.htm" title="Window is a rendering window ; it can create a new window or connect to an existing...">Window</a> : <span class="keyword">public</span> <a class="code" href="classsf_1_1WindowListener.htm" title="Base class for classes that want to receive events from a window (for internal use...">WindowListener</a>, <a class="code" href="structsf_1_1NonCopyable.htm" title="Utility base class to easily declare non-copyable classes.">NonCopyable</a>
<a name="l00056"></a>00056 {
<a name="l00057"></a>00057 <span class="keyword">public</span> :
<a name="l00058"></a>00058 
<a name="l00063"></a>00063     <a class="code" href="classsf_1_1Window.htm" title="Window is a rendering window ; it can create a new window or connect to an existing...">Window</a>();
<a name="l00064"></a>00064 
<a name="l00074"></a>00074     <a class="code" href="classsf_1_1Window.htm" title="Window is a rendering window ; it can create a new window or connect to an existing...">Window</a>(<a class="code" href="classsf_1_1VideoMode.htm" title="VideoMode defines a video mode (width, height, bpp, frequency) and provides static...">VideoMode</a> Mode, <span class="keyword">const</span> std::string&amp; Title, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> WindowStyle = <a class="code" href="namespacesf_1_1Style.htm#d001cd87b8aa5669d0eadbb8aab1c1d2ccff967648ebcd5db2007eff7352b50f" title="Titlebar + resizable border + maximize button.">Style::Resize</a> | <a class="code" href="namespacesf_1_1Style.htm#d001cd87b8aa5669d0eadbb8aab1c1d2e07a7d411d5acf28f4a9a4b76a3a9493" title="Titlebar + close button.">Style::Close</a>, <span class="keyword">const</span> <a class="code" href="structsf_1_1WindowSettings.htm" title="Structure defining the creation settings of windows.">WindowSettings</a>&amp; Params = <a class="code" href="structsf_1_1WindowSettings.htm" title="Structure defining the creation settings of windows.">WindowSettings</a>());
<a name="l00075"></a>00075 
<a name="l00083"></a>00083     <a class="code" href="classsf_1_1Window.htm" title="Window is a rendering window ; it can create a new window or connect to an existing...">Window</a>(WindowHandle Handle, <span class="keyword">const</span> <a class="code" href="structsf_1_1WindowSettings.htm" title="Structure defining the creation settings of windows.">WindowSettings</a>&amp; Params = <a class="code" href="structsf_1_1WindowSettings.htm" title="Structure defining the creation settings of windows.">WindowSettings</a>());
<a name="l00084"></a>00084 
<a name="l00089"></a>00089     <span class="keyword">virtual</span> ~<a class="code" href="classsf_1_1Window.htm" title="Window is a rendering window ; it can create a new window or connect to an existing...">Window</a>();
<a name="l00090"></a>00090 
<a name="l00100"></a>00100     <span class="keywordtype">void</span> Create(<a class="code" href="classsf_1_1VideoMode.htm" title="VideoMode defines a video mode (width, height, bpp, frequency) and provides static...">VideoMode</a> Mode, <span class="keyword">const</span> std::string&amp; Title, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> WindowStyle = <a class="code" href="namespacesf_1_1Style.htm#d001cd87b8aa5669d0eadbb8aab1c1d2ccff967648ebcd5db2007eff7352b50f" title="Titlebar + resizable border + maximize button.">Style::Resize</a> | <a class="code" href="namespacesf_1_1Style.htm#d001cd87b8aa5669d0eadbb8aab1c1d2e07a7d411d5acf28f4a9a4b76a3a9493" title="Titlebar + close button.">Style::Close</a>, <span class="keyword">const</span> <a class="code" href="structsf_1_1WindowSettings.htm" title="Structure defining the creation settings of windows.">WindowSettings</a>&amp; Params = <a class="code" href="structsf_1_1WindowSettings.htm" title="Structure defining the creation settings of windows.">WindowSettings</a>());
<a name="l00101"></a>00101 
<a name="l00109"></a>00109     <span class="keywordtype">void</span> Create(WindowHandle Handle, <span class="keyword">const</span> <a class="code" href="structsf_1_1WindowSettings.htm" title="Structure defining the creation settings of windows.">WindowSettings</a>&amp; Params = <a class="code" href="structsf_1_1WindowSettings.htm" title="Structure defining the creation settings of windows.">WindowSettings</a>());
<a name="l00110"></a>00110 
<a name="l00117"></a>00117     <span class="keywordtype">void</span> Close();
<a name="l00118"></a>00118 
<a name="l00127"></a>00127     <span class="keywordtype">bool</span> IsOpened() <span class="keyword">const</span>;
<a name="l00128"></a>00128 
<a name="l00135"></a>00135     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetWidth() <span class="keyword">const</span>;
<a name="l00136"></a>00136 
<a name="l00143"></a>00143     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetHeight() <span class="keyword">const</span>;
<a name="l00144"></a>00144 
<a name="l00151"></a>00151     <span class="keyword">const</span> <a class="code" href="structsf_1_1WindowSettings.htm" title="Structure defining the creation settings of windows.">WindowSettings</a>&amp; GetSettings() <span class="keyword">const</span>;
<a name="l00152"></a>00152 
<a name="l00161"></a>00161     <span class="keywordtype">bool</span> GetEvent(<a class="code" href="classsf_1_1Event.htm" title="Event defines a system event and its parameters.">Event</a>&amp; EventReceived);
<a name="l00162"></a>00162 
<a name="l00169"></a>00169     <span class="keywordtype">void</span> UseVerticalSync(<span class="keywordtype">bool</span> Enabled);
<a name="l00170"></a>00170 
<a name="l00177"></a>00177     <span class="keywordtype">void</span> ShowMouseCursor(<span class="keywordtype">bool</span> Show);
<a name="l00178"></a>00178 
<a name="l00186"></a>00186     <span class="keywordtype">void</span> SetCursorPosition(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Left, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Top);
<a name="l00187"></a>00187 
<a name="l00196"></a>00196     <span class="keywordtype">void</span> SetPosition(<span class="keywordtype">int</span> Left, <span class="keywordtype">int</span> Top);
<a name="l00197"></a>00197 
<a name="l00205"></a>00205     <span class="keywordtype">void</span> SetSize(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Height);
<a name="l00206"></a>00206 
<a name="l00213"></a>00213     <span class="keywordtype">void</span> Show(<span class="keywordtype">bool</span> State);
<a name="l00214"></a>00214 
<a name="l00222"></a>00222     <span class="keywordtype">void</span> EnableKeyRepeat(<span class="keywordtype">bool</span> Enabled);
<a name="l00223"></a>00223 
<a name="l00232"></a>00232     <span class="keywordtype">void</span> SetIcon(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Height, <span class="keyword">const</span> Uint8* Pixels);
<a name="l00233"></a>00233 
<a name="l00243"></a>00243     <span class="keywordtype">bool</span> SetActive(<span class="keywordtype">bool</span> Active = <span class="keyword">true</span>) <span class="keyword">const</span>;
<a name="l00244"></a>00244 
<a name="l00249"></a>00249     <span class="keywordtype">void</span> Display();
<a name="l00250"></a>00250 
<a name="l00257"></a>00257     <span class="keyword">const</span> <a class="code" href="classsf_1_1Input.htm" title="Input handles real-time input from keyboard and mouse.">Input</a>&amp; GetInput() <span class="keyword">const</span>;
<a name="l00258"></a>00258 
<a name="l00265"></a>00265     <span class="keywordtype">void</span> SetFramerateLimit(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Limit);
<a name="l00266"></a>00266 
<a name="l00273"></a>00273     <span class="keywordtype">float</span> GetFrameTime() <span class="keyword">const</span>;
<a name="l00274"></a>00274 
<a name="l00282"></a>00282     <span class="keywordtype">void</span> SetJoystickThreshold(<span class="keywordtype">float</span> Threshold);
<a name="l00283"></a>00283 
<a name="l00284"></a>00284 <span class="keyword">private</span> :
<a name="l00285"></a>00285 
<a name="l00290"></a>00290     <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnCreate();
<a name="l00291"></a>00291 
<a name="l00298"></a>00298     <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnEvent(<span class="keyword">const</span> <a class="code" href="classsf_1_1Event.htm" title="Event defines a system event and its parameters.">Event</a>&amp; EventReceived);
<a name="l00299"></a>00299 
<a name="l00306"></a>00306     <span class="keywordtype">void</span> Initialize(priv::WindowImpl* Impl);
<a name="l00307"></a>00307 
<a name="l00309"></a>00309     <span class="comment">// Member data</span>
<a name="l00311"></a>00311 <span class="comment"></span>    priv::WindowImpl* myWindow;         
<a name="l00312"></a>00312     std::queue&lt;Event&gt; myEvents;         
<a name="l00313"></a>00313     <a class="code" href="classsf_1_1Input.htm" title="Input handles real-time input from keyboard and mouse.">Input</a>             myInput;          
<a name="l00314"></a>00314     <a class="code" href="classsf_1_1Clock.htm" title="Clock is an utility class for manipulating time.">Clock</a>             myClock;          
<a name="l00315"></a>00315     <a class="code" href="structsf_1_1WindowSettings.htm" title="Structure defining the creation settings of windows.">WindowSettings</a>    mySettings;       
<a name="l00316"></a>00316     <span class="keywordtype">float</span>             myLastFrameTime;  
<a name="l00317"></a>00317     <span class="keywordtype">bool</span>              myIsExternal;     
<a name="l00318"></a>00318     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>      myFramerateLimit; 
<a name="l00319"></a>00319     <span class="keywordtype">int</span>               mySetCursorPosX;  
<a name="l00320"></a>00320     <span class="keywordtype">int</span>               mySetCursorPosY;  
<a name="l00321"></a>00321 };
<a name="l00322"></a>00322 
<a name="l00323"></a>00323 } <span class="comment">// namespace sf</span>
<a name="l00324"></a>00324 
<a name="l00325"></a>00325 
<a name="l00326"></a>00326 <span class="preprocessor">#endif // SFML_WINDOW_HPP</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
