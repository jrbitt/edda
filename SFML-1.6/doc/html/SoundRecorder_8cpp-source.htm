<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>SoundRecorder.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Audio/SoundRecorder.hpp&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;SFML/Audio/AudioDevice.hpp&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;SFML/Audio/OpenAL.hpp&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;SFML/System/Sleep.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 
<a name="l00036"></a>00036 <span class="comment">// Private data</span>
<a name="l00038"></a>00038 <span class="comment"></span><span class="keyword">namespace</span>
<a name="l00039"></a>00039 {
<a name="l00040"></a>00040     ALCdevice* CaptureDevice = NULL;
<a name="l00041"></a>00041 }
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="keyword">namespace </span>sf
<a name="l00044"></a>00044 {
<a name="l00048"></a><a class="code" href="classsf_1_1SoundRecorder.htm#50ebad413c4f157408a0fa49f23212a9">00048</a> <a class="code" href="classsf_1_1SoundRecorder.htm#50ebad413c4f157408a0fa49f23212a9" title="Default constructor.">SoundRecorder::SoundRecorder</a>() :
<a name="l00049"></a>00049 mySampleRate (0),
<a name="l00050"></a>00050 myIsCapturing(false)
<a name="l00051"></a>00051 {
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 }
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 
<a name="l00059"></a><a class="code" href="classsf_1_1SoundRecorder.htm#e83953cce24c5245c0672d150d280b64">00059</a> <a class="code" href="classsf_1_1SoundRecorder.htm#e83953cce24c5245c0672d150d280b64" title="Virtual destructor.">SoundRecorder::~SoundRecorder</a>()
<a name="l00060"></a>00060 {
<a name="l00061"></a>00061     <span class="comment">// Nothing to do</span>
<a name="l00062"></a>00062 }
<a name="l00063"></a>00063 
<a name="l00064"></a>00064 
<a name="l00069"></a><a class="code" href="classsf_1_1SoundRecorder.htm#6693c1ac2c0d1677f798539b0643eac6">00069</a> <span class="keywordtype">void</span> <a class="code" href="classsf_1_1SoundRecorder.htm#6693c1ac2c0d1677f798539b0643eac6" title="Start the capture.">SoundRecorder::Start</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> SampleRate)
<a name="l00070"></a>00070 {
<a name="l00071"></a>00071     <span class="comment">// Check if the device can do audio capture</span>
<a name="l00072"></a>00072     <span class="keywordflow">if</span> (!<a class="code" href="classsf_1_1SoundRecorder.htm#436acab98f3f95d146b3ffe24fbf3fc5" title="Tell if the system supports sound capture.">CanCapture</a>())
<a name="l00073"></a>00073     {
<a name="l00074"></a>00074         std::cerr &lt;&lt; <span class="stringliteral">"Failed to start capture : your system cannot capture audio data (call SoundRecorder::CanCapture to check it)"</span> &lt;&lt; std::endl;
<a name="l00075"></a>00075         <span class="keywordflow">return</span>;
<a name="l00076"></a>00076     }
<a name="l00077"></a>00077 
<a name="l00078"></a>00078     <span class="comment">// Check that another capture is not already running</span>
<a name="l00079"></a>00079     <span class="keywordflow">if</span> (CaptureDevice)
<a name="l00080"></a>00080     {
<a name="l00081"></a>00081         std::cerr &lt;&lt; <span class="stringliteral">"Trying to start audio capture, but another capture is already running"</span> &lt;&lt; std::endl;
<a name="l00082"></a>00082         <span class="keywordflow">return</span>;
<a name="l00083"></a>00083     }
<a name="l00084"></a>00084 
<a name="l00085"></a>00085     <span class="comment">// Open the capture device for capturing 16 bits mono samples</span>
<a name="l00086"></a>00086     CaptureDevice = alcCaptureOpenDevice(NULL, SampleRate, AL_FORMAT_MONO16, SampleRate);
<a name="l00087"></a>00087     <span class="keywordflow">if</span> (!CaptureDevice)
<a name="l00088"></a>00088     {
<a name="l00089"></a>00089         std::cerr &lt;&lt; <span class="stringliteral">"Failed to open the audio capture device"</span> &lt;&lt; std::endl;
<a name="l00090"></a>00090         <span class="keywordflow">return</span>;
<a name="l00091"></a>00091     }
<a name="l00092"></a>00092 
<a name="l00093"></a>00093     <span class="comment">// Clear the sample array</span>
<a name="l00094"></a>00094     mySamples.clear();
<a name="l00095"></a>00095 
<a name="l00096"></a>00096     <span class="comment">// Store the sample rate</span>
<a name="l00097"></a>00097     mySampleRate = SampleRate;
<a name="l00098"></a>00098 
<a name="l00099"></a>00099     <span class="comment">// Notify derived class</span>
<a name="l00100"></a>00100     <span class="keywordflow">if</span> (OnStart())
<a name="l00101"></a>00101     {
<a name="l00102"></a>00102         <span class="comment">// Start the capture</span>
<a name="l00103"></a>00103         alcCaptureStart(CaptureDevice);
<a name="l00104"></a>00104 
<a name="l00105"></a>00105         <span class="comment">// Start the capture in a new thread, to avoid blocking the main thread</span>
<a name="l00106"></a>00106         myIsCapturing = <span class="keyword">true</span>;
<a name="l00107"></a>00107         <a class="code" href="classsf_1_1Thread.htm#046df871f73d3cf452d1c72bcc143642" title="Create and run the thread.">Launch</a>();
<a name="l00108"></a>00108     }
<a name="l00109"></a>00109 }
<a name="l00110"></a>00110 
<a name="l00111"></a>00111 
<a name="l00115"></a><a class="code" href="classsf_1_1SoundRecorder.htm#9d51c7ef42bcdd4ad53e995d57f90733">00115</a> <span class="keywordtype">void</span> <a class="code" href="classsf_1_1SoundRecorder.htm#9d51c7ef42bcdd4ad53e995d57f90733" title="Stop the capture.">SoundRecorder::Stop</a>()
<a name="l00116"></a>00116 {
<a name="l00117"></a>00117     <span class="comment">// Stop the capturing thread</span>
<a name="l00118"></a>00118     myIsCapturing = <span class="keyword">false</span>;
<a name="l00119"></a>00119     <a class="code" href="classsf_1_1Thread.htm#67f3c609fdf99688531dbfae461ea4d2" title="Wait until the thread finishes.">Wait</a>();
<a name="l00120"></a>00120 }
<a name="l00121"></a>00121 
<a name="l00122"></a>00122 
<a name="l00126"></a><a class="code" href="classsf_1_1SoundRecorder.htm#bab8a7f4ba28658c4bf707639f11a6c5">00126</a> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classsf_1_1SoundRecorder.htm#bab8a7f4ba28658c4bf707639f11a6c5" title="Get the sample rate.">SoundRecorder::GetSampleRate</a>()<span class="keyword"> const</span>
<a name="l00127"></a>00127 <span class="keyword"></span>{
<a name="l00128"></a>00128     <span class="keywordflow">return</span> mySampleRate;
<a name="l00129"></a>00129 }
<a name="l00130"></a>00130 
<a name="l00131"></a>00131 
<a name="l00136"></a><a class="code" href="classsf_1_1SoundRecorder.htm#436acab98f3f95d146b3ffe24fbf3fc5">00136</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1SoundRecorder.htm#436acab98f3f95d146b3ffe24fbf3fc5" title="Tell if the system supports sound capture.">SoundRecorder::CanCapture</a>()
<a name="l00137"></a>00137 {
<a name="l00138"></a>00138     ALCdevice* Device = priv::AudioDevice::GetInstance().GetDevice();
<a name="l00139"></a>00139 
<a name="l00140"></a>00140     <span class="keywordflow">return</span> (alcIsExtensionPresent(Device, <span class="stringliteral">"ALC_EXT_CAPTURE"</span>) != AL_FALSE) ||
<a name="l00141"></a>00141            (alcIsExtensionPresent(Device, <span class="stringliteral">"ALC_EXT_capture"</span>) != AL_FALSE); <span class="comment">// "bug" in Mac OS X 10.5 and 10.6</span>
<a name="l00142"></a>00142 }
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 
<a name="l00148"></a>00148 <span class="keywordtype">bool</span> SoundRecorder::OnStart()
<a name="l00149"></a>00149 {
<a name="l00150"></a>00150     <span class="comment">// Nothing to do</span>
<a name="l00151"></a>00151     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00152"></a>00152 }
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 
<a name="l00158"></a>00158 <span class="keywordtype">void</span> SoundRecorder::OnStop()
<a name="l00159"></a>00159 {
<a name="l00160"></a>00160     <span class="comment">// Nothing to do</span>
<a name="l00161"></a>00161 }
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 
<a name="l00167"></a>00167 <span class="keywordtype">void</span> SoundRecorder::Run()
<a name="l00168"></a>00168 {
<a name="l00169"></a>00169     <span class="keywordflow">while</span> (myIsCapturing)
<a name="l00170"></a>00170     {
<a name="l00171"></a>00171         <span class="comment">// Process available samples</span>
<a name="l00172"></a>00172         ProcessCapturedSamples();
<a name="l00173"></a>00173 
<a name="l00174"></a>00174         <span class="comment">// Don't bother the CPU while waiting for more captured data</span>
<a name="l00175"></a>00175         Sleep(0.1f);
<a name="l00176"></a>00176     }
<a name="l00177"></a>00177 
<a name="l00178"></a>00178     <span class="comment">// Capture is finished : clean up everything</span>
<a name="l00179"></a>00179     CleanUp();
<a name="l00180"></a>00180 
<a name="l00181"></a>00181     <span class="comment">// Notify derived class</span>
<a name="l00182"></a>00182     OnStop();
<a name="l00183"></a>00183 }
<a name="l00184"></a>00184 
<a name="l00185"></a>00185 
<a name="l00189"></a>00189 <span class="keywordtype">void</span> SoundRecorder::ProcessCapturedSamples()
<a name="l00190"></a>00190 {
<a name="l00191"></a>00191     <span class="comment">// Get the number of samples available</span>
<a name="l00192"></a>00192     ALCint SamplesAvailable;
<a name="l00193"></a>00193     alcGetIntegerv(CaptureDevice, ALC_CAPTURE_SAMPLES, 1, &amp;SamplesAvailable);
<a name="l00194"></a>00194 
<a name="l00195"></a>00195     <span class="keywordflow">if</span> (SamplesAvailable &gt; 0)
<a name="l00196"></a>00196     {
<a name="l00197"></a>00197         <span class="comment">// Get the recorded samples</span>
<a name="l00198"></a>00198         mySamples.resize(SamplesAvailable);
<a name="l00199"></a>00199         alcCaptureSamples(CaptureDevice, &amp;mySamples[0], SamplesAvailable);
<a name="l00200"></a>00200 
<a name="l00201"></a>00201         <span class="comment">// Forward them to the derived class</span>
<a name="l00202"></a>00202         <span class="keywordflow">if</span> (!OnProcessSamples(&amp;mySamples[0], mySamples.size()))
<a name="l00203"></a>00203         {
<a name="l00204"></a>00204             <span class="comment">// The user wants to stop the capture</span>
<a name="l00205"></a>00205             myIsCapturing = <span class="keyword">false</span>;
<a name="l00206"></a>00206         }
<a name="l00207"></a>00207     }
<a name="l00208"></a>00208 }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 
<a name="l00214"></a>00214 <span class="keywordtype">void</span> SoundRecorder::CleanUp()
<a name="l00215"></a>00215 {
<a name="l00216"></a>00216     <span class="comment">// Stop the capture</span>
<a name="l00217"></a>00217     alcCaptureStop(CaptureDevice);
<a name="l00218"></a>00218 
<a name="l00219"></a>00219     <span class="comment">// Get the samples left in the buffer</span>
<a name="l00220"></a>00220     ProcessCapturedSamples();
<a name="l00221"></a>00221 
<a name="l00222"></a>00222     <span class="comment">// Close the device</span>
<a name="l00223"></a>00223     alcCaptureCloseDevice(CaptureDevice);
<a name="l00224"></a>00224     CaptureDevice = NULL;
<a name="l00225"></a>00225 }
<a name="l00226"></a>00226 
<a name="l00227"></a>00227 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
