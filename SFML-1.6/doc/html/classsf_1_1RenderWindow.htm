<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><b>sf</b>::<a class="el" href="classsf_1_1RenderWindow.htm">RenderWindow</a>
  </div>
</div>
<div class="contents">
<h1>sf::RenderWindow Class Reference</h1><!-- doxytag: class="sf::RenderWindow" --><!-- doxytag: inherits="sf::Window,sf::RenderTarget" -->Simple wrapper for <a class="el" href="classsf_1_1Window.htm" title="Window is a rendering window ; it can create a new window or connect to an existing...">sf::Window</a> that allows easy 2D rendering.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="RenderWindow_8hpp-source.htm">RenderWindow.hpp</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for sf::RenderWindow:</div>
<div class="dynsection">

<p><center><img src="classsf_1_1RenderWindow.png" usemap="#sf::RenderWindow_map" border="0" alt=""></center>
<map name="sf::RenderWindow_map">
<area href="classsf_1_1Window.htm" alt="sf::Window" shape="rect" coords="63,56,180,80">
<area href="classsf_1_1RenderTarget.htm" alt="sf::RenderTarget" shape="rect" coords="190,56,307,80">
<area href="classsf_1_1WindowListener.htm" alt="sf::WindowListener" shape="rect" coords="0,0,117,24">
<area href="structsf_1_1NonCopyable.htm" alt="sf::NonCopyable" shape="rect" coords="127,0,244,24">
</map>
</div>

<p>
<a href="classsf_1_1RenderWindow-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderWindow.htm#839bbf336bdcafb084dafc3076fc9021">RenderWindow</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Default constructor.  <a href="#839bbf336bdcafb084dafc3076fc9021"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderWindow.htm#da5aeec63eddbfacb6ee093ed0fff082">RenderWindow</a> (<a class="el" href="classsf_1_1VideoMode.htm">VideoMode</a> Mode, const std::string &amp;Title, unsigned long WindowStyle=Style::Resize|Style::Close, const <a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a> &amp;Params=<a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a>())</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct the window.  <a href="#da5aeec63eddbfacb6ee093ed0fff082"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderWindow.htm#b35dccdc0c735f50edba3acb0cfbea03">RenderWindow</a> (WindowHandle Handle, const <a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a> &amp;Params=<a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a>())</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct the window from an existing control.  <a href="#b35dccdc0c735f50edba3acb0cfbea03"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderWindow.htm#b95277816e7237146ebfeb6d35f85020">~RenderWindow</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Destructor.  <a href="#b95277816e7237146ebfeb6d35f85020"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderWindow.htm#e2b04f655a655b7c4bfac22958266e0c">GetWidth</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the width of the rendering region of the window.  <a href="#e2b04f655a655b7c4bfac22958266e0c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderWindow.htm#efa842a47f9c2415d1f8e93543ed2447">GetHeight</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the height of the rendering region of the window.  <a href="#efa842a47f9c2415d1f8e93543ed2447"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classsf_1_1Image.htm">Image</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderWindow.htm#7066f80705fb53c2c4a9fe068fc47a8a">Capture</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Save the content of the window to an image.  <a href="#7066f80705fb53c2c4a9fe068fc47a8a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classsf_1_1Vector2.htm">sf::Vector2f</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderWindow.htm#05c614a2cdc2c2c4e3b473e39b3b9a17">ConvertCoords</a> (unsigned int WindowX, unsigned int WindowY, const <a class="el" href="classsf_1_1View.htm">View</a> *TargetView=NULL) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Convert a point in window coordinates into view coordinates.  <a href="#05c614a2cdc2c2c4e3b473e39b3b9a17"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#a891f1cbd7d77c4dc02ac950b6e76f61">Create</a> (<a class="el" href="classsf_1_1VideoMode.htm">VideoMode</a> Mode, const std::string &amp;Title, unsigned long WindowStyle=Style::Resize|Style::Close, const <a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a> &amp;Params=<a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a>())</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create (or recreate) the window.  <a href="#a891f1cbd7d77c4dc02ac950b6e76f61"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#58e264c181fd70e67986d26fea69a71d">Create</a> (WindowHandle Handle, const <a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a> &amp;Params=<a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a>())</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create (or recreate) the window from an existing control.  <a href="#58e264c181fd70e67986d26fea69a71d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#b04439f6fb9fdfe40f882676fdb2938c">Close</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Close (destroy) the window.  <a href="#b04439f6fb9fdfe40f882676fdb2938c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#5c4c82e1fdb4252108314fcbe462ad8d">IsOpened</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Tell whether or not the window is opened (ie.  <a href="#5c4c82e1fdb4252108314fcbe462ad8d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#27321006595f9f6a482b26b13800695f">GetSettings</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the creation settings of the window.  <a href="#27321006595f9f6a482b26b13800695f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#65cb14f66a870f459bd66e11e52fbfe8">GetEvent</a> (<a class="el" href="classsf_1_1Event.htm">Event</a> &amp;EventReceived)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the event on top of events stack, if any, and pop it.  <a href="#65cb14f66a870f459bd66e11e52fbfe8"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#cb8391cc93ff730288e2a8dd6b0bb7b5">UseVerticalSync</a> (bool Enabled)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable / disable vertical synchronization.  <a href="#cb8391cc93ff730288e2a8dd6b0bb7b5"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#6142e38cb60901e6604284425714f3f0">ShowMouseCursor</a> (bool Show)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Show or hide the mouse cursor.  <a href="#6142e38cb60901e6604284425714f3f0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#369d1764893c6fde8979fcf04142dc55">SetCursorPosition</a> (unsigned int Left, unsigned int Top)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the position of the mouse cursor.  <a href="#369d1764893c6fde8979fcf04142dc55"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#3a6d2908a624a8afda4b2fdd9ef46058">SetPosition</a> (int Left, int Top)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the position of the window on screen.  <a href="#3a6d2908a624a8afda4b2fdd9ef46058"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#dc4461bfaa9b4ff0fd0364a5079a47ef">SetSize</a> (unsigned int Width, unsigned int Height)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the size of the rendering region of the window.  <a href="#dc4461bfaa9b4ff0fd0364a5079a47ef"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#727c01602c86710fd935f9892946b2de">Show</a> (bool State)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Show or hide the window.  <a href="#727c01602c86710fd935f9892946b2de"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#43ac767f0b7b697b392444d639b909e0">EnableKeyRepeat</a> (bool Enabled)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable or disable automatic key-repeat.  <a href="#43ac767f0b7b697b392444d639b909e0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#36fa09e52af66878b8b826457b8f1dfa">SetIcon</a> (unsigned int Width, unsigned int Height, const Uint8 *Pixels)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the window's icon.  <a href="#36fa09e52af66878b8b826457b8f1dfa"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#9fc1e745594d5cf6a30225ec9ea36675">SetActive</a> (bool Active=true) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Activate of deactivate the window as the current target for rendering.  <a href="#9fc1e745594d5cf6a30225ec9ea36675"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#ee37843c5c882f7b3a0788b310308435">Display</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Display the window on screen.  <a href="#ee37843c5c882f7b3a0788b310308435"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1Input.htm">Input</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#49db47a79ca98b7d65087adeea06e919">GetInput</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the input manager of the window.  <a href="#49db47a79ca98b7d65087adeea06e919"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#5544031f1d2965c00532fb5660763f33">SetFramerateLimit</a> (unsigned int Limit)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Limit the framerate to a maximum fixed frequency.  <a href="#5544031f1d2965c00532fb5660763f33"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#63571ef14c9351899bcd605fb101c254">GetFrameTime</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get time elapsed since last frame.  <a href="#63571ef14c9351899bcd605fb101c254"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#d685eed68b85a66c8000a08e9a28aa91">SetJoystickThreshold</a> (float Threshold)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the joystick threshold, ie.  <a href="#d685eed68b85a66c8000a08e9a28aa91"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.htm#125645088d7b2df07599ea36fbb8b87e">Clear</a> (const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;FillColor=<a class="el" href="classsf_1_1Color.htm">Color</a>(0, 0, 0))</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Clear the entire target with a single color.  <a href="#125645088d7b2df07599ea36fbb8b87e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.htm#18678bb6afe22b7462e2cf08f701d2ff">Draw</a> (const <a class="el" href="classsf_1_1Drawable.htm">Drawable</a> &amp;Object)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Draw something into the target.  <a href="#18678bb6afe22b7462e2cf08f701d2ff"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.htm#7060ca19e685d8d5b7c6f5dd9b5906e1">SetView</a> (const <a class="el" href="classsf_1_1View.htm">View</a> &amp;NewView)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the current active view.  <a href="#7060ca19e685d8d5b7c6f5dd9b5906e1"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1View.htm">View</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.htm#d426b7ba51cc6970fb828a2bef020274">GetView</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the current view.  <a href="#d426b7ba51cc6970fb828a2bef020274"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classsf_1_1View.htm">View</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.htm#16db9179a7f035c59b8ecdd10cc2e699">GetDefaultView</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the default view of the window for read / write.  <a href="#16db9179a7f035c59b8ecdd10cc2e699"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.htm#b763d16f00166b516fead600d8824c71">PreserveOpenGLStates</a> (bool Preserve)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Tell SFML to preserve external OpenGL states, at the expense of more CPU charge.  <a href="#b763d16f00166b516fead600d8824c71"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.htm#3d9265548b6903ab7f645d12177bba24">Initialize</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called by the derived class when it's ready to be initialized.  <a href="#3d9265548b6903ab7f645d12177bba24"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Simple wrapper for <a class="el" href="classsf_1_1Window.htm" title="Window is a rendering window ; it can create a new window or connect to an existing...">sf::Window</a> that allows easy 2D rendering. 
<p>Definition at line <a class="el" href="RenderWindow_8hpp-source.htm#l00045">45</a> of file <a class="el" href="RenderWindow_8hpp-source.htm">RenderWindow.hpp</a>.</p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="839bbf336bdcafb084dafc3076fc9021"></a><!-- doxytag: member="sf::RenderWindow::RenderWindow" ref="839bbf336bdcafb084dafc3076fc9021" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::RenderWindow::RenderWindow           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Default constructor. 
<p>

<p>Definition at line <a class="el" href="RenderWindow_8cpp-source.htm#l00040">40</a> of file <a class="el" href="RenderWindow_8cpp-source.htm">RenderWindow.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="da5aeec63eddbfacb6ee093ed0fff082"></a><!-- doxytag: member="sf::RenderWindow::RenderWindow" ref="da5aeec63eddbfacb6ee093ed0fff082" args="(VideoMode Mode, const std::string &amp;Title, unsigned long WindowStyle=Style::Resize|Style::Close, const WindowSettings &amp;Params=WindowSettings())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::RenderWindow::RenderWindow           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1VideoMode.htm">VideoMode</a>&nbsp;</td>
          <td class="paramname"> <em>Mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>Title</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&nbsp;</td>
          <td class="paramname"> <em>WindowStyle</em> = <code>Style::Resize&nbsp;|&nbsp;Style::Close</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Params</em> = <code><a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a>()</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Construct the window. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Mode</em>&nbsp;</td><td>: Video mode to use </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Title</em>&nbsp;</td><td>: Title of the window </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>WindowStyle</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Window.htm" title="Window is a rendering window ; it can create a new window or connect to an existing...">Window</a> style, see <a class="el" href="namespacesf_1_1Style.htm" title="Enumeration of window creation styles.">sf::Style</a> (Resize | Close by default) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Params</em>&nbsp;</td><td>: Creation parameters (see default constructor for default values) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="RenderWindow_8cpp-source.htm#l00049">49</a> of file <a class="el" href="RenderWindow_8cpp-source.htm">RenderWindow.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="b35dccdc0c735f50edba3acb0cfbea03"></a><!-- doxytag: member="sf::RenderWindow::RenderWindow" ref="b35dccdc0c735f50edba3acb0cfbea03" args="(WindowHandle Handle, const WindowSettings &amp;Params=WindowSettings())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::RenderWindow::RenderWindow           </td>
          <td>(</td>
          <td class="paramtype">WindowHandle&nbsp;</td>
          <td class="paramname"> <em>Handle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Params</em> = <code><a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a>()</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Construct the window from an existing control. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Handle</em>&nbsp;</td><td>: Platform-specific handle of the control </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Params</em>&nbsp;</td><td>: Creation parameters (see default constructor for default values) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="RenderWindow_8cpp-source.htm#l00058">58</a> of file <a class="el" href="RenderWindow_8cpp-source.htm">RenderWindow.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="b95277816e7237146ebfeb6d35f85020"></a><!-- doxytag: member="sf::RenderWindow::~RenderWindow" ref="b95277816e7237146ebfeb6d35f85020" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::RenderWindow::~RenderWindow           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Destructor. 
<p>

<p>Definition at line <a class="el" href="RenderWindow_8cpp-source.htm#l00067">67</a> of file <a class="el" href="RenderWindow_8cpp-source.htm">RenderWindow.cpp</a>.</p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="7066f80705fb53c2c4a9fe068fc47a8a"></a><!-- doxytag: member="sf::RenderWindow::Capture" ref="7066f80705fb53c2c4a9fe068fc47a8a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Image.htm">Image</a> sf::RenderWindow::Capture           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Save the content of the window to an image. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd><a class="el" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a> instance containing the contents of the screen </dd></dl>

<p>Definition at line <a class="el" href="RenderWindow_8cpp-source.htm#l00107">107</a> of file <a class="el" href="RenderWindow_8cpp-source.htm">RenderWindow.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="125645088d7b2df07599ea36fbb8b87e"></a><!-- doxytag: member="sf::RenderWindow::Clear" ref="125645088d7b2df07599ea36fbb8b87e" args="(const Color &amp;FillColor=Color(0, 0, 0))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::RenderTarget::Clear           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>FillColor</em> = <code><a class="el" href="classsf_1_1Color.htm">Color</a>(0,&nbsp;0,&nbsp;0)</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Clear the entire target with a single color. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>FillColor</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> to use to clear the render target </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="RenderTarget_8cpp-source.htm#l00060">60</a> of file <a class="el" href="RenderTarget_8cpp-source.htm">RenderTarget.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="b04439f6fb9fdfe40f882676fdb2938c"></a><!-- doxytag: member="sf::RenderWindow::Close" ref="b04439f6fb9fdfe40f882676fdb2938c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::Close           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Close (destroy) the window. 
<p>
The <a class="el" href="classsf_1_1Window.htm" title="Window is a rendering window ; it can create a new window or connect to an existing...">sf::Window</a> instance remains valid and you can call Create to recreate the window<p>
The <a class="el" href="classsf_1_1Window.htm" title="Window is a rendering window ; it can create a new window or connect to an existing...">sf::Window</a> instance remains valid and you can call Create to recreate the window 
<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00165">165</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="05c614a2cdc2c2c4e3b473e39b3b9a17"></a><!-- doxytag: member="sf::RenderWindow::ConvertCoords" ref="05c614a2cdc2c2c4e3b473e39b3b9a17" args="(unsigned int WindowX, unsigned int WindowY, const View *TargetView=NULL) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.htm">sf::Vector2f</a> sf::RenderWindow::ConvertCoords           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>WindowX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>WindowY</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1View.htm">View</a> *&nbsp;</td>
          <td class="paramname"> <em>TargetView</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Convert a point in window coordinates into view coordinates. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>WindowX</em>&nbsp;</td><td>: X coordinate of the point to convert, relative to the window </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>WindowY</em>&nbsp;</td><td>: Y coordinate of the point to convert, relative to the window </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>TargetView</em>&nbsp;</td><td>: Target view to convert the point to (NULL by default -- uses the current view)</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Converted point </dd></dl>

<p>Definition at line <a class="el" href="RenderWindow_8cpp-source.htm#l00142">142</a> of file <a class="el" href="RenderWindow_8cpp-source.htm">RenderWindow.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="58e264c181fd70e67986d26fea69a71d"></a><!-- doxytag: member="sf::RenderWindow::Create" ref="58e264c181fd70e67986d26fea69a71d" args="(WindowHandle Handle, const WindowSettings &amp;Params=WindowSettings())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::Create           </td>
          <td>(</td>
          <td class="paramtype">WindowHandle&nbsp;</td>
          <td class="paramname"> <em>Handle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Params</em> = <code><a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a>()</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Create (or recreate) the window from an existing control. 
<p>
Create the window from an existing control.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Handle</em>&nbsp;</td><td>: Platform-specific handle of the control </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Params</em>&nbsp;</td><td>: Creation parameters (see default constructor for default values) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00147">147</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="a891f1cbd7d77c4dc02ac950b6e76f61"></a><!-- doxytag: member="sf::RenderWindow::Create" ref="a891f1cbd7d77c4dc02ac950b6e76f61" args="(VideoMode Mode, const std::string &amp;Title, unsigned long WindowStyle=Style::Resize|Style::Close, const WindowSettings &amp;Params=WindowSettings())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::Create           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1VideoMode.htm">VideoMode</a>&nbsp;</td>
          <td class="paramname"> <em>Mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>Title</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&nbsp;</td>
          <td class="paramname"> <em>WindowStyle</em> = <code>Style::Resize&nbsp;|&nbsp;Style::Close</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Params</em> = <code><a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a>()</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Create (or recreate) the window. 
<p>
Create the window.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Mode</em>&nbsp;</td><td>: Video mode to use </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Title</em>&nbsp;</td><td>: Title of the window </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>WindowStyle</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Window.htm" title="Window is a rendering window ; it can create a new window or connect to an existing...">Window</a> style, see <a class="el" href="namespacesf_1_1Style.htm" title="Enumeration of window creation styles.">sf::Style</a> (Resize | Close by default) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Params</em>&nbsp;</td><td>: Creation parameters (see default constructor for default values) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00104">104</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="ee37843c5c882f7b3a0788b310308435"></a><!-- doxytag: member="sf::RenderWindow::Display" ref="ee37843c5c882f7b3a0788b310308435" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::Display           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Display the window on screen. 
<p>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00353">353</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="18678bb6afe22b7462e2cf08f701d2ff"></a><!-- doxytag: member="sf::RenderWindow::Draw" ref="18678bb6afe22b7462e2cf08f701d2ff" args="(const Drawable &amp;Object)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::RenderTarget::Draw           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Drawable.htm">Drawable</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Object</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Draw something into the target. 
<p>
Draw something on the window.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Object</em>&nbsp;</td><td>: Object to draw </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="RenderTarget_8cpp-source.htm#l00076">76</a> of file <a class="el" href="RenderTarget_8cpp-source.htm">RenderTarget.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="43ac767f0b7b697b392444d639b909e0"></a><!-- doxytag: member="sf::RenderWindow::EnableKeyRepeat" ref="43ac767f0b7b697b392444d639b909e0" args="(bool Enabled)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::EnableKeyRepeat           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>Enabled</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Enable or disable automatic key-repeat. 
<p>
Automatic key-repeat is enabled by default<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Enabled</em>&nbsp;</td><td>: True to enable, false to disable</td></tr>
  </table>
</dl>
Automatic key-repeat is enabled by default 
<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00317">317</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="16db9179a7f035c59b8ecdd10cc2e699"></a><!-- doxytag: member="sf::RenderWindow::GetDefaultView" ref="16db9179a7f035c59b8ecdd10cc2e699" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1View.htm">View</a> &amp; sf::RenderTarget::GetDefaultView           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the default view of the window for read / write. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Default view </dd></dl>

<p>Definition at line <a class="el" href="RenderTarget_8cpp-source.htm#l00147">147</a> of file <a class="el" href="RenderTarget_8cpp-source.htm">RenderTarget.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="65cb14f66a870f459bd66e11e52fbfe8"></a><!-- doxytag: member="sf::RenderWindow::GetEvent" ref="65cb14f66a870f459bd66e11e52fbfe8" args="(Event &amp;EventReceived)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Window::GetEvent           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Event.htm">Event</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>EventReceived</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the event on top of events stack, if any, and pop it. 
<p>
Get the event on top of events stack, if any.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>EventReceived</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Event.htm" title="Event defines a system event and its parameters.">Event</a> to fill, if any</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if an event was returned, false if events stack was empty </dd></dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00218">218</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="63571ef14c9351899bcd605fb101c254"></a><!-- doxytag: member="sf::RenderWindow::GetFrameTime" ref="63571ef14c9351899bcd605fb101c254" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float sf::Window::GetFrameTime           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get time elapsed since last frame. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Time elapsed, in seconds </dd></dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00394">394</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="efa842a47f9c2415d1f8e93543ed2447"></a><!-- doxytag: member="sf::RenderWindow::GetHeight" ref="efa842a47f9c2415d1f8e93543ed2447" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int sf::RenderWindow::GetHeight           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the height of the rendering region of the window. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Height in pixels </dd></dl>

<p>Implements <a class="el" href="classsf_1_1RenderTarget.htm#9495774c371e0dd9ad9835ad2f34a03a">sf::RenderTarget</a>.</p>

<p>Definition at line <a class="el" href="RenderWindow_8cpp-source.htm#l00098">98</a> of file <a class="el" href="RenderWindow_8cpp-source.htm">RenderWindow.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="49db47a79ca98b7d65087adeea06e919"></a><!-- doxytag: member="sf::RenderWindow::GetInput" ref="49db47a79ca98b7d65087adeea06e919" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Input.htm">Input</a> &amp; sf::Window::GetInput           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the input manager of the window. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Reference to the input </dd></dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00376">376</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="27321006595f9f6a482b26b13800695f"></a><!-- doxytag: member="sf::RenderWindow::GetSettings" ref="27321006595f9f6a482b26b13800695f" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a> &amp; sf::Window::GetSettings           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the creation settings of the window. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Structure containing the creation settings </dd></dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00209">209</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="d426b7ba51cc6970fb828a2bef020274"></a><!-- doxytag: member="sf::RenderWindow::GetView" ref="d426b7ba51cc6970fb828a2bef020274" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1View.htm">View</a> &amp; sf::RenderTarget::GetView           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the current view. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Current view active in the window </dd></dl>

<p>Definition at line <a class="el" href="RenderTarget_8cpp-source.htm#l00138">138</a> of file <a class="el" href="RenderTarget_8cpp-source.htm">RenderTarget.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="e2b04f655a655b7c4bfac22958266e0c"></a><!-- doxytag: member="sf::RenderWindow::GetWidth" ref="e2b04f655a655b7c4bfac22958266e0c" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int sf::RenderWindow::GetWidth           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the width of the rendering region of the window. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Width in pixels </dd></dl>

<p>Implements <a class="el" href="classsf_1_1RenderTarget.htm#4df749ecfddb5355d8357afe719cf681">sf::RenderTarget</a>.</p>

<p>Definition at line <a class="el" href="RenderWindow_8cpp-source.htm#l00089">89</a> of file <a class="el" href="RenderWindow_8cpp-source.htm">RenderWindow.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="3d9265548b6903ab7f645d12177bba24"></a><!-- doxytag: member="sf::RenderWindow::Initialize" ref="3d9265548b6903ab7f645d12177bba24" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::RenderTarget::Initialize           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Called by the derived class when it's ready to be initialized. 
<p>

<p>Definition at line <a class="el" href="RenderTarget_8cpp-source.htm#l00170">170</a> of file <a class="el" href="RenderTarget_8cpp-source.htm">RenderTarget.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="5c4c82e1fdb4252108314fcbe462ad8d"></a><!-- doxytag: member="sf::RenderWindow::IsOpened" ref="5c4c82e1fdb4252108314fcbe462ad8d" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Window::IsOpened           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Tell whether or not the window is opened (ie. 
<p>
has been created). Note that a hidden window (Show(false)) will still return true<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if the window is opened</dd></dl>
has been created). Note that a hidden window (Show(false)) will still return true 
<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00182">182</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="b763d16f00166b516fead600d8824c71"></a><!-- doxytag: member="sf::RenderWindow::PreserveOpenGLStates" ref="b763d16f00166b516fead600d8824c71" args="(bool Preserve)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::RenderTarget::PreserveOpenGLStates           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>Preserve</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Tell SFML to preserve external OpenGL states, at the expense of more CPU charge. 
<p>
Tell SFML to preserve external OpenGL states, at the expense of more CPU charge.<p>
Use this function if you don't want SFML to mess up your own OpenGL states (if any). Don't enable state preservation if not needed, as it will allow SFML to do internal optimizations and improve performances. This parameter is false by default<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Preserve</em>&nbsp;</td><td>: True to preserve OpenGL states, false to let SFML optimize</td></tr>
  </table>
</dl>
Use this function if you don't want SFML to mess up your own OpenGL states (if any). Don't enable state preservation if not needed, as it will allow SFML to do internal optimizations and improve performances. This parameter is false by default 
<p>Definition at line <a class="el" href="RenderTarget_8cpp-source.htm#l00161">161</a> of file <a class="el" href="RenderTarget_8cpp-source.htm">RenderTarget.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="9fc1e745594d5cf6a30225ec9ea36675"></a><!-- doxytag: member="sf::RenderWindow::SetActive" ref="9fc1e745594d5cf6a30225ec9ea36675" args="(bool Active=true) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Window::SetActive           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>Active</em> = <code>true</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Activate of deactivate the window as the current target for rendering. 
<p>
Activate of deactivate the window as the current target for rendering.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Active</em>&nbsp;</td><td>: True to activate, false to deactivate (true by default)</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if operation was successful, false otherwise </dd></dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00338">338</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="369d1764893c6fde8979fcf04142dc55"></a><!-- doxytag: member="sf::RenderWindow::SetCursorPosition" ref="369d1764893c6fde8979fcf04142dc55" args="(unsigned int Left, unsigned int Top)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::SetCursorPosition           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Top</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Change the position of the mouse cursor. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Left</em>&nbsp;</td><td>: Left coordinate of the cursor, relative to the window </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Top</em>&nbsp;</td><td>: Top coordinate of the cursor, relative to the window </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00260">260</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="5544031f1d2965c00532fb5660763f33"></a><!-- doxytag: member="sf::RenderWindow::SetFramerateLimit" ref="5544031f1d2965c00532fb5660763f33" args="(unsigned int Limit)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::SetFramerateLimit           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Limit</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Limit the framerate to a maximum fixed frequency. 
<p>
Set the framerate at a fixed frequency.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Limit</em>&nbsp;</td><td>: Framerate limit, in frames per seconds (use 0 to disable limit) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00385">385</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="36fa09e52af66878b8b826457b8f1dfa"></a><!-- doxytag: member="sf::RenderWindow::SetIcon" ref="36fa09e52af66878b8b826457b8f1dfa" args="(unsigned int Width, unsigned int Height, const Uint8 *Pixels)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::SetIcon           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Uint8 *&nbsp;</td>
          <td class="paramname"> <em>Pixels</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Change the window's icon. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Width</em>&nbsp;</td><td>: Icon's width, in pixels </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Height</em>&nbsp;</td><td>: Icon's height, in pixels </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Pixels</em>&nbsp;</td><td>: Pointer to the pixels in memory, format must be RGBA 32 bits </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00327">327</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="d685eed68b85a66c8000a08e9a28aa91"></a><!-- doxytag: member="sf::RenderWindow::SetJoystickThreshold" ref="d685eed68b85a66c8000a08e9a28aa91" args="(float Threshold)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::SetJoystickThreshold           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Threshold</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Change the joystick threshold, ie. 
<p>
the value below which no move event will be generated<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Threshold</em>&nbsp;</td><td>: New threshold, in range [0, 100]</td></tr>
  </table>
</dl>
the value below which no move event will be generated 
<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00404">404</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="3a6d2908a624a8afda4b2fdd9ef46058"></a><!-- doxytag: member="sf::RenderWindow::SetPosition" ref="3a6d2908a624a8afda4b2fdd9ef46058" args="(int Left, int Top)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::SetPosition           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>Left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>Top</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Change the position of the window on screen. 
<p>
Only works for top-level windows<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Left</em>&nbsp;</td><td>: Left position </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Top</em>&nbsp;</td><td>: Top position </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00276">276</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="dc4461bfaa9b4ff0fd0364a5079a47ef"></a><!-- doxytag: member="sf::RenderWindow::SetSize" ref="dc4461bfaa9b4ff0fd0364a5079a47ef" args="(unsigned int Width, unsigned int Height)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::SetSize           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Height</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Change the size of the rendering region of the window. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Width</em>&nbsp;</td><td>: New width </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Height</em>&nbsp;</td><td>: New height </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00293">293</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="7060ca19e685d8d5b7c6f5dd9b5906e1"></a><!-- doxytag: member="sf::RenderWindow::SetView" ref="7060ca19e685d8d5b7c6f5dd9b5906e1" args="(const View &amp;NewView)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::RenderTarget::SetView           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1View.htm">View</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>NewView</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Change the current active view. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>NewView</em>&nbsp;</td><td>: New view to use (pass <a class="el" href="classsf_1_1RenderTarget.htm#16db9179a7f035c59b8ecdd10cc2e699" title="Get the default view of the window for read / write.">GetDefaultView()</a> to set the default view) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="RenderTarget_8cpp-source.htm#l00129">129</a> of file <a class="el" href="RenderTarget_8cpp-source.htm">RenderTarget.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="727c01602c86710fd935f9892946b2de"></a><!-- doxytag: member="sf::RenderWindow::Show" ref="727c01602c86710fd935f9892946b2de" args="(bool State)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::Show           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>State</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Show or hide the window. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>State</em>&nbsp;</td><td>: True to show, false to hide </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00303">303</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="6142e38cb60901e6604284425714f3f0"></a><!-- doxytag: member="sf::RenderWindow::ShowMouseCursor" ref="6142e38cb60901e6604284425714f3f0" args="(bool Show)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::ShowMouseCursor           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>Show</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Show or hide the mouse cursor. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Show</em>&nbsp;</td><td>: True to show, false to hide </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00250">250</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="cb8391cc93ff730288e2a8dd6b0bb7b5"></a><!-- doxytag: member="sf::RenderWindow::UseVerticalSync" ref="cb8391cc93ff730288e2a8dd6b0bb7b5" args="(bool Enabled)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::UseVerticalSync           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>Enabled</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Enable / disable vertical synchronization. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Enabled</em>&nbsp;</td><td>: True to enable v-sync, false to deactivate </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00240">240</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="RenderWindow_8hpp-source.htm">RenderWindow.hpp</a><li><a class="el" href="RenderWindow_8cpp-source.htm">RenderWindow.cpp</a></ul>
</div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
