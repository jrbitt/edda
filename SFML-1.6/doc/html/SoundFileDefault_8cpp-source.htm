<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>SoundFileDefault.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Audio/SoundFileDefault.hpp&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="keyword">namespace </span>sf
<a name="l00034"></a>00034 {
<a name="l00035"></a>00035 <span class="keyword">namespace </span>priv
<a name="l00036"></a>00036 {
<a name="l00040"></a>00040 SoundFileDefault::SoundFileDefault() :
<a name="l00041"></a>00041 myFile(NULL)
<a name="l00042"></a>00042 {
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 }
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 
<a name="l00050"></a>00050 SoundFileDefault::~SoundFileDefault()
<a name="l00051"></a>00051 {
<a name="l00052"></a>00052     <span class="keywordflow">if</span> (myFile)
<a name="l00053"></a>00053         sf_close(myFile);
<a name="l00054"></a>00054 }
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 
<a name="l00060"></a>00060 <span class="keywordtype">bool</span> SoundFileDefault::IsFileSupported(<span class="keyword">const</span> std::string&amp; Filename, <span class="keywordtype">bool</span> Read)
<a name="l00061"></a>00061 {
<a name="l00062"></a>00062     <span class="keywordflow">if</span> (Read)
<a name="l00063"></a>00063     {
<a name="l00064"></a>00064         <span class="comment">// Open the sound file</span>
<a name="l00065"></a>00065         SF_INFO FileInfos;
<a name="l00066"></a>00066         SNDFILE* File = sf_open(Filename.c_str(), SFM_READ, &amp;FileInfos);
<a name="l00067"></a>00067 
<a name="l00068"></a>00068         <span class="keywordflow">if</span> (File)
<a name="l00069"></a>00069         {
<a name="l00070"></a>00070             sf_close(File);
<a name="l00071"></a>00071             <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00072"></a>00072         }
<a name="l00073"></a>00073         <span class="keywordflow">else</span>
<a name="l00074"></a>00074         {
<a name="l00075"></a>00075             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00076"></a>00076         }
<a name="l00077"></a>00077     }
<a name="l00078"></a>00078     <span class="keywordflow">else</span>
<a name="l00079"></a>00079     {
<a name="l00080"></a>00080         <span class="comment">// Check the extension</span>
<a name="l00081"></a>00081         <span class="keywordflow">return</span> GetFormatFromFilename(Filename) != -1;
<a name="l00082"></a>00082     }
<a name="l00083"></a>00083 }
<a name="l00084"></a>00084 
<a name="l00085"></a>00085 
<a name="l00089"></a>00089 <span class="keywordtype">bool</span> SoundFileDefault::IsFileSupported(<span class="keyword">const</span> <span class="keywordtype">char</span>* Data, std::size_t SizeInBytes)
<a name="l00090"></a>00090 {
<a name="l00091"></a>00091     <span class="comment">// Define the I/O custom functions for reading from memory</span>
<a name="l00092"></a>00092     SF_VIRTUAL_IO VirtualIO;
<a name="l00093"></a>00093     VirtualIO.get_filelen = &amp;SoundFileDefault::MemoryGetLength;
<a name="l00094"></a>00094     VirtualIO.read        = &amp;SoundFileDefault::MemoryRead;
<a name="l00095"></a>00095     VirtualIO.seek        = &amp;SoundFileDefault::MemorySeek;
<a name="l00096"></a>00096     VirtualIO.tell        = &amp;SoundFileDefault::MemoryTell;
<a name="l00097"></a>00097     VirtualIO.write       = &amp;SoundFileDefault::MemoryWrite;
<a name="l00098"></a>00098 
<a name="l00099"></a>00099     <span class="comment">// Initialize the memory data</span>
<a name="l00100"></a>00100     MemoryInfos Memory;
<a name="l00101"></a>00101     Memory.DataStart = Data;
<a name="l00102"></a>00102     Memory.DataPtr   = Data;
<a name="l00103"></a>00103     Memory.TotalSize = SizeInBytes;
<a name="l00104"></a>00104 
<a name="l00105"></a>00105     <span class="comment">// Open the sound file</span>
<a name="l00106"></a>00106     SF_INFO FileInfos;
<a name="l00107"></a>00107     SNDFILE* File = sf_open_virtual(&amp;VirtualIO, SFM_READ, &amp;FileInfos, &amp;Memory);
<a name="l00108"></a>00108 
<a name="l00109"></a>00109     <span class="keywordflow">if</span> (File)
<a name="l00110"></a>00110     {
<a name="l00111"></a>00111         sf_close(File);
<a name="l00112"></a>00112         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00113"></a>00113     }
<a name="l00114"></a>00114     <span class="keywordflow">else</span>
<a name="l00115"></a>00115     {
<a name="l00116"></a>00116         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00117"></a>00117     }
<a name="l00118"></a>00118 }
<a name="l00119"></a>00119 
<a name="l00120"></a>00120 
<a name="l00124"></a>00124 <span class="keywordtype">bool</span> SoundFileDefault::OpenRead(<span class="keyword">const</span> std::string&amp; Filename, std::size_t&amp; NbSamples, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&amp; ChannelsCount, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&amp; SampleRate)
<a name="l00125"></a>00125 {
<a name="l00126"></a>00126     <span class="comment">// If the file is already opened, first close it</span>
<a name="l00127"></a>00127     <span class="keywordflow">if</span> (myFile)
<a name="l00128"></a>00128         sf_close(myFile);
<a name="l00129"></a>00129 
<a name="l00130"></a>00130     <span class="comment">// Open the sound file</span>
<a name="l00131"></a>00131     SF_INFO FileInfos;
<a name="l00132"></a>00132     myFile = sf_open(Filename.c_str(), SFM_READ, &amp;FileInfos);
<a name="l00133"></a>00133     <span class="keywordflow">if</span> (!myFile)
<a name="l00134"></a>00134     {
<a name="l00135"></a>00135         std::cerr &lt;&lt; <span class="stringliteral">"Failed to read sound file \""</span> &lt;&lt; Filename &lt;&lt; <span class="stringliteral">"\""</span> &lt;&lt; std::endl;
<a name="l00136"></a>00136         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00137"></a>00137     }
<a name="l00138"></a>00138 
<a name="l00139"></a>00139     <span class="comment">// Set the sound parameters</span>
<a name="l00140"></a>00140     ChannelsCount = FileInfos.channels;
<a name="l00141"></a>00141     SampleRate    = FileInfos.samplerate;
<a name="l00142"></a>00142     NbSamples     = <span class="keyword">static_cast&lt;</span>std::size_t<span class="keyword">&gt;</span>(FileInfos.frames) * ChannelsCount;
<a name="l00143"></a>00143 
<a name="l00144"></a>00144     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00145"></a>00145 }
<a name="l00146"></a>00146 
<a name="l00147"></a>00147 
<a name="l00151"></a>00151 <span class="keywordtype">bool</span> SoundFileDefault::OpenRead(<span class="keyword">const</span> <span class="keywordtype">char</span>* Data, std::size_t SizeInBytes, std::size_t&amp; NbSamples, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&amp; ChannelsCount, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&amp; SampleRate)
<a name="l00152"></a>00152 {
<a name="l00153"></a>00153     <span class="comment">// If the file is already opened, first close it</span>
<a name="l00154"></a>00154     <span class="keywordflow">if</span> (myFile)
<a name="l00155"></a>00155         sf_close(myFile);
<a name="l00156"></a>00156 
<a name="l00157"></a>00157     <span class="comment">// Define the I/O custom functions for reading from memory</span>
<a name="l00158"></a>00158     SF_VIRTUAL_IO VirtualIO;
<a name="l00159"></a>00159     VirtualIO.get_filelen = &amp;SoundFileDefault::MemoryGetLength;
<a name="l00160"></a>00160     VirtualIO.read        = &amp;SoundFileDefault::MemoryRead;
<a name="l00161"></a>00161     VirtualIO.seek        = &amp;SoundFileDefault::MemorySeek;
<a name="l00162"></a>00162     VirtualIO.tell        = &amp;SoundFileDefault::MemoryTell;
<a name="l00163"></a>00163     VirtualIO.write       = &amp;SoundFileDefault::MemoryWrite;
<a name="l00164"></a>00164 
<a name="l00165"></a>00165     <span class="comment">// Initialize the memory data</span>
<a name="l00166"></a>00166     myMemory.DataStart = Data;
<a name="l00167"></a>00167     myMemory.DataPtr   = Data;
<a name="l00168"></a>00168     myMemory.TotalSize = SizeInBytes;
<a name="l00169"></a>00169 
<a name="l00170"></a>00170     <span class="comment">// Open the sound file</span>
<a name="l00171"></a>00171     SF_INFO FileInfos;
<a name="l00172"></a>00172     myFile = sf_open_virtual(&amp;VirtualIO, SFM_READ, &amp;FileInfos, &amp;myMemory);
<a name="l00173"></a>00173     <span class="keywordflow">if</span> (!myFile)
<a name="l00174"></a>00174     {
<a name="l00175"></a>00175         std::cerr &lt;&lt; <span class="stringliteral">"Failed to read sound file from memory"</span> &lt;&lt; std::endl;
<a name="l00176"></a>00176         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00177"></a>00177     }
<a name="l00178"></a>00178 
<a name="l00179"></a>00179     <span class="comment">// Set the sound parameters</span>
<a name="l00180"></a>00180     ChannelsCount = FileInfos.channels;
<a name="l00181"></a>00181     SampleRate    = FileInfos.samplerate;
<a name="l00182"></a>00182     NbSamples     = <span class="keyword">static_cast&lt;</span>std::size_t<span class="keyword">&gt;</span>(FileInfos.frames) * ChannelsCount;
<a name="l00183"></a>00183 
<a name="l00184"></a>00184     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00185"></a>00185 }
<a name="l00186"></a>00186 
<a name="l00187"></a>00187 
<a name="l00191"></a>00191 <span class="keywordtype">bool</span> SoundFileDefault::OpenWrite(<span class="keyword">const</span> std::string&amp; Filename, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ChannelsCount, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> SampleRate)
<a name="l00192"></a>00192 {
<a name="l00193"></a>00193     <span class="comment">// If the file is already opened, first close it</span>
<a name="l00194"></a>00194     <span class="keywordflow">if</span> (myFile)
<a name="l00195"></a>00195         sf_close(myFile);
<a name="l00196"></a>00196 
<a name="l00197"></a>00197     <span class="comment">// Find the right format according to the file extension</span>
<a name="l00198"></a>00198     <span class="keywordtype">int</span> Format = GetFormatFromFilename(Filename);
<a name="l00199"></a>00199     <span class="keywordflow">if</span> (Format == -1)
<a name="l00200"></a>00200     {
<a name="l00201"></a>00201         <span class="comment">// Error : unrecognized extension</span>
<a name="l00202"></a>00202         std::cerr &lt;&lt; <span class="stringliteral">"Failed to create sound file \""</span> &lt;&lt; Filename &lt;&lt; <span class="stringliteral">"\" : unknown format"</span> &lt;&lt; std::endl;
<a name="l00203"></a>00203         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00204"></a>00204     }
<a name="l00205"></a>00205 
<a name="l00206"></a>00206     <span class="comment">// Fill the sound infos with parameters</span>
<a name="l00207"></a>00207     SF_INFO FileInfos;
<a name="l00208"></a>00208     FileInfos.channels   = ChannelsCount;
<a name="l00209"></a>00209     FileInfos.samplerate = SampleRate;
<a name="l00210"></a>00210     FileInfos.format     = Format | SF_FORMAT_PCM_16;
<a name="l00211"></a>00211 
<a name="l00212"></a>00212     <span class="comment">// Open the sound file for writing</span>
<a name="l00213"></a>00213     myFile = sf_open(Filename.c_str(), SFM_WRITE, &amp;FileInfos);
<a name="l00214"></a>00214     <span class="keywordflow">if</span> (!myFile)
<a name="l00215"></a>00215     {
<a name="l00216"></a>00216         std::cerr &lt;&lt; <span class="stringliteral">"Failed to create sound file \""</span> &lt;&lt; Filename &lt;&lt; <span class="stringliteral">"\""</span> &lt;&lt; std::endl;
<a name="l00217"></a>00217         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00218"></a>00218     }
<a name="l00219"></a>00219 
<a name="l00220"></a>00220     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00221"></a>00221 }
<a name="l00222"></a>00222 
<a name="l00223"></a>00223 
<a name="l00227"></a>00227 std::size_t SoundFileDefault::Read(Int16* Data, std::size_t NbSamples)
<a name="l00228"></a>00228 {
<a name="l00229"></a>00229     <span class="keywordflow">if</span> (myFile &amp;&amp; Data &amp;&amp; NbSamples)
<a name="l00230"></a>00230         <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>std::size_t<span class="keyword">&gt;</span>(sf_read_short(myFile, Data, NbSamples));
<a name="l00231"></a>00231     <span class="keywordflow">else</span>
<a name="l00232"></a>00232         <span class="keywordflow">return</span> 0;
<a name="l00233"></a>00233 }
<a name="l00234"></a>00234 
<a name="l00235"></a>00235 
<a name="l00239"></a>00239 <span class="keywordtype">void</span> SoundFileDefault::Write(<span class="keyword">const</span> Int16* Data, std::size_t NbSamples)
<a name="l00240"></a>00240 {
<a name="l00241"></a>00241     <span class="keywordflow">if</span> (myFile &amp;&amp; Data &amp;&amp; NbSamples)
<a name="l00242"></a>00242         sf_write_short(myFile, Data, NbSamples);
<a name="l00243"></a>00243 }
<a name="l00244"></a>00244 
<a name="l00245"></a>00245 
<a name="l00250"></a>00250 <span class="keywordtype">int</span> SoundFileDefault::GetFormatFromFilename(<span class="keyword">const</span> std::string&amp; Filename)
<a name="l00251"></a>00251 {
<a name="l00252"></a>00252     <span class="comment">// Extract the extension</span>
<a name="l00253"></a>00253     std::string Ext = <span class="stringliteral">"wav"</span>;
<a name="l00254"></a>00254     std::string::size_type Pos = Filename.find_last_of(<span class="stringliteral">"."</span>);
<a name="l00255"></a>00255     <span class="keywordflow">if</span> (Pos != std::string::npos)
<a name="l00256"></a>00256         Ext = Filename.substr(Pos + 1);
<a name="l00257"></a>00257 
<a name="l00258"></a>00258     <span class="comment">// Match every supported extension with its format constant</span>
<a name="l00259"></a>00259     <span class="keywordflow">if</span> (Ext == <span class="stringliteral">"wav"</span>  || Ext == <span class="stringliteral">"WAV"</span> ) <span class="keywordflow">return</span> SF_FORMAT_WAV;
<a name="l00260"></a>00260     <span class="keywordflow">if</span> (Ext == <span class="stringliteral">"aif"</span>  || Ext == <span class="stringliteral">"AIF"</span> ) <span class="keywordflow">return</span> SF_FORMAT_AIFF;
<a name="l00261"></a>00261     <span class="keywordflow">if</span> (Ext == <span class="stringliteral">"aiff"</span> || Ext == <span class="stringliteral">"AIFF"</span>) <span class="keywordflow">return</span> SF_FORMAT_AIFF;
<a name="l00262"></a>00262     <span class="keywordflow">if</span> (Ext == <span class="stringliteral">"au"</span>   || Ext == <span class="stringliteral">"AU"</span>  ) <span class="keywordflow">return</span> SF_FORMAT_AU;
<a name="l00263"></a>00263     <span class="keywordflow">if</span> (Ext == <span class="stringliteral">"raw"</span>  || Ext == <span class="stringliteral">"RAW"</span> ) <span class="keywordflow">return</span> SF_FORMAT_RAW;
<a name="l00264"></a>00264     <span class="keywordflow">if</span> (Ext == <span class="stringliteral">"paf"</span>  || Ext == <span class="stringliteral">"PAF"</span> ) <span class="keywordflow">return</span> SF_FORMAT_PAF;
<a name="l00265"></a>00265     <span class="keywordflow">if</span> (Ext == <span class="stringliteral">"svx"</span>  || Ext == <span class="stringliteral">"SVX"</span> ) <span class="keywordflow">return</span> SF_FORMAT_SVX;
<a name="l00266"></a>00266     <span class="keywordflow">if</span> (Ext == <span class="stringliteral">"voc"</span>  || Ext == <span class="stringliteral">"VOC"</span> ) <span class="keywordflow">return</span> SF_FORMAT_VOC;
<a name="l00267"></a>00267     <span class="keywordflow">if</span> (Ext == <span class="stringliteral">"sf"</span>   || Ext == <span class="stringliteral">"SF"</span>  ) <span class="keywordflow">return</span> SF_FORMAT_IRCAM;
<a name="l00268"></a>00268     <span class="keywordflow">if</span> (Ext == <span class="stringliteral">"w64"</span>  || Ext == <span class="stringliteral">"W64"</span> ) <span class="keywordflow">return</span> SF_FORMAT_W64;
<a name="l00269"></a>00269     <span class="keywordflow">if</span> (Ext == <span class="stringliteral">"mat4"</span> || Ext == <span class="stringliteral">"MAT4"</span>) <span class="keywordflow">return</span> SF_FORMAT_MAT4;
<a name="l00270"></a>00270     <span class="keywordflow">if</span> (Ext == <span class="stringliteral">"mat5"</span> || Ext == <span class="stringliteral">"MAT5"</span>) <span class="keywordflow">return</span> SF_FORMAT_MAT5;
<a name="l00271"></a>00271     <span class="keywordflow">if</span> (Ext == <span class="stringliteral">"pvf"</span>  || Ext == <span class="stringliteral">"PVF"</span> ) <span class="keywordflow">return</span> SF_FORMAT_PVF;
<a name="l00272"></a>00272     <span class="keywordflow">if</span> (Ext == <span class="stringliteral">"htk"</span>  || Ext == <span class="stringliteral">"HTK"</span> ) <span class="keywordflow">return</span> SF_FORMAT_HTK;
<a name="l00273"></a>00273     <span class="keywordflow">if</span> (Ext == <span class="stringliteral">"caf"</span>  || Ext == <span class="stringliteral">"CAF"</span> ) <span class="keywordflow">return</span> SF_FORMAT_CAF;
<a name="l00274"></a>00274     <span class="keywordflow">if</span> (Ext == <span class="stringliteral">"nist"</span> || Ext == <span class="stringliteral">"NIST"</span>) <span class="keywordflow">return</span> SF_FORMAT_NIST; <span class="comment">// SUPPORTED ?</span>
<a name="l00275"></a>00275     <span class="keywordflow">if</span> (Ext == <span class="stringliteral">"sds"</span>  || Ext == <span class="stringliteral">"SDS"</span> ) <span class="keywordflow">return</span> SF_FORMAT_SDS;  <span class="comment">// SUPPORTED ?</span>
<a name="l00276"></a>00276     <span class="keywordflow">if</span> (Ext == <span class="stringliteral">"avr"</span>  || Ext == <span class="stringliteral">"AVR"</span> ) <span class="keywordflow">return</span> SF_FORMAT_AVR;  <span class="comment">// SUPPORTED ?</span>
<a name="l00277"></a>00277     <span class="keywordflow">if</span> (Ext == <span class="stringliteral">"sd2"</span>  || Ext == <span class="stringliteral">"SD2"</span> ) <span class="keywordflow">return</span> SF_FORMAT_SD2;  <span class="comment">// SUPPORTED ?</span>
<a name="l00278"></a>00278     <span class="keywordflow">if</span> (Ext == <span class="stringliteral">"flac"</span> || Ext == <span class="stringliteral">"FLAC"</span>) <span class="keywordflow">return</span> SF_FORMAT_FLAC; <span class="comment">// SUPPORTED ?</span>
<a name="l00279"></a>00279 
<a name="l00280"></a>00280     <span class="keywordflow">return</span> -1;
<a name="l00281"></a>00281 }
<a name="l00282"></a>00282 
<a name="l00283"></a>00283 
<a name="l00288"></a>00288 sf_count_t SoundFileDefault::MemoryGetLength(<span class="keywordtype">void</span>* UserData)
<a name="l00289"></a>00289 {
<a name="l00290"></a>00290     MemoryInfos* Memory = <span class="keyword">static_cast&lt;</span>MemoryInfos*<span class="keyword">&gt;</span>(UserData);
<a name="l00291"></a>00291 
<a name="l00292"></a>00292     <span class="keywordflow">return</span> Memory-&gt;TotalSize;
<a name="l00293"></a>00293 }
<a name="l00294"></a>00294 sf_count_t SoundFileDefault::MemoryRead(<span class="keywordtype">void</span>* Ptr, sf_count_t Count, <span class="keywordtype">void</span>* UserData)
<a name="l00295"></a>00295 {
<a name="l00296"></a>00296     MemoryInfos* Memory = <span class="keyword">static_cast&lt;</span>MemoryInfos*<span class="keyword">&gt;</span>(UserData);
<a name="l00297"></a>00297 
<a name="l00298"></a>00298     sf_count_t Position = Memory-&gt;DataPtr - Memory-&gt;DataStart;
<a name="l00299"></a>00299     <span class="keywordflow">if</span> (Position + Count &gt;= Memory-&gt;TotalSize)
<a name="l00300"></a>00300         Count = Memory-&gt;TotalSize - Position;
<a name="l00301"></a>00301 
<a name="l00302"></a>00302     memcpy(Ptr, Memory-&gt;DataPtr, static_cast&lt;std::size_t&gt;(Count));
<a name="l00303"></a>00303 
<a name="l00304"></a>00304     Memory-&gt;DataPtr += Count;
<a name="l00305"></a>00305 
<a name="l00306"></a>00306     <span class="keywordflow">return</span> Count;
<a name="l00307"></a>00307 }
<a name="l00308"></a>00308 sf_count_t SoundFileDefault::MemorySeek(sf_count_t Offset, <span class="keywordtype">int</span> Whence, <span class="keywordtype">void</span>* UserData)
<a name="l00309"></a>00309 {
<a name="l00310"></a>00310     MemoryInfos* Memory = <span class="keyword">static_cast&lt;</span>MemoryInfos*<span class="keyword">&gt;</span>(UserData);
<a name="l00311"></a>00311 
<a name="l00312"></a>00312     sf_count_t Position = 0;
<a name="l00313"></a>00313     <span class="keywordflow">switch</span> (Whence)
<a name="l00314"></a>00314     {
<a name="l00315"></a>00315         <span class="keywordflow">case</span> SEEK_SET :
<a name="l00316"></a>00316             Position = Offset;
<a name="l00317"></a>00317             <span class="keywordflow">break</span>;
<a name="l00318"></a>00318         <span class="keywordflow">case</span> SEEK_CUR :
<a name="l00319"></a>00319             Position = Memory-&gt;DataPtr - Memory-&gt;DataStart + Offset;
<a name="l00320"></a>00320             <span class="keywordflow">break</span>;
<a name="l00321"></a>00321         <span class="keywordflow">case</span> SEEK_END :
<a name="l00322"></a>00322             Position = Memory-&gt;TotalSize - Offset;
<a name="l00323"></a>00323             <span class="keywordflow">break</span>;
<a name="l00324"></a>00324         <span class="keywordflow">default</span> :
<a name="l00325"></a>00325             Position = 0;
<a name="l00326"></a>00326             <span class="keywordflow">break</span>;
<a name="l00327"></a>00327     }
<a name="l00328"></a>00328 
<a name="l00329"></a>00329     <span class="keywordflow">if</span> (Position &gt;= Memory-&gt;TotalSize)
<a name="l00330"></a>00330         Position = Memory-&gt;TotalSize - 1;
<a name="l00331"></a>00331     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (Position &lt; 0)
<a name="l00332"></a>00332         Position = 0;
<a name="l00333"></a>00333 
<a name="l00334"></a>00334     Memory-&gt;DataPtr = Memory-&gt;DataStart + Position;
<a name="l00335"></a>00335 
<a name="l00336"></a>00336     <span class="keywordflow">return</span> Position;
<a name="l00337"></a>00337 }
<a name="l00338"></a>00338 sf_count_t SoundFileDefault::MemoryTell(<span class="keywordtype">void</span>* UserData)
<a name="l00339"></a>00339 {
<a name="l00340"></a>00340     MemoryInfos* Memory = <span class="keyword">static_cast&lt;</span>MemoryInfos*<span class="keyword">&gt;</span>(UserData);
<a name="l00341"></a>00341 
<a name="l00342"></a>00342     <span class="keywordflow">return</span> Memory-&gt;DataPtr - Memory-&gt;DataStart;
<a name="l00343"></a>00343 }
<a name="l00344"></a>00344 sf_count_t SoundFileDefault::MemoryWrite(<span class="keyword">const</span> <span class="keywordtype">void</span>*, sf_count_t, <span class="keywordtype">void</span>*)
<a name="l00345"></a>00345 {
<a name="l00346"></a>00346     <span class="keywordflow">return</span> 0;
<a name="l00347"></a>00347 }
<a name="l00348"></a>00348 
<a name="l00349"></a>00349 
<a name="l00350"></a>00350 } <span class="comment">// namespace priv</span>
<a name="l00351"></a>00351 
<a name="l00352"></a>00352 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
