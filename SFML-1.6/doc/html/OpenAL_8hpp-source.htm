<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>OpenAL.hpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_OPENAL_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_OPENAL_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Config.hpp&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="preprocessor">#if defined(SFML_SYSTEM_MACOS)</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span><span class="preprocessor">#include &lt;OpenAL/al.h&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;OpenAL/alc.h&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#else</span>
<a name="l00037"></a>00037 <span class="preprocessor"></span><span class="preprocessor">#include &lt;AL/al.h&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;AL/alc.h&gt;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#endif</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="keyword">namespace </span>sf
<a name="l00046"></a>00046 {
<a name="l00047"></a>00047 <span class="keyword">namespace </span>priv
<a name="l00048"></a>00048 {
<a name="l00054"></a>00054 <span class="preprocessor">#ifdef SFML_DEBUG</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span>
<a name="l00056"></a>00056     <span class="comment">// If in debug mode, perform a test on every call</span>
<a name="l00057"></a>00057 <span class="preprocessor">    #define ALCheck(Func) ((Func), priv::ALCheckError(__FILE__, __LINE__))</span>
<a name="l00058"></a>00058 <span class="preprocessor"></span>
<a name="l00059"></a>00059 <span class="preprocessor">#else</span>
<a name="l00060"></a>00060 <span class="preprocessor"></span>
<a name="l00061"></a>00061     <span class="comment">// Else, we don't add any overhead</span>
<a name="l00062"></a>00062 <span class="preprocessor">    #define ALCheck(Func) (Func)</span>
<a name="l00063"></a>00063 <span class="preprocessor"></span>
<a name="l00064"></a>00064 <span class="preprocessor">#endif</span>
<a name="l00065"></a>00065 <span class="preprocessor"></span>
<a name="l00066"></a>00066 
<a name="l00071"></a>00071 <span class="keyword">inline</span> <span class="keywordtype">void</span> ALCheckError(<span class="keyword">const</span> std::string&amp; File, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Line)
<a name="l00072"></a>00072 {
<a name="l00073"></a>00073     <span class="comment">// Get the last error</span>
<a name="l00074"></a>00074     ALenum ErrorCode = alGetError();
<a name="l00075"></a>00075 
<a name="l00076"></a>00076     <span class="keywordflow">if</span> (ErrorCode != AL_NO_ERROR)
<a name="l00077"></a>00077     {
<a name="l00078"></a>00078         std::string Error, Desc;
<a name="l00079"></a>00079 
<a name="l00080"></a>00080         <span class="comment">// Decode the error code</span>
<a name="l00081"></a>00081         <span class="keywordflow">switch</span> (ErrorCode)
<a name="l00082"></a>00082         {
<a name="l00083"></a>00083             <span class="keywordflow">case</span> AL_INVALID_NAME :
<a name="l00084"></a>00084             {
<a name="l00085"></a>00085                 Error = <span class="stringliteral">"AL_INVALID_NAME"</span>;
<a name="l00086"></a>00086                 Desc  = <span class="stringliteral">"an unacceptable name has been specified"</span>;
<a name="l00087"></a>00087                 <span class="keywordflow">break</span>;
<a name="l00088"></a>00088             }
<a name="l00089"></a>00089 
<a name="l00090"></a>00090             <span class="keywordflow">case</span> AL_INVALID_ENUM :
<a name="l00091"></a>00091             {
<a name="l00092"></a>00092                 Error = <span class="stringliteral">"AL_INVALID_ENUM"</span>;
<a name="l00093"></a>00093                 Desc  = <span class="stringliteral">"an unacceptable value has been specified for an enumerated argument"</span>;
<a name="l00094"></a>00094                 <span class="keywordflow">break</span>;
<a name="l00095"></a>00095             }
<a name="l00096"></a>00096 
<a name="l00097"></a>00097             <span class="keywordflow">case</span> AL_INVALID_VALUE :
<a name="l00098"></a>00098             {
<a name="l00099"></a>00099                 Error = <span class="stringliteral">"AL_INVALID_VALUE"</span>;
<a name="l00100"></a>00100                 Desc  = <span class="stringliteral">"a numeric argument is out of range"</span>;
<a name="l00101"></a>00101                 <span class="keywordflow">break</span>;
<a name="l00102"></a>00102             }
<a name="l00103"></a>00103 
<a name="l00104"></a>00104             <span class="keywordflow">case</span> AL_INVALID_OPERATION :
<a name="l00105"></a>00105             {
<a name="l00106"></a>00106                 Error = <span class="stringliteral">"AL_INVALID_OPERATION"</span>;
<a name="l00107"></a>00107                 Desc  = <span class="stringliteral">"the specified operation is not allowed in the current state"</span>;
<a name="l00108"></a>00108                 <span class="keywordflow">break</span>;
<a name="l00109"></a>00109             }
<a name="l00110"></a>00110 
<a name="l00111"></a>00111             <span class="keywordflow">case</span> AL_OUT_OF_MEMORY :
<a name="l00112"></a>00112             {
<a name="l00113"></a>00113                 Error = <span class="stringliteral">"AL_OUT_OF_MEMORY"</span>;
<a name="l00114"></a>00114                 Desc  = <span class="stringliteral">"there is not enough memory left to execute the command"</span>;
<a name="l00115"></a>00115                 <span class="keywordflow">break</span>;
<a name="l00116"></a>00116             }
<a name="l00117"></a>00117         }
<a name="l00118"></a>00118 
<a name="l00119"></a>00119         <span class="comment">// Log the error</span>
<a name="l00120"></a>00120         std::cerr &lt;&lt; <span class="stringliteral">"An internal OpenAL call failed in "</span>
<a name="l00121"></a>00121                   &lt;&lt; File.substr(File.find_last_of(<span class="stringliteral">"\\/"</span>) + 1) &lt;&lt; <span class="stringliteral">" ("</span> &lt;&lt; Line &lt;&lt; <span class="stringliteral">") : "</span>
<a name="l00122"></a>00122                   &lt;&lt; Error &lt;&lt; <span class="stringliteral">", "</span> &lt;&lt; Desc
<a name="l00123"></a>00123                   &lt;&lt; std::endl;
<a name="l00124"></a>00124     }
<a name="l00125"></a>00125 }
<a name="l00126"></a>00126 
<a name="l00127"></a>00127 } <span class="comment">// namespace priv</span>
<a name="l00128"></a>00128 
<a name="l00129"></a>00129 } <span class="comment">// namespace sf</span>
<a name="l00130"></a>00130 
<a name="l00131"></a>00131 
<a name="l00132"></a>00132 <span class="preprocessor">#endif // SFML_OPENAL_HPP</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
