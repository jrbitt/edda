<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><b>sf</b>::<a class="el" href="classsf_1_1SoundStream.htm">SoundStream</a>
  </div>
</div>
<div class="contents">
<h1>sf::SoundStream Class Reference</h1><!-- doxytag: class="sf::SoundStream" --><!-- doxytag: inherits="sf::Thread,sf::Sound" --><a class="el" href="classsf_1_1SoundStream.htm" title="SoundStream is a streamed sound, ie samples are acquired while the sound is playing...">SoundStream</a> is a streamed sound, ie samples are acquired while the sound is playing.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="SoundStream_8hpp-source.htm">SoundStream.hpp</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for sf::SoundStream:</div>
<div class="dynsection">

<p><center><img src="classsf_1_1SoundStream.png" usemap="#sf::SoundStream_map" border="0" alt=""></center>
<map name="sf::SoundStream_map">
<area href="classsf_1_1Thread.htm" alt="sf::Thread" shape="rect" coords="0,0,103,24">
<area href="classsf_1_1Sound.htm" alt="sf::Sound" shape="rect" coords="113,0,216,24">
<area href="classsf_1_1Music.htm" alt="sf::Music" shape="rect" coords="56,112,159,136">
</map>
</div>

<p>
<a href="classsf_1_1SoundStream-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Classes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsf_1_1SoundStream_1_1Chunk.htm">Chunk</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Structure defining a chunk of audio data to stream.  <a href="structsf_1_1SoundStream_1_1Chunk.htm#_details">More...</a><br></td></tr>
<tr><td colspan="2"><br><h2>Public Types</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#28ad2186cde78fed2c79c867b9622195">Status</a> </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enumeration of the sound states.  <a href="classsf_1_1SoundStream.htm#28ad2186cde78fed2c79c867b9622195">More...</a><br></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#5b14ec6669440e4dbd5650f0fb6b0674">~SoundStream</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Virtual destructor.  <a href="#5b14ec6669440e4dbd5650f0fb6b0674"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#4d8437ef9a952fe3798bd239ff20d9bf">Play</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Start playing the audio stream.  <a href="#4d8437ef9a952fe3798bd239ff20d9bf"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#53c9e9b160bcbcc89c93c1682b4525df">Stop</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Stop playing the audio stream.  <a href="#53c9e9b160bcbcc89c93c1682b4525df"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#bdcb5c8f3b5884a27e2eb013f5e36858">GetChannelsCount</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Return the number of channels (1 = mono, 2 = stereo).  <a href="#bdcb5c8f3b5884a27e2eb013f5e36858"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#74dabd1177bb60c8bd64bb6bbedb64bc">GetSampleRate</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the stream sample rate.  <a href="#74dabd1177bb60c8bd64bb6bbedb64bc"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classsf_1_1Sound.htm#28ad2186cde78fed2c79c867b9622195">Status</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#cef2468ca4bc3e8ced76b11fb95c7ef2">GetStatus</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the status of the stream (stopped, paused, playing).  <a href="#cef2468ca4bc3e8ced76b11fb95c7ef2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#d11fee9eb4baba68d6ed9f44bc6170ac">GetPlayingOffset</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the current playing position of the stream.  <a href="#d11fee9eb4baba68d6ed9f44bc6170ac"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#1072090152b10d83f43f0cd6bbd82b4e">SetLoop</a> (bool Loop)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the stream loop state.  <a href="#1072090152b10d83f43f0cd6bbd82b4e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#caecb1c68af4a9d75f9e9ad2d42afa78">GetLoop</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Tell whether or not the stream is looping.  <a href="#caecb1c68af4a9d75f9e9ad2d42afa78"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#769d08f4c3c6b4340ef3a838329d2e5c">SoundStream</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Default constructor.  <a href="#769d08f4c3c6b4340ef3a838329d2e5c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#ed9b6b06c0fa9c2d0b8c094eb2826793">Initialize</a> (unsigned int ChannelsCount, unsigned int SampleRate)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the audio stream parameters, you must call it before <a class="el" href="classsf_1_1SoundStream.htm#4d8437ef9a952fe3798bd239ff20d9bf" title="Start playing the audio stream.">Play()</a>.  <a href="#ed9b6b06c0fa9c2d0b8c094eb2826793"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Private Types</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ab6e6f11eb38f106cd7c1149763a11b8"></a><!-- doxytag: member="sf::SoundStream::FuncType" ref="ab6e6f11eb38f106cd7c1149763a11b8" args=")(void *)" -->
typedef void(*&nbsp;</td><td class="memItemRight" valign="bottom"><b>FuncType</b> )(void *)</td></tr>

<tr><td colspan="2"><br><h2>Private Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Thread.htm#046df871f73d3cf452d1c72bcc143642">Launch</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create and run the thread.  <a href="#046df871f73d3cf452d1c72bcc143642"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Thread.htm#67f3c609fdf99688531dbfae461ea4d2">Wait</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Wait until the thread finishes.  <a href="#67f3c609fdf99688531dbfae461ea4d2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Thread.htm#603d9493c6a845188f05c2eca48dc41b">Terminate</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Terminate the thread Terminating a thread with this function is not safe, you should rather try to make the thread function terminate by itself.  <a href="#603d9493c6a845188f05c2eca48dc41b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Sound.htm#6a712910ac1340f32e3ec3a04295ebd3">Pause</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Pause the sound.  <a href="#6a712910ac1340f32e3ec3a04295ebd3"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Sound.htm#9dbc27c54f0ee633c831a0b6e24ecc55">SetBuffer</a> (const <a class="el" href="classsf_1_1SoundBuffer.htm">SoundBuffer</a> &amp;Buffer)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the source buffer.  <a href="#9dbc27c54f0ee633c831a0b6e24ecc55"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Sound.htm#f93301feb88770789ba7cd993c9dd3a0">SetPitch</a> (float Pitch)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the sound pitch.  <a href="#f93301feb88770789ba7cd993c9dd3a0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Sound.htm#1536095045923a2332dd9eed6bf8e96a">SetVolume</a> (float Volume)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the sound volume.  <a href="#1536095045923a2332dd9eed6bf8e96a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Sound.htm#b445e8738218525d8dd067628bc70c78">SetPosition</a> (float X, float Y, float Z)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the sound position (take 3 values).  <a href="#b445e8738218525d8dd067628bc70c78"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Sound.htm#0d8c6f11281a574b781c53d62a4af776">SetPosition</a> (const <a class="el" href="classsf_1_1Vector3.htm">Vector3f</a> &amp;Position)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the sound position (take a 3D vector).  <a href="#0d8c6f11281a574b781c53d62a4af776"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Sound.htm#7604f576d184ba8031789beee96d04d3">SetRelativeToListener</a> (bool Relative)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Make the sound's position relative to the listener's position, or absolute.  <a href="#7604f576d184ba8031789beee96d04d3"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Sound.htm#0a545d8dca68d85a03390f6da7c446a9">SetMinDistance</a> (float MinDistance)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the minimum distance - closer than this distance, the listener will hear the sound at its maximum volume.  <a href="#0a545d8dca68d85a03390f6da7c446a9"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Sound.htm#c3743f1fb53bf9818fbab6e9220bd7b9">SetAttenuation</a> (float Attenuation)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the attenuation factor - the higher the attenuation, the more the sound will be attenuated with distance from listener.  <a href="#c3743f1fb53bf9818fbab6e9220bd7b9"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Sound.htm#e779b4fa3d8d98a1490334dbd32e8d62">SetPlayingOffset</a> (float TimeOffset)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the current playing position of the sound.  <a href="#e779b4fa3d8d98a1490334dbd32e8d62"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1SoundBuffer.htm">SoundBuffer</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Sound.htm#bb46557ecfb32c4538fedad28cc59d9e">GetBuffer</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the source buffer.  <a href="#bb46557ecfb32c4538fedad28cc59d9e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Sound.htm#42333202ed0586f434d852cc35b9d4ef">GetPitch</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the pitch.  <a href="#42333202ed0586f434d852cc35b9d4ef"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Sound.htm#018e78cd6c50d653fffff1005a350782">GetVolume</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the volume.  <a href="#018e78cd6c50d653fffff1005a350782"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classsf_1_1Vector3.htm">Vector3f</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Sound.htm#b1adb173ee12a86f261fb765be050643">GetPosition</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the sound position.  <a href="#b1adb173ee12a86f261fb765be050643"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Sound.htm#f0278152abf6e3f195353ce3c270f34e">IsRelativeToListener</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Tell if the sound's position is relative to the listener's position, or if it's absolute.  <a href="#f0278152abf6e3f195353ce3c270f34e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Sound.htm#07f37119f7b3b00f274ac0263a4bc58b">GetMinDistance</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the minimum distance.  <a href="#07f37119f7b3b00f274ac0263a4bc58b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Sound.htm#f594211c35d6ac7a9df083c226749c42">GetAttenuation</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the attenuation factor.  <a href="#f594211c35d6ac7a9df083c226749c42"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Sound.htm#0fe562f8a52994658398c61796cde331">ResetBuffer</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Reset the internal buffer.  <a href="#0fe562f8a52994658398c61796cde331"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
<a class="el" href="classsf_1_1SoundStream.htm" title="SoundStream is a streamed sound, ie samples are acquired while the sound is playing...">SoundStream</a> is a streamed sound, ie samples are acquired while the sound is playing. 
<p>
Use it for big sounds that would require hundreds of MB in memory (see <a class="el" href="classsf_1_1Music.htm" title="Music defines a big sound played using streaming, so usually what we call a music...">Music</a>), or for streaming sound from the network 
<p>Definition at line <a class="el" href="SoundStream_8hpp-source.htm#l00044">44</a> of file <a class="el" href="SoundStream_8hpp-source.htm">SoundStream.hpp</a>.</p>
<hr><h2>Member Enumeration Documentation</h2>
<a class="anchor" name="28ad2186cde78fed2c79c867b9622195"></a><!-- doxytag: member="sf::SoundStream::Status" ref="28ad2186cde78fed2c79c867b9622195" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classsf_1_1Sound.htm#28ad2186cde78fed2c79c867b9622195">sf::Sound::Status</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Enumeration of the sound states. 
<p>

<p>Definition at line <a class="el" href="Sound_8hpp-source.htm#l00052">52</a> of file <a class="el" href="Sound_8hpp-source.htm">Sound.hpp</a>.</p>

</div>
</div><p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="5b14ec6669440e4dbd5650f0fb6b0674"></a><!-- doxytag: member="sf::SoundStream::~SoundStream" ref="5b14ec6669440e4dbd5650f0fb6b0674" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::SoundStream::~SoundStream           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Virtual destructor. 
<p>

<p>Definition at line <a class="el" href="SoundStream_8cpp-source.htm#l00054">54</a> of file <a class="el" href="SoundStream_8cpp-source.htm">SoundStream.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="769d08f4c3c6b4340ef3a838329d2e5c"></a><!-- doxytag: member="sf::SoundStream::SoundStream" ref="769d08f4c3c6b4340ef3a838329d2e5c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::SoundStream::SoundStream           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Default constructor. 
<p>

<p>Definition at line <a class="el" href="SoundStream_8cpp-source.htm#l00039">39</a> of file <a class="el" href="SoundStream_8cpp-source.htm">SoundStream.cpp</a>.</p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="bdcb5c8f3b5884a27e2eb013f5e36858"></a><!-- doxytag: member="sf::SoundStream::GetChannelsCount" ref="bdcb5c8f3b5884a27e2eb013f5e36858" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int sf::SoundStream::GetChannelsCount           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return the number of channels (1 = mono, 2 = stereo). 
<p>
Return the number of channels (1 = mono, 2 = stereo, .<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Number of channels</dd></dl>
..) 
<p>Definition at line <a class="el" href="SoundStream_8cpp-source.htm#l00126">126</a> of file <a class="el" href="SoundStream_8cpp-source.htm">SoundStream.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="caecb1c68af4a9d75f9e9ad2d42afa78"></a><!-- doxytag: member="sf::SoundStream::GetLoop" ref="caecb1c68af4a9d75f9e9ad2d42afa78" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::SoundStream::GetLoop           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Tell whether or not the stream is looping. 
<p>
Tell whether or not the music is looping.<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if the music is looping, false otherwise </dd></dl>

<p>Reimplemented from <a class="el" href="classsf_1_1Sound.htm#5cdc44ade7bda8db2d0431701d72495e">sf::Sound</a>.</p>

<p>Definition at line <a class="el" href="SoundStream_8cpp-source.htm#l00180">180</a> of file <a class="el" href="SoundStream_8cpp-source.htm">SoundStream.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="d11fee9eb4baba68d6ed9f44bc6170ac"></a><!-- doxytag: member="sf::SoundStream::GetPlayingOffset" ref="d11fee9eb4baba68d6ed9f44bc6170ac" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float sf::SoundStream::GetPlayingOffset           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the current playing position of the stream. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Current playing position, expressed in seconds<p>
Current playing position, expressed in seconds </dd></dl>

<p>Reimplemented from <a class="el" href="classsf_1_1Sound.htm#0e80c736a6865123be0c19e99f36467f">sf::Sound</a>.</p>

<p>Definition at line <a class="el" href="SoundStream_8cpp-source.htm#l00162">162</a> of file <a class="el" href="SoundStream_8cpp-source.htm">SoundStream.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="74dabd1177bb60c8bd64bb6bbedb64bc"></a><!-- doxytag: member="sf::SoundStream::GetSampleRate" ref="74dabd1177bb60c8bd64bb6bbedb64bc" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int sf::SoundStream::GetSampleRate           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the stream sample rate. 
<p>
Get the sound frequency (sample rate).<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Stream frequency (number of samples per second) </dd></dl>

<p>Definition at line <a class="el" href="SoundStream_8cpp-source.htm#l00135">135</a> of file <a class="el" href="SoundStream_8cpp-source.htm">SoundStream.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="cef2468ca4bc3e8ced76b11fb95c7ef2"></a><!-- doxytag: member="sf::SoundStream::GetStatus" ref="cef2468ca4bc3e8ced76b11fb95c7ef2" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Sound.htm#28ad2186cde78fed2c79c867b9622195">Sound::Status</a> sf::SoundStream::GetStatus           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the status of the stream (stopped, paused, playing). 
<p>
Get the status of the sound (stopped, paused, playing).<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Current status of the sound </dd></dl>

<p>Reimplemented from <a class="el" href="classsf_1_1Sound.htm#76c97fca3a5092db606eb66461f063af">sf::Sound</a>.</p>

<p>Definition at line <a class="el" href="SoundStream_8cpp-source.htm#l00144">144</a> of file <a class="el" href="SoundStream_8cpp-source.htm">SoundStream.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="ed9b6b06c0fa9c2d0b8c094eb2826793"></a><!-- doxytag: member="sf::SoundStream::Initialize" ref="ed9b6b06c0fa9c2d0b8c094eb2826793" args="(unsigned int ChannelsCount, unsigned int SampleRate)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::SoundStream::Initialize           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>ChannelsCount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>SampleRate</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the audio stream parameters, you must call it before <a class="el" href="classsf_1_1SoundStream.htm#4d8437ef9a952fe3798bd239ff20d9bf" title="Start playing the audio stream.">Play()</a>. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ChannelsCount</em>&nbsp;</td><td>: Number of channels </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>SampleRate</em>&nbsp;</td><td>: Sample rate </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="SoundStream_8cpp-source.htm#l00064">64</a> of file <a class="el" href="SoundStream_8cpp-source.htm">SoundStream.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="4d8437ef9a952fe3798bd239ff20d9bf"></a><!-- doxytag: member="sf::SoundStream::Play" ref="4d8437ef9a952fe3798bd239ff20d9bf" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::SoundStream::Play           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Start playing the audio stream. 
<p>

<p>Reimplemented from <a class="el" href="classsf_1_1Sound.htm#fdafa7970587f04d3833b4095c2de1db">sf::Sound</a>.</p>

<p>Definition at line <a class="el" href="SoundStream_8cpp-source.htm#l00085">85</a> of file <a class="el" href="SoundStream_8cpp-source.htm">SoundStream.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="1072090152b10d83f43f0cd6bbd82b4e"></a><!-- doxytag: member="sf::SoundStream::SetLoop" ref="1072090152b10d83f43f0cd6bbd82b4e" args="(bool Loop)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::SoundStream::SetLoop           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>Loop</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the stream loop state. 
<p>
Set the music loop state.<p>
This parameter is disabled by default<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Loop</em>&nbsp;</td><td>: True to play in loop, false to play once </td></tr>
  </table>
</dl>

<p>Reimplemented from <a class="el" href="classsf_1_1Sound.htm#4eb9966b7289c69623a39cc0125012f4">sf::Sound</a>.</p>

<p>Definition at line <a class="el" href="SoundStream_8cpp-source.htm#l00171">171</a> of file <a class="el" href="SoundStream_8cpp-source.htm">SoundStream.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="53c9e9b160bcbcc89c93c1682b4525df"></a><!-- doxytag: member="sf::SoundStream::Stop" ref="53c9e9b160bcbcc89c93c1682b4525df" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::SoundStream::Stop           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Stop playing the audio stream. 
<p>

<p>Reimplemented from <a class="el" href="classsf_1_1Sound.htm#b1f5f103f737c52ceb0b1a067b4d0630">sf::Sound</a>.</p>

<p>Definition at line <a class="el" href="SoundStream_8cpp-source.htm#l00115">115</a> of file <a class="el" href="SoundStream_8cpp-source.htm">SoundStream.cpp</a>.</p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="SoundStream_8hpp-source.htm">SoundStream.hpp</a><li><a class="el" href="SoundStream_8cpp-source.htm">SoundStream.cpp</a></ul>
</div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
