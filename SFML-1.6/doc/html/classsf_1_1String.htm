<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><b>sf</b>::<a class="el" href="classsf_1_1String.htm">String</a>
  </div>
</div>
<div class="contents">
<h1>sf::String Class Reference</h1><!-- doxytag: class="sf::String" --><!-- doxytag: inherits="sf::Drawable" --><a class="el" href="classsf_1_1String.htm" title="String defines a graphical 2D text, that can be drawn on screen.">String</a> defines a graphical 2D text, that can be drawn on screen.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="String_8hpp-source.htm">String.hpp</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for sf::String:</div>
<div class="dynsection">

<p><center><img src="classsf_1_1String.png" usemap="#sf::String_map" border="0" alt=""></center>
<map name="sf::String_map">
<area href="classsf_1_1Drawable.htm" alt="sf::Drawable" shape="rect" coords="0,0,82,24">
</map>
</div>

<p>
<a href="classsf_1_1String-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Types</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#eedf6f2453ae7b88ddf0f7427968a6d8">Style</a> { <br>
&nbsp;&nbsp;<a class="el" href="classsf_1_1String.htm#eedf6f2453ae7b88ddf0f7427968a6d809b07e6baa1aabf6a89468eed51c1204">Regular</a> =  0, 
<br>
&nbsp;&nbsp;<a class="el" href="classsf_1_1String.htm#eedf6f2453ae7b88ddf0f7427968a6d80f26252a684f5947bb7fbd58452cb3f0">Bold</a> =  1 &lt;&lt; 0, 
<br>
&nbsp;&nbsp;<a class="el" href="classsf_1_1String.htm#eedf6f2453ae7b88ddf0f7427968a6d860562ce6c8ba01f65aa0551b33c46234">Italic</a> =  1 &lt;&lt; 1, 
<br>
&nbsp;&nbsp;<a class="el" href="classsf_1_1String.htm#eedf6f2453ae7b88ddf0f7427968a6d80f4cd758cb0126a9df3307fe885bae3e">Underlined</a> =  1 &lt;&lt; 2
<br>
 }</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enumerate the string drawing styles.  <a href="classsf_1_1String.htm#eedf6f2453ae7b88ddf0f7427968a6d8">More...</a><br></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#9563a4e93f692e0c8e8702b374ef8692">String</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Default constructor.  <a href="#9563a4e93f692e0c8e8702b374ef8692"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#30f985ba0047a5fbe7f9aca68083212c">String</a> (const <a class="el" href="classsf_1_1Unicode_1_1Text.htm">Unicode::Text</a> &amp;Text, const <a class="el" href="classsf_1_1Font.htm">Font</a> &amp;CharFont=Font::GetDefaultFont(), float Size=30.f)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct the string from any kind of text.  <a href="#30f985ba0047a5fbe7f9aca68083212c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a4b56eae5ca5f6f42c6b1c53c0fa83a8">SetText</a> (const <a class="el" href="classsf_1_1Unicode_1_1Text.htm">Unicode::Text</a> &amp;Text)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the text (from any kind of string).  <a href="#a4b56eae5ca5f6f42c6b1c53c0fa83a8"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#134ccb47176e51916bbe6b0708a21003">SetFont</a> (const <a class="el" href="classsf_1_1Font.htm">Font</a> &amp;CharFont)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the font of the string.  <a href="#134ccb47176e51916bbe6b0708a21003"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#20b0ca616784aa81c64d6af5a0cebafb">SetSize</a> (float Size)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the size of the string The default size is 30.  <a href="#20b0ca616784aa81c64d6af5a0cebafb"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#93846bbdb49ba0171fe4c53eb9a84a6c">SetStyle</a> (unsigned long TextStyle)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the style of the text The default style is Regular.  <a href="#93846bbdb49ba0171fe4c53eb9a84a6c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1Unicode_1_1Text.htm">Unicode::Text</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#97246cca36ef4d5a978b71d9f6f94620">GetText</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the text (the returned text can be converted implicitely to any kind of string).  <a href="#97246cca36ef4d5a978b71d9f6f94620"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1Font.htm">Font</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#6018108988612822d2b3c1b1f57d2f11">GetFont</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the font used by the string.  <a href="#6018108988612822d2b3c1b1f57d2f11"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#d1e689d0ff657da70de23b101b38d9ff">GetSize</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the size of the characters.  <a href="#d1e689d0ff657da70de23b101b38d9ff"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned long&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#61581f8e8a8c8d86debf9364380e33df">GetStyle</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the style of the text.  <a href="#61581f8e8a8c8d86debf9364380e33df"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classsf_1_1Vector2.htm">sf::Vector2f</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#d471fee3d4dda7fefb9ff610d049f210">GetCharacterPos</a> (std::size_t Index) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Return the visual position of the Index-th character of the string, in coordinates relative to the string (note : translation, center, rotation and scale are not applied).  <a href="#d471fee3d4dda7fefb9ff610d049f210"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classsf_1_1Rect.htm">FloatRect</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#1a5283b36b1cfba41d1dcd42ff33002d">GetRect</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the string rectangle on screen.  <a href="#1a5283b36b1cfba41d1dcd42ff33002d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#419da954b1f2ad1ac2ae0b9ab6e72589">SetPosition</a> (float X, float Y)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the position of the object (take 2 values).  <a href="#419da954b1f2ad1ac2ae0b9ab6e72589"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#d2a279f3b13abf57cc25b2b4bd3b81ae">SetPosition</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;Position)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the position of the object (take a 2D vector).  <a href="#d2a279f3b13abf57cc25b2b4bd3b81ae"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#c8de7bfe092736083dcf23b0dbd22b1e">SetX</a> (float X)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the X position of the object.  <a href="#c8de7bfe092736083dcf23b0dbd22b1e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#83fecebe749c1aca9070eafd63e1a0c9">SetY</a> (float Y)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the Y position of the object.  <a href="#83fecebe749c1aca9070eafd63e1a0c9"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#0b486c56c2bd137bac629f72fea66769">SetScale</a> (float ScaleX, float ScaleY)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the scale of the object (take 2 values).  <a href="#0b486c56c2bd137bac629f72fea66769"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#84876c5ef7fa628c85c3c9e000e50aa1">SetScale</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;Scale)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the scale of the object (take a 2D vector).  <a href="#84876c5ef7fa628c85c3c9e000e50aa1"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#0cafae61a1d23bddb059d64df0e1502f">SetScaleX</a> (float FactorX)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the X scale factor of the object.  <a href="#0cafae61a1d23bddb059d64df0e1502f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#89e7793c74c656e5850b71d0ab34b8bf">SetScaleY</a> (float FactorY)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the Y scale factor of the object.  <a href="#89e7793c74c656e5850b71d0ab34b8bf"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#11ba1d92bc863af6d95831d216802f61">SetCenter</a> (float CenterX, float CenterY)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the center of the object, in coordinates relative to the top-left of the object (take 2 values).  <a href="#11ba1d92bc863af6d95831d216802f61"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#235e438555d8161f4995615f24fa0b11">SetCenter</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;Center)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the center of the object, in coordinates relative to the top-left of the object (take a 2D vector).  <a href="#235e438555d8161f4995615f24fa0b11"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#6d06383770eb01ffecf3d1cae6fec0ec">SetRotation</a> (float Rotation)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the orientation of the object.  <a href="#6d06383770eb01ffecf3d1cae6fec0ec"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#8cae9f22220985e368a1b38af7644ffb">SetColor</a> (const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;Col)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the color of the object.  <a href="#8cae9f22220985e368a1b38af7644ffb"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#aa6558b1ae27e29cb825028473707da5">SetBlendMode</a> (<a class="el" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca">Blend::Mode</a> Mode)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the blending mode for the object.  <a href="#aa6558b1ae27e29cb825028473707da5"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#9ad52594fd5e835cbd03b79098d70e0b">GetPosition</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the position of the object.  <a href="#9ad52594fd5e835cbd03b79098d70e0b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#fa4d6b97e7c10a82430ff9ee56009c97">GetScale</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the current scale of the object.  <a href="#fa4d6b97e7c10a82430ff9ee56009c97"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#de634efe8d6264282acc564fa5ea77c0">GetCenter</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the center of the object.  <a href="#de634efe8d6264282acc564fa5ea77c0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#4e82bec096673bccf7ceac5207617017">GetRotation</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the orientation of the object.  <a href="#4e82bec096673bccf7ceac5207617017"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#a2a028c4a975b5ed6d5a560a1c44e0c8">GetColor</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the color of the object.  <a href="#a2a028c4a975b5ed6d5a560a1c44e0c8"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca">Blend::Mode</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#b6446c4717a2800cad85db55cb55409a">GetBlendMode</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the current blending mode.  <a href="#b6446c4717a2800cad85db55cb55409a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#501df9af956362b3e3769d80381c051b">Move</a> (float OffsetX, float OffsetY)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Move the object of a given offset (take 2 values).  <a href="#501df9af956362b3e3769d80381c051b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#3c0ac0851d6b0ebed80ae9641ff93161">Move</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;Offset)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Move the object of a given offset (take a 2D vector).  <a href="#3c0ac0851d6b0ebed80ae9641ff93161"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#2a132c9f2f3736b7d0f6ea80303caacd">Scale</a> (float FactorX, float FactorY)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Scale the object (take 2 values).  <a href="#2a132c9f2f3736b7d0f6ea80303caacd"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#c969d85eaf63f072de9e963bd973e91a">Scale</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;Factor)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Scale the object (take a 2D vector).  <a href="#c969d85eaf63f072de9e963bd973e91a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#3e7d558d0ef488485a2d3f885ff2b419">Rotate</a> (float Angle)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Rotate the object.  <a href="#3e7d558d0ef488485a2d3f885ff2b419"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classsf_1_1Vector2.htm">sf::Vector2f</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#809f25ae0b3a2015ec8a44fe9f5a0008">TransformToLocal</a> (const <a class="el" href="classsf_1_1Vector2.htm">sf::Vector2f</a> &amp;Point) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Transform a point from global coordinates into local coordinates (ie it applies the inverse of object's center, translation, rotation and scale to the point).  <a href="#809f25ae0b3a2015ec8a44fe9f5a0008"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classsf_1_1Vector2.htm">sf::Vector2f</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#fe3cb6e62921ce13806c27dc727f8945">TransformToGlobal</a> (const <a class="el" href="classsf_1_1Vector2.htm">sf::Vector2f</a> &amp;Point) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Transform a point from local coordinates into global coordinates (ie it applies the object's center, translation, rotation and scale to the point).  <a href="#fe3cb6e62921ce13806c27dc727f8945"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#f11de71bf9d73a75c468d1e161181908">Render</a> (<a class="el" href="classsf_1_1RenderTarget.htm">RenderTarget</a> &amp;Target) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">/see Drawable::Render  <a href="#f11de71bf9d73a75c468d1e161181908"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1Matrix3.htm">Matrix3</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#c659a89e42063d13aa9ebe2b534d404e">GetMatrix</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the transform matrix of the drawable.  <a href="#c659a89e42063d13aa9ebe2b534d404e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1Matrix3.htm">Matrix3</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#48238d5726104ba7ddb42f21fc5d5b2f">GetInverseMatrix</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the inverse transform matrix of the drawable.  <a href="#48238d5726104ba7ddb42f21fc5d5b2f"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
<a class="el" href="classsf_1_1String.htm" title="String defines a graphical 2D text, that can be drawn on screen.">String</a> defines a graphical 2D text, that can be drawn on screen. 
<p>Definition at line <a class="el" href="String_8hpp-source.htm#l00044">44</a> of file <a class="el" href="String_8hpp-source.htm">String.hpp</a>.</p>
<hr><h2>Member Enumeration Documentation</h2>
<a class="anchor" name="eedf6f2453ae7b88ddf0f7427968a6d8"></a><!-- doxytag: member="sf::String::Style" ref="eedf6f2453ae7b88ddf0f7427968a6d8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classsf_1_1String.htm#eedf6f2453ae7b88ddf0f7427968a6d8">sf::String::Style</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Enumerate the string drawing styles. 
<p>
<dl compact><dt><b>Enumerator: </b></dt><dd>
<table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" name="eedf6f2453ae7b88ddf0f7427968a6d809b07e6baa1aabf6a89468eed51c1204"></a><!-- doxytag: member="Regular" ref="eedf6f2453ae7b88ddf0f7427968a6d809b07e6baa1aabf6a89468eed51c1204" args="" -->Regular</em>&nbsp;</td><td>
Regular characters, no style. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="eedf6f2453ae7b88ddf0f7427968a6d80f26252a684f5947bb7fbd58452cb3f0"></a><!-- doxytag: member="Bold" ref="eedf6f2453ae7b88ddf0f7427968a6d80f26252a684f5947bb7fbd58452cb3f0" args="" -->Bold</em>&nbsp;</td><td>
Characters are bold. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="eedf6f2453ae7b88ddf0f7427968a6d860562ce6c8ba01f65aa0551b33c46234"></a><!-- doxytag: member="Italic" ref="eedf6f2453ae7b88ddf0f7427968a6d860562ce6c8ba01f65aa0551b33c46234" args="" -->Italic</em>&nbsp;</td><td>
Characters are in italic. </td></tr>
<tr><td valign="top"><em><a class="anchor" name="eedf6f2453ae7b88ddf0f7427968a6d80f4cd758cb0126a9df3307fe885bae3e"></a><!-- doxytag: member="Underlined" ref="eedf6f2453ae7b88ddf0f7427968a6d80f4cd758cb0126a9df3307fe885bae3e" args="" -->Underlined</em>&nbsp;</td><td>
Characters are underlined. </td></tr>
</table>
</dl>

<p>Definition at line <a class="el" href="String_8hpp-source.htm#l00051">51</a> of file <a class="el" href="String_8hpp-source.htm">String.hpp</a>.</p>

</div>
</div><p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="9563a4e93f692e0c8e8702b374ef8692"></a><!-- doxytag: member="sf::String::String" ref="9563a4e93f692e0c8e8702b374ef8692" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::String::String           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Default constructor. 
<p>

<p>Definition at line <a class="el" href="String_8cpp-source.htm#l00039">39</a> of file <a class="el" href="String_8cpp-source.htm">String.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="30f985ba0047a5fbe7f9aca68083212c"></a><!-- doxytag: member="sf::String::String" ref="30f985ba0047a5fbe7f9aca68083212c" args="(const Unicode::Text &amp;Text, const Font &amp;CharFont=Font::GetDefaultFont(), float Size=30.f)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::String::String           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Unicode_1_1Text.htm">Unicode::Text</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Text</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Font.htm">Font</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>CharFont</em> = <code>Font::GetDefaultFont()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Size</em> = <code>30.f</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [explicit]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Construct the string from any kind of text. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Text</em>&nbsp;</td><td>: Text assigned to the string </td></tr>
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="classsf_1_1Font.htm" title="Font is the low-level class for loading and manipulating character fonts.">Font</a></em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Font.htm" title="Font is the low-level class for loading and manipulating character fonts.">Font</a> used to draw the string (SFML built-in font by default) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Size</em>&nbsp;</td><td>: Characters size (30 by default) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="String_8cpp-source.htm#l00052">52</a> of file <a class="el" href="String_8cpp-source.htm">String.cpp</a>.</p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="b6446c4717a2800cad85db55cb55409a"></a><!-- doxytag: member="sf::String::GetBlendMode" ref="b6446c4717a2800cad85db55cb55409a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca">Blend::Mode</a> sf::Drawable::GetBlendMode           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the current blending mode. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Current blending mode </dd></dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00258">258</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="de634efe8d6264282acc564fa5ea77c0"></a><!-- doxytag: member="sf::String::GetCenter" ref="de634efe8d6264282acc564fa5ea77c0" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp; sf::Drawable::GetCenter           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the center of the object. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Current position of the center </dd></dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00231">231</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="d471fee3d4dda7fefb9ff610d049f210"></a><!-- doxytag: member="sf::String::GetCharacterPos" ref="d471fee3d4dda7fefb9ff610d049f210" args="(std::size_t Index) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.htm">sf::Vector2f</a> sf::String::GetCharacterPos           </td>
          <td>(</td>
          <td class="paramtype">std::size_t&nbsp;</td>
          <td class="paramname"> <em>Index</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return the visual position of the Index-th character of the string, in coordinates relative to the string (note : translation, center, rotation and scale are not applied). 
<p>
Return the visual position of the Index-th character of the string, in coordinates relative to the string (note : translation, center, rotation and scale are not applied).<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Index</em>&nbsp;</td><td>: Index of the character</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Position of the Index-th character (end of string if Index is out of range) </dd></dl>

<p>Definition at line <a class="el" href="String_8cpp-source.htm#l00153">153</a> of file <a class="el" href="String_8cpp-source.htm">String.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="a2a028c4a975b5ed6d5a560a1c44e0c8"></a><!-- doxytag: member="sf::String::GetColor" ref="a2a028c4a975b5ed6d5a560a1c44e0c8" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp; sf::Drawable::GetColor           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the color of the object. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Current color </dd></dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00249">249</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="6018108988612822d2b3c1b1f57d2f11"></a><!-- doxytag: member="sf::String::GetFont" ref="6018108988612822d2b3c1b1f57d2f11" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Font.htm">Font</a> &amp; sf::String::GetFont           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the font used by the string. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd><a class="el" href="classsf_1_1Font.htm" title="Font is the low-level class for loading and manipulating character fonts.">Font</a> used </dd></dl>

<p>Definition at line <a class="el" href="String_8cpp-source.htm#l00124">124</a> of file <a class="el" href="String_8cpp-source.htm">String.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="48238d5726104ba7ddb42f21fc5d5b2f"></a><!-- doxytag: member="sf::String::GetInverseMatrix" ref="48238d5726104ba7ddb42f21fc5d5b2f" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Matrix3.htm">Matrix3</a> &amp; sf::Drawable::GetInverseMatrix           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the inverse transform matrix of the drawable. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Inverse transform matrix </dd></dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00350">350</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="c659a89e42063d13aa9ebe2b534d404e"></a><!-- doxytag: member="sf::String::GetMatrix" ref="c659a89e42063d13aa9ebe2b534d404e" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Matrix3.htm">Matrix3</a> &amp; sf::Drawable::GetMatrix           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the transform matrix of the drawable. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Transform matrix </dd></dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00334">334</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="9ad52594fd5e835cbd03b79098d70e0b"></a><!-- doxytag: member="sf::String::GetPosition" ref="9ad52594fd5e835cbd03b79098d70e0b" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp; sf::Drawable::GetPosition           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the position of the object. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Current position </dd></dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00213">213</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="1a5283b36b1cfba41d1dcd42ff33002d"></a><!-- doxytag: member="sf::String::GetRect" ref="1a5283b36b1cfba41d1dcd42ff33002d" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Rect.htm">FloatRect</a> sf::String::GetRect           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the string rectangle on screen. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Rectangle contaning the string in screen coordinates </dd></dl>

<p>Definition at line <a class="el" href="String_8cpp-source.htm#l00195">195</a> of file <a class="el" href="String_8cpp-source.htm">String.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="4e82bec096673bccf7ceac5207617017"></a><!-- doxytag: member="sf::String::GetRotation" ref="4e82bec096673bccf7ceac5207617017" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float sf::Drawable::GetRotation           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the orientation of the object. 
<p>
Rotation is always in the range [0, 360]<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Current rotation, in degrees </dd></dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00240">240</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="fa4d6b97e7c10a82430ff9ee56009c97"></a><!-- doxytag: member="sf::String::GetScale" ref="fa4d6b97e7c10a82430ff9ee56009c97" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp; sf::Drawable::GetScale           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the current scale of the object. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Current scale factor (always positive) </dd></dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00222">222</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="d1e689d0ff657da70de23b101b38d9ff"></a><!-- doxytag: member="sf::String::GetSize" ref="d1e689d0ff657da70de23b101b38d9ff" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float sf::String::GetSize           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the size of the characters. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Size of the characters </dd></dl>

<p>Definition at line <a class="el" href="String_8cpp-source.htm#l00133">133</a> of file <a class="el" href="String_8cpp-source.htm">String.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="61581f8e8a8c8d86debf9364380e33df"></a><!-- doxytag: member="sf::String::GetStyle" ref="61581f8e8a8c8d86debf9364380e33df" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long sf::String::GetStyle           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the style of the text. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Current string style (combination of <a class="el" href="namespacesf_1_1Style.htm" title="Enumeration of window creation styles.">Style</a> enum values) </dd></dl>

<p>Definition at line <a class="el" href="String_8cpp-source.htm#l00142">142</a> of file <a class="el" href="String_8cpp-source.htm">String.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="97246cca36ef4d5a978b71d9f6f94620"></a><!-- doxytag: member="sf::String::GetText" ref="97246cca36ef4d5a978b71d9f6f94620" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Unicode_1_1Text.htm">Unicode::Text</a> &amp; sf::String::GetText           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the text (the returned text can be converted implicitely to any kind of string). 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>String's text </dd></dl>

<p>Definition at line <a class="el" href="String_8cpp-source.htm#l00115">115</a> of file <a class="el" href="String_8cpp-source.htm">String.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="3c0ac0851d6b0ebed80ae9641ff93161"></a><!-- doxytag: member="sf::String::Move" ref="3c0ac0851d6b0ebed80ae9641ff93161" args="(const Vector2f &amp;Offset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::Move           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Offset</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Move the object of a given offset (take a 2D vector). 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Offset</em>&nbsp;</td><td>: Amount of units to move the object of </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00278">278</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="501df9af956362b3e3769d80381c051b"></a><!-- doxytag: member="sf::String::Move" ref="501df9af956362b3e3769d80381c051b" args="(float OffsetX, float OffsetY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::Move           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>OffsetX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>OffsetY</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Move the object of a given offset (take 2 values). 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>OffsetX</em>&nbsp;</td><td>: X offset </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>OffsetY</em>&nbsp;</td><td>: Y offset</td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00268">268</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="f11de71bf9d73a75c468d1e161181908"></a><!-- doxytag: member="sf::String::Render" ref="f11de71bf9d73a75c468d1e161181908" args="(RenderTarget &amp;Target) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::String::Render           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1RenderTarget.htm">RenderTarget</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Target</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [protected, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
/see Drawable::Render 
<p>
/see sfDrawable::Render
<p>Implements <a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a>.</p>

<p>Definition at line <a class="el" href="String_8cpp-source.htm#l00213">213</a> of file <a class="el" href="String_8cpp-source.htm">String.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="3e7d558d0ef488485a2d3f885ff2b419"></a><!-- doxytag: member="sf::String::Rotate" ref="3e7d558d0ef488485a2d3f885ff2b419" args="(float Angle)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::Rotate           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Angle</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Rotate the object. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Angle</em>&nbsp;</td><td>: Angle of rotation, in degrees </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00306">306</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="c969d85eaf63f072de9e963bd973e91a"></a><!-- doxytag: member="sf::String::Scale" ref="c969d85eaf63f072de9e963bd973e91a" args="(const Vector2f &amp;Factor)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::Scale           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Factor</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Scale the object (take a 2D vector). 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Factor</em>&nbsp;</td><td>: Scaling factors (both values must be strictly positive) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00297">297</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="2a132c9f2f3736b7d0f6ea80303caacd"></a><!-- doxytag: member="sf::String::Scale" ref="2a132c9f2f3736b7d0f6ea80303caacd" args="(float FactorX, float FactorY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::Scale           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>FactorX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>FactorY</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Scale the object (take 2 values). 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>FactorX</em>&nbsp;</td><td>: Scaling factor on X (must be strictly positive) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>FactorY</em>&nbsp;</td><td>: Scaling factor on Y (must be strictly positive) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00287">287</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="aa6558b1ae27e29cb825028473707da5"></a><!-- doxytag: member="sf::String::SetBlendMode" ref="aa6558b1ae27e29cb825028473707da5" args="(Blend::Mode Mode)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetBlendMode           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca">Blend::Mode</a>&nbsp;</td>
          <td class="paramname"> <em>Mode</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the blending mode for the object. 
<p>
The default blend mode is <a class="el" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca23075ecfbf49e19b713cc18188a7661a" title="Pixel = Src * a + Dest * (1 - a).">Blend::Alpha</a><p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Mode</em>&nbsp;</td><td>: New blending mode</td></tr>
  </table>
</dl>
The default blend mode is <a class="el" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca23075ecfbf49e19b713cc18188a7661a" title="Pixel = Src * a + Dest * (1 - a).">Blend::Alpha</a> 
<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00204">204</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="235e438555d8161f4995615f24fa0b11"></a><!-- doxytag: member="sf::String::SetCenter" ref="235e438555d8161f4995615f24fa0b11" args="(const Vector2f &amp;Center)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetCenter           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Center</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the center of the object, in coordinates relative to the top-left of the object (take a 2D vector). 
<p>
Set the center of the object, in coordinates relative to the top-left of the object (take a 2D vector).<p>
The default center is (0, 0)<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Center</em>&nbsp;</td><td>: New center</td></tr>
  </table>
</dl>
The default center is (0, 0) 
<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00171">171</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="11ba1d92bc863af6d95831d216802f61"></a><!-- doxytag: member="sf::String::SetCenter" ref="11ba1d92bc863af6d95831d216802f61" args="(float CenterX, float CenterY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetCenter           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>CenterX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>CenterY</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the center of the object, in coordinates relative to the top-left of the object (take 2 values). 
<p>
Set the center of the object, in coordinates relative to the top-left of the object (take 2 values).<p>
The default center is (0, 0)<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>CenterX</em>&nbsp;</td><td>: X coordinate of the center </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>CenterY</em>&nbsp;</td><td>: Y coordinate of the center</td></tr>
  </table>
</dl>
The default center is (0, 0) 
<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00157">157</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="8cae9f22220985e368a1b38af7644ffb"></a><!-- doxytag: member="sf::String::SetColor" ref="8cae9f22220985e368a1b38af7644ffb" args="(const Color &amp;Col)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetColor           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Col</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the color of the object. 
<p>
The default color is white<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Col</em>&nbsp;</td><td>: New color</td></tr>
  </table>
</dl>
The default color is white 
<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00194">194</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="134ccb47176e51916bbe6b0708a21003"></a><!-- doxytag: member="sf::String::SetFont" ref="134ccb47176e51916bbe6b0708a21003" args="(const Font &amp;CharFont)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::String::SetFont           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Font.htm">Font</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>CharFont</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the font of the string. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="classsf_1_1Font.htm" title="Font is the low-level class for loading and manipulating character fonts.">Font</a></em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Font.htm" title="Font is the low-level class for loading and manipulating character fonts.">Font</a> to use </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="String_8cpp-source.htm#l00075">75</a> of file <a class="el" href="String_8cpp-source.htm">String.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="d2a279f3b13abf57cc25b2b4bd3b81ae"></a><!-- doxytag: member="sf::String::SetPosition" ref="d2a279f3b13abf57cc25b2b4bd3b81ae" args="(const Vector2f &amp;Position)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetPosition           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Position</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the position of the object (take a 2D vector). 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Position</em>&nbsp;</td><td>: New position </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00075">75</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="419da954b1f2ad1ac2ae0b9ab6e72589"></a><!-- doxytag: member="sf::String::SetPosition" ref="419da954b1f2ad1ac2ae0b9ab6e72589" args="(float X, float Y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetPosition           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>X</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the position of the object (take 2 values). 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>X</em>&nbsp;</td><td>: New X coordinate </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Y</em>&nbsp;</td><td>: New Y coordinate </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00065">65</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="6d06383770eb01ffecf3d1cae6fec0ec"></a><!-- doxytag: member="sf::String::SetRotation" ref="6d06383770eb01ffecf3d1cae6fec0ec" args="(float Rotation)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetRotation           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Rotation</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the orientation of the object. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Rotation</em>&nbsp;</td><td>: Angle of rotation, in degrees </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00180">180</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="84876c5ef7fa628c85c3c9e000e50aa1"></a><!-- doxytag: member="sf::String::SetScale" ref="84876c5ef7fa628c85c3c9e000e50aa1" args="(const Vector2f &amp;Scale)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetScale           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Scale</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the scale of the object (take a 2D vector). 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Scale</em>&nbsp;</td><td>: New scale (both values must be strictly positive) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00117">117</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="0b486c56c2bd137bac629f72fea66769"></a><!-- doxytag: member="sf::String::SetScale" ref="0b486c56c2bd137bac629f72fea66769" args="(float ScaleX, float ScaleY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetScale           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>ScaleX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>ScaleY</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the scale of the object (take 2 values). 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ScaleX</em>&nbsp;</td><td>: New horizontal scale (must be strictly positive) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>ScaleY</em>&nbsp;</td><td>: New vertical scale (must be strictly positive) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00107">107</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="0cafae61a1d23bddb059d64df0e1502f"></a><!-- doxytag: member="sf::String::SetScaleX" ref="0cafae61a1d23bddb059d64df0e1502f" args="(float FactorX)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetScaleX           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>FactorX</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the X scale factor of the object. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>X</em>&nbsp;</td><td>: New X scale factor </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00127">127</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="89e7793c74c656e5850b71d0ab34b8bf"></a><!-- doxytag: member="sf::String::SetScaleY" ref="89e7793c74c656e5850b71d0ab34b8bf" args="(float FactorY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetScaleY           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>FactorY</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the Y scale factor of the object. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Y</em>&nbsp;</td><td>: New Y scale factor </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00141">141</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="20b0ca616784aa81c64d6af5a0cebafb"></a><!-- doxytag: member="sf::String::SetSize" ref="20b0ca616784aa81c64d6af5a0cebafb" args="(float Size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::String::SetSize           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Size</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the size of the string The default size is 30. 
<p>
Set the size of the string.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Size</em>&nbsp;</td><td>: New size, in pixels </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="String_8cpp-source.htm#l00088">88</a> of file <a class="el" href="String_8cpp-source.htm">String.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="93846bbdb49ba0171fe4c53eb9a84a6c"></a><!-- doxytag: member="sf::String::SetStyle" ref="93846bbdb49ba0171fe4c53eb9a84a6c" args="(unsigned long TextStyle)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::String::SetStyle           </td>
          <td>(</td>
          <td class="paramtype">unsigned long&nbsp;</td>
          <td class="paramname"> <em>TextStyle</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the style of the text The default style is Regular. 
<p>
Set the style of the text The default style is Regular.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>TextStyle</em>&nbsp;</td><td>: New text style, (combination of <a class="el" href="namespacesf_1_1Style.htm" title="Enumeration of window creation styles.">Style</a> enum values) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="String_8cpp-source.htm#l00102">102</a> of file <a class="el" href="String_8cpp-source.htm">String.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="a4b56eae5ca5f6f42c6b1c53c0fa83a8"></a><!-- doxytag: member="sf::String::SetText" ref="a4b56eae5ca5f6f42c6b1c53c0fa83a8" args="(const Unicode::Text &amp;Text)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::String::SetText           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Unicode_1_1Text.htm">Unicode::Text</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Text</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the text (from any kind of string). 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Text</em>&nbsp;</td><td>: New text </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="String_8cpp-source.htm#l00065">65</a> of file <a class="el" href="String_8cpp-source.htm">String.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="c8de7bfe092736083dcf23b0dbd22b1e"></a><!-- doxytag: member="sf::String::SetX" ref="c8de7bfe092736083dcf23b0dbd22b1e" args="(float X)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetX           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>X</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the X position of the object. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>X</em>&nbsp;</td><td>: New X coordinate </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00085">85</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="83fecebe749c1aca9070eafd63e1a0c9"></a><!-- doxytag: member="sf::String::SetY" ref="83fecebe749c1aca9070eafd63e1a0c9" args="(float Y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetY           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Y</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the Y position of the object. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Y</em>&nbsp;</td><td>: New Y coordinate </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00096">96</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="fe3cb6e62921ce13806c27dc727f8945"></a><!-- doxytag: member="sf::String::TransformToGlobal" ref="fe3cb6e62921ce13806c27dc727f8945" args="(const sf::Vector2f &amp;Point) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.htm">sf::Vector2f</a> sf::Drawable::TransformToGlobal           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">sf::Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Point</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Transform a point from local coordinates into global coordinates (ie it applies the object's center, translation, rotation and scale to the point). 
<p>
Transform a point from local coordinates into global coordinates (ie it applies the object's center, translation, rotation and scale to the point).<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Point</em>&nbsp;</td><td>: Point to transform</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Transformed point </dd></dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00325">325</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="809f25ae0b3a2015ec8a44fe9f5a0008"></a><!-- doxytag: member="sf::String::TransformToLocal" ref="809f25ae0b3a2015ec8a44fe9f5a0008" args="(const sf::Vector2f &amp;Point) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.htm">sf::Vector2f</a> sf::Drawable::TransformToLocal           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">sf::Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Point</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Transform a point from global coordinates into local coordinates (ie it applies the inverse of object's center, translation, rotation and scale to the point). 
<p>
Transform a point from global coordinates into local coordinates (ie it applies the inverse of object's center, translation, rotation and scale to the point).<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Point</em>&nbsp;</td><td>: Point to transform</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Transformed point </dd></dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00316">316</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="String_8hpp-source.htm">String.hpp</a><li><a class="el" href="String_8cpp-source.htm">String.cpp</a></ul>
</div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
