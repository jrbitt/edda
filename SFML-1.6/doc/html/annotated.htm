<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li class="current"><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>Class List</h1>Here are the classes, structs, unions and interfaces with brief descriptions:<table>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1AudioResource.htm">sf::AudioResource</a></td><td class="indexvalue">Abstract base class for every class that owns a device-dependant resource -- allow them to initialize / shutdown even when the audio context is not created </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Clock.htm">sf::Clock</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Clock.htm" title="Clock is an utility class for manipulating time.">Clock</a> is an utility class for manipulating time </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Color.htm">sf::Color</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> is an utility class for manipulating 32-bits RGBA colors </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Context.htm">sf::Context</a></td><td class="indexvalue">Class wrapping an OpenGL context </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td class="indexvalue">Abstract base class for every object that can be drawn into a render window </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Event.htm">sf::Event</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Event.htm" title="Event defines a system event and its parameters.">Event</a> defines a system event and its parameters </td></tr>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1Event_1_1JoyButtonEvent.htm">sf::Event::Event::JoyButtonEvent</a></td><td class="indexvalue">Joystick buttons events parameters </td></tr>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1Event_1_1JoyMoveEvent.htm">sf::Event::Event::JoyMoveEvent</a></td><td class="indexvalue">Joystick axis move event parameters </td></tr>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1Event_1_1KeyEvent.htm">sf::Event::Event::KeyEvent</a></td><td class="indexvalue">Keyboard event parameters </td></tr>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1Event_1_1MouseButtonEvent.htm">sf::Event::Event::MouseButtonEvent</a></td><td class="indexvalue"><a class="el" href="namespacesf_1_1Mouse.htm" title="Definition of button codes for mouse events.">Mouse</a> buttons events parameters </td></tr>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1Event_1_1MouseMoveEvent.htm">sf::Event::Event::MouseMoveEvent</a></td><td class="indexvalue"><a class="el" href="namespacesf_1_1Mouse.htm" title="Definition of button codes for mouse events.">Mouse</a> move event parameters </td></tr>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1Event_1_1MouseWheelEvent.htm">sf::Event::Event::MouseWheelEvent</a></td><td class="indexvalue"><a class="el" href="namespacesf_1_1Mouse.htm" title="Definition of button codes for mouse events.">Mouse</a> wheel events parameters </td></tr>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1Event_1_1SizeEvent.htm">sf::Event::Event::SizeEvent</a></td><td class="indexvalue">Size events parameters </td></tr>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1Event_1_1TextEvent.htm">sf::Event::Event::TextEvent</a></td><td class="indexvalue">Text event parameters </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Font.htm">sf::Font</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Font.htm" title="Font is the low-level class for loading and manipulating character fonts.">Font</a> is the low-level class for loading and manipulating character fonts </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Ftp.htm">sf::Ftp</a></td><td class="indexvalue">This class provides methods for manipulating the FTP protocol (described in RFC 959) </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Ftp_1_1DirectoryResponse.htm">sf::Ftp::Ftp::DirectoryResponse</a></td><td class="indexvalue">Specialization of FTP response returning a directory </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Ftp_1_1ListingResponse.htm">sf::Ftp::Ftp::ListingResponse</a></td><td class="indexvalue">Specialization of FTP response returning a filename lisiting </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Ftp_1_1Response.htm">sf::Ftp::Ftp::Response</a></td><td class="indexvalue">This class wraps a FTP response, which is basically :<ul>
<li>a status code</li><li>a message </li></ul>
</td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Glyph.htm">sf::Glyph</a></td><td class="indexvalue">Structure describing a glyph (a visual character) </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Http.htm">sf::Http</a></td><td class="indexvalue">This class provides methods for manipulating the HTTP protocol (described in RFC 1945) </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Http_1_1Request.htm">sf::Http::Http::Request</a></td><td class="indexvalue">This class wraps an HTTP request, which is basically :<ul>
<li>a header with a method, a target URI, and a set of field/value pairs</li><li>an optional body (for POST requests) </li></ul>
</td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Http_1_1Response.htm">sf::Http::Http::Response</a></td><td class="indexvalue">This class wraps an HTTP response, which is basically :<ul>
<li>a header with a status code and a set of field/value pairs</li><li>a body (the content of the requested resource) </li></ul>
</td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Image.htm">sf::Image</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a> is the low-level class for loading and manipulating images </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Input.htm">sf::Input</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Input.htm" title="Input handles real-time input from keyboard and mouse.">Input</a> handles real-time input from keyboard and mouse </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1IPAddress.htm">sf::IPAddress</a></td><td class="indexvalue"><a class="el" href="classsf_1_1IPAddress.htm" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a> provides easy manipulation of IP v4 addresses </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Listener.htm">sf::Listener</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Listener.htm" title="Listener is a global interface for defining the audio listener properties ; the audio...">Listener</a> is a global interface for defining the audio listener properties ; the audio listener is the point in the scene from where all the sounds are heard </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Lock.htm">sf::Lock</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Lock.htm" title="Lock is an exception-safe automatic wrapper for locking and unlocking mutexes.">Lock</a> is an exception-safe automatic wrapper for locking and unlocking mutexes </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Matrix3.htm">sf::Matrix3</a></td><td class="indexvalue">Utility class to manipulate 3x3 matrices representing 2D transformations </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Music.htm">sf::Music</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Music.htm" title="Music defines a big sound played using streaming, so usually what we call a music...">Music</a> defines a big sound played using streaming, so usually what we call a music :) </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Mutex.htm">sf::Mutex</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Mutex.htm" title="Mutex defines a mutex (MUTual EXclusion) object, that allows a thread to lock critical...">Mutex</a> defines a mutex (MUTual EXclusion) object, that allows a thread to lock critical instructions to avoid simultaneous access with other threads </td></tr>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1NonCopyable.htm">sf::NonCopyable</a></td><td class="indexvalue">Utility base class to easily declare non-copyable classes </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Packet.htm">sf::Packet</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Packet.htm" title="Packet wraps data to send / to receive through the network.">Packet</a> wraps data to send / to receive through the network </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1PostFX.htm">sf::PostFX</a></td><td class="indexvalue"><a class="el" href="classsf_1_1PostFX.htm" title="PostFX is used to apply a post effect to a window.">PostFX</a> is used to apply a post effect to a window </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Randomizer.htm">sf::Randomizer</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Randomizer.htm" title="Randomizer is an utility class for generating pseudo-random numbers.">Randomizer</a> is an utility class for generating pseudo-random numbers </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Rect.htm">sf::Rect&lt; T &gt;</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Rect.htm" title="Rect is an utility class for manipulating rectangles.">Rect</a> is an utility class for manipulating rectangles </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1RenderTarget.htm">sf::RenderTarget</a></td><td class="indexvalue">Base class for all render targets (window, image, </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1RenderWindow.htm">sf::RenderWindow</a></td><td class="indexvalue">Simple wrapper for <a class="el" href="classsf_1_1Window.htm" title="Window is a rendering window ; it can create a new window or connect to an existing...">sf::Window</a> that allows easy 2D rendering </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Resource.htm">sf::Resource&lt; T &gt;</a></td><td class="indexvalue">Base class for every resource that needs to notify dependent classes about its destruction </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1ResourcePtr.htm">sf::ResourcePtr&lt; T &gt;</a></td><td class="indexvalue">Safe pointer to a T resource (inheriting from sf::Resource&lt;T&gt;), its pointer is automatically reseted when the resource is destroyed </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Selector.htm">sf::Selector&lt; Type &gt;</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Selector.htm" title="Selector allow reading from multiple sockets without blocking.">Selector</a> allow reading from multiple sockets without blocking </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1SelectorBase.htm">sf::SelectorBase</a></td><td class="indexvalue">Private base class for selectors </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Shape.htm" title="Shape defines a drawable convex shape ; it also defines helper functions to draw...">Shape</a> defines a drawable convex shape ; it also defines helper functions to draw simple shapes like lines, rectangles, circles, etc </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1SocketHelper.htm">sf::SocketHelper</a></td><td class="indexvalue">This class defines helper functions to do all the non-portable socket stuff </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1SocketTCP.htm">sf::SocketTCP</a></td><td class="indexvalue"><a class="el" href="classsf_1_1SocketTCP.htm" title="SocketTCP wraps a socket using TCP protocol to send data safely (but a bit slower)...">SocketTCP</a> wraps a socket using TCP protocol to send data safely (but a bit slower) </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1SocketUDP.htm">sf::SocketUDP</a></td><td class="indexvalue"><a class="el" href="classsf_1_1SocketUDP.htm" title="SocketUDP wraps a socket using UDP protocol to send data fastly (but with less safety)...">SocketUDP</a> wraps a socket using UDP protocol to send data fastly (but with less safety) </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Sound.htm">sf::Sound</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Sound.htm" title="Sound defines the properties of a sound such as position, volume, pitch, etc.">Sound</a> defines the properties of a sound such as position, volume, pitch, etc </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1SoundBuffer.htm">sf::SoundBuffer</a></td><td class="indexvalue"><a class="el" href="classsf_1_1SoundBuffer.htm" title="SoundBuffer is the low-level for loading and manipulating sound buffers.">SoundBuffer</a> is the low-level for loading and manipulating sound buffers </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1SoundBufferRecorder.htm">sf::SoundBufferRecorder</a></td><td class="indexvalue">Specialized <a class="el" href="classsf_1_1SoundRecorder.htm" title="SoundRecorder is an interface for capturing sound data, it is meant to be used as...">SoundRecorder</a> which saves the captured audio data into a sound buffer </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1SoundRecorder.htm">sf::SoundRecorder</a></td><td class="indexvalue"><a class="el" href="classsf_1_1SoundRecorder.htm" title="SoundRecorder is an interface for capturing sound data, it is meant to be used as...">SoundRecorder</a> is an interface for capturing sound data, it is meant to be used as a base class </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1SoundStream.htm">sf::SoundStream</a></td><td class="indexvalue"><a class="el" href="classsf_1_1SoundStream.htm" title="SoundStream is a streamed sound, ie samples are acquired while the sound is playing...">SoundStream</a> is a streamed sound, ie samples are acquired while the sound is playing </td></tr>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1SoundStream_1_1Chunk.htm">sf::SoundStream::SoundStream::Chunk</a></td><td class="indexvalue">Structure defining a chunk of audio data to stream </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Sprite.htm">sf::Sprite</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Sprite.htm" title="Sprite defines a sprite : texture, transformations, color, and draw on screen.">Sprite</a> defines a sprite : texture, transformations, color, and draw on screen </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td class="indexvalue"><a class="el" href="classsf_1_1String.htm" title="String defines a graphical 2D text, that can be drawn on screen.">String</a> defines a graphical 2D text, that can be drawn on screen </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Thread.htm">sf::Thread</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Thread.htm" title="Thread defines an easy way to manipulate a thread.">Thread</a> defines an easy way to manipulate a thread </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Unicode.htm">sf::Unicode</a></td><td class="indexvalue">Provides utility functions to convert from and to any unicode and ASCII encoding </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Unicode_1_1Text.htm">sf::Unicode::Unicode::Text</a></td><td class="indexvalue">This class is an abstract definition of a unicode text, it can be converted from and to any kind of string and encoding </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Vector2.htm">sf::Vector2&lt; T &gt;</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Vector2.htm" title="Vector2 is an utility class for manipulating 2 dimensional vectors.">Vector2</a> is an utility class for manipulating 2 dimensional vectors </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Vector3.htm">sf::Vector3&lt; T &gt;</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Vector3.htm" title="Vector3 is an utility class for manipulating 3 dimensional vectors.">Vector3</a> is an utility class for manipulating 3 dimensional vectors </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1VideoMode.htm">sf::VideoMode</a></td><td class="indexvalue"><a class="el" href="classsf_1_1VideoMode.htm" title="VideoMode defines a video mode (width, height, bpp, frequency) and provides static...">VideoMode</a> defines a video mode (width, height, bpp, frequency) and provides static functions for getting modes supported by the display device </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1View.htm">sf::View</a></td><td class="indexvalue">This class defines a view (position, size, etc </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Window.htm" title="Window is a rendering window ; it can create a new window or connect to an existing...">Window</a> is a rendering window ; it can create a new window or connect to an existing one </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1WindowListener.htm">sf::WindowListener</a></td><td class="indexvalue">Base class for classes that want to receive events from a window (for internal use only) </td></tr>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1WindowSettings.htm">sf::WindowSettings</a></td><td class="indexvalue">Structure defining the creation settings of windows </td></tr>
</table>
</div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
