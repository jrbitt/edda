<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>Music.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Audio/Music.hpp&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;SFML/Audio/OpenAL.hpp&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;SFML/Audio/SoundFile.hpp&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="keyword">namespace </span>sf
<a name="l00036"></a>00036 {
<a name="l00040"></a><a class="code" href="classsf_1_1Music.htm#18db20495fc566e5f9c26fcfe1a5dff6">00040</a> <a class="code" href="classsf_1_1Music.htm#18db20495fc566e5f9c26fcfe1a5dff6" title="Construct the music with a buffer size.">Music::Music</a>(std::size_t BufferSize) :
<a name="l00041"></a>00041 myFile    (NULL),
<a name="l00042"></a>00042 myDuration(0.f),
<a name="l00043"></a>00043 mySamples (BufferSize)
<a name="l00044"></a>00044 {
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 }
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 
<a name="l00052"></a><a class="code" href="classsf_1_1Music.htm#4c65860fed2f01d0eaa6c4199870414b">00052</a> <a class="code" href="classsf_1_1Music.htm#4c65860fed2f01d0eaa6c4199870414b" title="Destructor.">Music::~Music</a>()
<a name="l00053"></a>00053 {
<a name="l00054"></a>00054     <span class="comment">// We must stop before destroying the file :)</span>
<a name="l00055"></a>00055     <a class="code" href="classsf_1_1SoundStream.htm#53c9e9b160bcbcc89c93c1682b4525df" title="Stop playing the audio stream.">Stop</a>();
<a name="l00056"></a>00056 
<a name="l00057"></a>00057     <span class="keyword">delete</span> myFile;
<a name="l00058"></a>00058 }
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 
<a name="l00064"></a><a class="code" href="classsf_1_1Music.htm#26986766bc5674a87da1bcb10bef59db">00064</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1Music.htm#26986766bc5674a87da1bcb10bef59db" title="Open a music file (doesn&amp;#39;t play it -- call Play() for that).">Music::OpenFromFile</a>(<span class="keyword">const</span> std::string&amp; Filename)
<a name="l00065"></a>00065 {
<a name="l00066"></a>00066     <span class="comment">// First stop the music if it was already running</span>
<a name="l00067"></a>00067     <a class="code" href="classsf_1_1SoundStream.htm#53c9e9b160bcbcc89c93c1682b4525df" title="Stop playing the audio stream.">Stop</a>();
<a name="l00068"></a>00068 
<a name="l00069"></a>00069     <span class="comment">// Create the sound file implementation, and open it in read mode</span>
<a name="l00070"></a>00070     <span class="keyword">delete</span> myFile;
<a name="l00071"></a>00071     myFile = priv::SoundFile::CreateRead(Filename);
<a name="l00072"></a>00072     <span class="keywordflow">if</span> (!myFile)
<a name="l00073"></a>00073     {
<a name="l00074"></a>00074         std::cerr &lt;&lt; <span class="stringliteral">"Failed to open \""</span> &lt;&lt; Filename &lt;&lt; <span class="stringliteral">"\" for reading"</span> &lt;&lt; std::endl;
<a name="l00075"></a>00075         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00076"></a>00076     }
<a name="l00077"></a>00077 
<a name="l00078"></a>00078     <span class="comment">// Compute the duration</span>
<a name="l00079"></a>00079     myDuration = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(myFile-&gt;GetSamplesCount()) / myFile-&gt;GetSampleRate() / myFile-&gt;GetChannelsCount();
<a name="l00080"></a>00080 
<a name="l00081"></a>00081     <span class="comment">// Initialize the stream</span>
<a name="l00082"></a>00082     <a class="code" href="classsf_1_1SoundStream.htm#ed9b6b06c0fa9c2d0b8c094eb2826793" title="Set the audio stream parameters, you must call it before Play().">Initialize</a>(myFile-&gt;GetChannelsCount(), myFile-&gt;GetSampleRate());
<a name="l00083"></a>00083 
<a name="l00084"></a>00084     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00085"></a>00085 }
<a name="l00086"></a>00086 
<a name="l00087"></a>00087 
<a name="l00091"></a><a class="code" href="classsf_1_1Music.htm#07896cadcaf54e2998e0f91fb2d6d017">00091</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1Music.htm#07896cadcaf54e2998e0f91fb2d6d017" title="Open a music file from memory (doesn&amp;#39;t play it -- call Play() for that).">Music::OpenFromMemory</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* Data, std::size_t SizeInBytes)
<a name="l00092"></a>00092 {
<a name="l00093"></a>00093     <span class="comment">// First stop the music if it was already running</span>
<a name="l00094"></a>00094     <a class="code" href="classsf_1_1SoundStream.htm#53c9e9b160bcbcc89c93c1682b4525df" title="Stop playing the audio stream.">Stop</a>();
<a name="l00095"></a>00095 
<a name="l00096"></a>00096     <span class="comment">// Create the sound file implementation, and open it in read mode</span>
<a name="l00097"></a>00097     <span class="keyword">delete</span> myFile;
<a name="l00098"></a>00098     myFile = priv::SoundFile::CreateRead(Data, SizeInBytes);
<a name="l00099"></a>00099     <span class="keywordflow">if</span> (!myFile)
<a name="l00100"></a>00100     {
<a name="l00101"></a>00101         std::cerr &lt;&lt; <span class="stringliteral">"Failed to open music from memory for reading"</span> &lt;&lt; std::endl;
<a name="l00102"></a>00102         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00103"></a>00103     }
<a name="l00104"></a>00104 
<a name="l00105"></a>00105     <span class="comment">// Compute the duration</span>
<a name="l00106"></a>00106     myDuration = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(myFile-&gt;GetSamplesCount()) / myFile-&gt;GetSampleRate();
<a name="l00107"></a>00107 
<a name="l00108"></a>00108     <span class="comment">// Initialize the stream</span>
<a name="l00109"></a>00109     <a class="code" href="classsf_1_1SoundStream.htm#ed9b6b06c0fa9c2d0b8c094eb2826793" title="Set the audio stream parameters, you must call it before Play().">Initialize</a>(myFile-&gt;GetChannelsCount(), myFile-&gt;GetSampleRate());
<a name="l00110"></a>00110 
<a name="l00111"></a>00111     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00112"></a>00112 }
<a name="l00113"></a>00113 
<a name="l00114"></a>00114 
<a name="l00118"></a>00118 <span class="keywordtype">bool</span> Music::OnStart()
<a name="l00119"></a>00119 {
<a name="l00120"></a>00120     <span class="keywordflow">return</span> myFile &amp;&amp; myFile-&gt;Restart();
<a name="l00121"></a>00121 }
<a name="l00122"></a>00122 
<a name="l00123"></a>00123 
<a name="l00127"></a>00127 <span class="keywordtype">bool</span> Music::OnGetData(SoundStream::Chunk&amp; Data)
<a name="l00128"></a>00128 {
<a name="l00129"></a>00129     <span class="keywordflow">if</span> (myFile)
<a name="l00130"></a>00130     {
<a name="l00131"></a>00131         <span class="comment">// Fill the chunk parameters</span>
<a name="l00132"></a>00132         Data.Samples   = &amp;mySamples[0];
<a name="l00133"></a>00133         Data.NbSamples = myFile-&gt;Read(&amp;mySamples[0], mySamples.size());
<a name="l00134"></a>00134 
<a name="l00135"></a>00135         <span class="comment">// Check if we have reached the end of the audio file</span>
<a name="l00136"></a>00136         <span class="keywordflow">return</span> Data.NbSamples == mySamples.size();
<a name="l00137"></a>00137     }
<a name="l00138"></a>00138     <span class="keywordflow">else</span>
<a name="l00139"></a>00139     {
<a name="l00140"></a>00140         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00141"></a>00141     }
<a name="l00142"></a>00142 }
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 
<a name="l00148"></a><a class="code" href="classsf_1_1Music.htm#dbda9cff41ec10cb85db056cf67e5e50">00148</a> <span class="keywordtype">float</span> <a class="code" href="classsf_1_1Music.htm#dbda9cff41ec10cb85db056cf67e5e50" title="Get the music duration.">Music::GetDuration</a>()<span class="keyword"> const</span>
<a name="l00149"></a>00149 <span class="keyword"></span>{
<a name="l00150"></a>00150     <span class="keywordflow">return</span> myDuration;
<a name="l00151"></a>00151 }
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
