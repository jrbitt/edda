<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>AudioDevice.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Audio/AudioDevice.hpp&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;SFML/Audio/AudioResource.hpp&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;SFML/Audio/Listener.hpp&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="keyword">namespace </span>sf
<a name="l00036"></a>00036 {
<a name="l00037"></a>00037 <span class="keyword">namespace </span>priv
<a name="l00038"></a>00038 {
<a name="l00040"></a>00040 <span class="comment">// Static member data</span>
<a name="l00042"></a>00042 <span class="comment"></span>AudioDevice* AudioDevice::ourInstance;
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 
<a name="l00048"></a>00048 AudioDevice::AudioDevice() :
<a name="l00049"></a>00049 myRefCount(0)
<a name="l00050"></a>00050 {
<a name="l00051"></a>00051     <span class="comment">// Create the device</span>
<a name="l00052"></a>00052     myDevice = alcOpenDevice(NULL);
<a name="l00053"></a>00053 
<a name="l00054"></a>00054     <span class="keywordflow">if</span> (myDevice)
<a name="l00055"></a>00055     {
<a name="l00056"></a>00056         <span class="comment">// Create the context</span>
<a name="l00057"></a>00057         myContext = alcCreateContext(myDevice, NULL);
<a name="l00058"></a>00058 
<a name="l00059"></a>00059         <span class="keywordflow">if</span> (myContext)
<a name="l00060"></a>00060         {
<a name="l00061"></a>00061             <span class="comment">// Set the context as the current one (we'll only need one)</span>
<a name="l00062"></a>00062             alcMakeContextCurrent(myContext);
<a name="l00063"></a>00063 
<a name="l00064"></a>00064             <span class="comment">// Initialize the listener, located at the origin and looking along the Z axis</span>
<a name="l00065"></a>00065             Listener::SetPosition(0.f, 0.f, 0.f);
<a name="l00066"></a>00066             Listener::SetTarget(0.f, 0.f, -1.f);
<a name="l00067"></a>00067         }
<a name="l00068"></a>00068         <span class="keywordflow">else</span>
<a name="l00069"></a>00069         {
<a name="l00070"></a>00070             std::cerr &lt;&lt; <span class="stringliteral">"Failed to create the audio context"</span> &lt;&lt; std::endl;
<a name="l00071"></a>00071         }
<a name="l00072"></a>00072     }
<a name="l00073"></a>00073     <span class="keywordflow">else</span>
<a name="l00074"></a>00074     {
<a name="l00075"></a>00075         std::cerr &lt;&lt; <span class="stringliteral">"Failed to open the audio device"</span> &lt;&lt; std::endl;
<a name="l00076"></a>00076     }
<a name="l00077"></a>00077 }
<a name="l00078"></a>00078 
<a name="l00079"></a>00079 
<a name="l00083"></a>00083 AudioDevice::~AudioDevice()
<a name="l00084"></a>00084 {
<a name="l00085"></a>00085     <span class="comment">// Destroy the context</span>
<a name="l00086"></a>00086     alcMakeContextCurrent(NULL);
<a name="l00087"></a>00087     <span class="keywordflow">if</span> (myContext)
<a name="l00088"></a>00088         alcDestroyContext(myContext);
<a name="l00089"></a>00089     
<a name="l00090"></a>00090     <span class="comment">// Destroy the device</span>
<a name="l00091"></a>00091     <span class="keywordflow">if</span> (myDevice)
<a name="l00092"></a>00092         alcCloseDevice(myDevice);
<a name="l00093"></a>00093 }
<a name="l00094"></a>00094 
<a name="l00095"></a>00095 
<a name="l00099"></a>00099 AudioDevice&amp; AudioDevice::GetInstance()
<a name="l00100"></a>00100 {
<a name="l00101"></a>00101     <span class="comment">// Create the audio device if it doesn't exist</span>
<a name="l00102"></a>00102     <span class="keywordflow">if</span> (!ourInstance)
<a name="l00103"></a>00103         ourInstance = <span class="keyword">new</span> AudioDevice;
<a name="l00104"></a>00104 
<a name="l00105"></a>00105     <span class="keywordflow">return</span> *ourInstance;
<a name="l00106"></a>00106 }
<a name="l00107"></a>00107 
<a name="l00108"></a>00108 
<a name="l00112"></a>00112 <span class="keywordtype">void</span> AudioDevice::AddReference()
<a name="l00113"></a>00113 {
<a name="l00114"></a>00114     <span class="comment">// Create the audio device if it doesn't exist</span>
<a name="l00115"></a>00115     <span class="keywordflow">if</span> (!ourInstance)
<a name="l00116"></a>00116         ourInstance = <span class="keyword">new</span> AudioDevice;
<a name="l00117"></a>00117 
<a name="l00118"></a>00118     <span class="comment">// Increase the references count</span>
<a name="l00119"></a>00119     ourInstance-&gt;myRefCount++;
<a name="l00120"></a>00120 }
<a name="l00121"></a>00121 
<a name="l00122"></a>00122 
<a name="l00126"></a>00126 <span class="keywordtype">void</span> AudioDevice::RemoveReference()
<a name="l00127"></a>00127 {
<a name="l00128"></a>00128     <span class="comment">// Decrease the references count</span>
<a name="l00129"></a>00129     ourInstance-&gt;myRefCount--;
<a name="l00130"></a>00130 
<a name="l00131"></a>00131     <span class="comment">// Destroy the audio device if the references count reaches 0</span>
<a name="l00132"></a>00132     <span class="keywordflow">if</span> (ourInstance-&gt;myRefCount == 0)
<a name="l00133"></a>00133     {
<a name="l00134"></a>00134         <span class="keyword">delete</span> ourInstance;
<a name="l00135"></a>00135         ourInstance = NULL;
<a name="l00136"></a>00136     }
<a name="l00137"></a>00137 }
<a name="l00138"></a>00138 
<a name="l00139"></a>00139 
<a name="l00143"></a>00143 ALCdevice* AudioDevice::GetDevice()<span class="keyword"> const</span>
<a name="l00144"></a>00144 <span class="keyword"></span>{
<a name="l00145"></a>00145     <span class="keywordflow">return</span> myDevice;
<a name="l00146"></a>00146 }
<a name="l00147"></a>00147 
<a name="l00148"></a>00148 
<a name="l00152"></a>00152 ALenum AudioDevice::GetFormatFromChannelsCount(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ChannelsCount)<span class="keyword"> const</span>
<a name="l00153"></a>00153 <span class="keyword"></span>{
<a name="l00154"></a>00154     <span class="comment">// Find the good format according to the number of channels</span>
<a name="l00155"></a>00155     <span class="keywordflow">switch</span> (ChannelsCount)
<a name="l00156"></a>00156     {
<a name="l00157"></a>00157         <span class="keywordflow">case</span> 1 : <span class="keywordflow">return</span> AL_FORMAT_MONO16;
<a name="l00158"></a>00158         <span class="keywordflow">case</span> 2 : <span class="keywordflow">return</span> AL_FORMAT_STEREO16;
<a name="l00159"></a>00159         <span class="keywordflow">case</span> 4 : <span class="keywordflow">return</span> alGetEnumValue(<span class="stringliteral">"AL_FORMAT_QUAD16"</span>);
<a name="l00160"></a>00160         <span class="keywordflow">case</span> 6 : <span class="keywordflow">return</span> alGetEnumValue(<span class="stringliteral">"AL_FORMAT_51CHN16"</span>);
<a name="l00161"></a>00161         <span class="keywordflow">case</span> 7 : <span class="keywordflow">return</span> alGetEnumValue(<span class="stringliteral">"AL_FORMAT_61CHN16"</span>);
<a name="l00162"></a>00162         <span class="keywordflow">case</span> 8 : <span class="keywordflow">return</span> alGetEnumValue(<span class="stringliteral">"AL_FORMAT_71CHN16"</span>);
<a name="l00163"></a>00163     }
<a name="l00164"></a>00164 
<a name="l00165"></a>00165     <span class="keywordflow">return</span> 0;
<a name="l00166"></a>00166 }
<a name="l00167"></a>00167 
<a name="l00168"></a>00168 } <span class="comment">// namespace priv</span>
<a name="l00169"></a>00169 
<a name="l00170"></a>00170 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
