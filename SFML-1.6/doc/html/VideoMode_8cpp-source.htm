<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>VideoMode.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Window/VideoMode.hpp&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;SFML/Window/VideoModeSupport.hpp&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 
<a name="l00037"></a>00037 <span class="keyword">namespace</span>
<a name="l00038"></a>00038 {
<a name="l00039"></a>00039     <span class="comment">// Global array of supported video modes</span>
<a name="l00040"></a>00040     std::vector&lt;sf::VideoMode&gt; SupportedModes;
<a name="l00041"></a>00041 
<a name="l00042"></a>00042     <span class="comment">// Functor for sorting modes from highest to lowest</span>
<a name="l00043"></a>00043     <span class="keyword">struct </span>CompareModes
<a name="l00044"></a>00044     {
<a name="l00045"></a>00045         <span class="keywordtype">bool</span> operator ()(<span class="keyword">const</span> <a class="code" href="classsf_1_1VideoMode.htm" title="VideoMode defines a video mode (width, height, bpp, frequency) and provides static...">sf::VideoMode</a>&amp; v1, <span class="keyword">const</span> <a class="code" href="classsf_1_1VideoMode.htm" title="VideoMode defines a video mode (width, height, bpp, frequency) and provides static...">sf::VideoMode</a>&amp; v2)<span class="keyword"> const</span>
<a name="l00046"></a>00046 <span class="keyword">        </span>{
<a name="l00047"></a>00047             <span class="keywordflow">if</span> (v1.<a class="code" href="classsf_1_1VideoMode.htm#c2aa4a809527fd9da6b70c9479d02c7a" title="Video mode pixel depth, in bits per pixels.">BitsPerPixel</a> &gt; v2.<a class="code" href="classsf_1_1VideoMode.htm#c2aa4a809527fd9da6b70c9479d02c7a" title="Video mode pixel depth, in bits per pixels.">BitsPerPixel</a>)
<a name="l00048"></a>00048                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00049"></a>00049             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (v1.<a class="code" href="classsf_1_1VideoMode.htm#c2aa4a809527fd9da6b70c9479d02c7a" title="Video mode pixel depth, in bits per pixels.">BitsPerPixel</a> &lt; v2.<a class="code" href="classsf_1_1VideoMode.htm#c2aa4a809527fd9da6b70c9479d02c7a" title="Video mode pixel depth, in bits per pixels.">BitsPerPixel</a>)
<a name="l00050"></a>00050                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00051"></a>00051             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (v1.<a class="code" href="classsf_1_1VideoMode.htm#bee130381af7a465b29ea5cdb3927203" title="Video mode width, in pixels.">Width</a> &gt; v2.<a class="code" href="classsf_1_1VideoMode.htm#bee130381af7a465b29ea5cdb3927203" title="Video mode width, in pixels.">Width</a>)
<a name="l00052"></a>00052                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00053"></a>00053             <span class="keywordflow">else</span> <span class="keywordflow">if</span> (v1.<a class="code" href="classsf_1_1VideoMode.htm#bee130381af7a465b29ea5cdb3927203" title="Video mode width, in pixels.">Width</a> &lt; v2.<a class="code" href="classsf_1_1VideoMode.htm#bee130381af7a465b29ea5cdb3927203" title="Video mode width, in pixels.">Width</a>)
<a name="l00054"></a>00054                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00055"></a>00055             <span class="keywordflow">else</span>
<a name="l00056"></a>00056                 <span class="keywordflow">return</span> (v1.<a class="code" href="classsf_1_1VideoMode.htm#c890fbaecc5d9b82b44123a0d5b3c0f5" title="Video mode height, in pixels.">Height</a> &gt; v2.<a class="code" href="classsf_1_1VideoMode.htm#c890fbaecc5d9b82b44123a0d5b3c0f5" title="Video mode height, in pixels.">Height</a>);
<a name="l00057"></a>00057         }
<a name="l00058"></a>00058     };
<a name="l00059"></a>00059 }
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="keyword">namespace </span>sf
<a name="l00063"></a>00063 {
<a name="l00067"></a><a class="code" href="classsf_1_1VideoMode.htm#04c9417e5c304510bef5f6aeb03f6ce1">00067</a> <a class="code" href="classsf_1_1VideoMode.htm#04c9417e5c304510bef5f6aeb03f6ce1" title="Default constructor.">VideoMode::VideoMode</a>() :
<a name="l00068"></a>00068 Width       (0),
<a name="l00069"></a>00069 Height      (0),
<a name="l00070"></a>00070 BitsPerPixel(0)
<a name="l00071"></a>00071 {
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 }
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 
<a name="l00079"></a><a class="code" href="classsf_1_1VideoMode.htm#9478572db06121f70260e6b9dc21704e">00079</a> <a class="code" href="classsf_1_1VideoMode.htm#04c9417e5c304510bef5f6aeb03f6ce1" title="Default constructor.">VideoMode::VideoMode</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ModeWidth, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ModeHeight, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ModeBpp) :
<a name="l00080"></a>00080 Width       (ModeWidth),
<a name="l00081"></a>00081 Height      (ModeHeight),
<a name="l00082"></a>00082 BitsPerPixel(ModeBpp)
<a name="l00083"></a>00083 {
<a name="l00084"></a>00084 
<a name="l00085"></a>00085 }
<a name="l00086"></a>00086 
<a name="l00087"></a>00087 
<a name="l00091"></a><a class="code" href="classsf_1_1VideoMode.htm#0b29193258c4855f75337e62f2b56eea">00091</a> <a class="code" href="classsf_1_1VideoMode.htm" title="VideoMode defines a video mode (width, height, bpp, frequency) and provides static...">VideoMode</a> <a class="code" href="classsf_1_1VideoMode.htm#0b29193258c4855f75337e62f2b56eea" title="Get the current desktop video mode.">VideoMode::GetDesktopMode</a>()
<a name="l00092"></a>00092 {
<a name="l00093"></a>00093     <span class="comment">// Directly forward to the video mode support</span>
<a name="l00094"></a>00094     <span class="keywordflow">return</span> priv::VideoModeSupport::GetDesktopVideoMode();
<a name="l00095"></a>00095 }
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 
<a name="l00102"></a><a class="code" href="classsf_1_1VideoMode.htm#50e64232abd41b7ee1016948b41ea5a2">00102</a> <a class="code" href="classsf_1_1VideoMode.htm" title="VideoMode defines a video mode (width, height, bpp, frequency) and provides static...">VideoMode</a> <a class="code" href="classsf_1_1VideoMode.htm#50e64232abd41b7ee1016948b41ea5a2" title="Get a valid video mode Index must be in range [0, GetModesCount()[ Modes are sorted...">VideoMode::GetMode</a>(std::size_t Index)
<a name="l00103"></a>00103 {
<a name="l00104"></a>00104     <span class="keywordflow">if</span> (SupportedModes.empty())
<a name="l00105"></a>00105         InitializeModes();
<a name="l00106"></a>00106 
<a name="l00107"></a>00107     <span class="keywordflow">if</span> (Index &lt; <a class="code" href="classsf_1_1VideoMode.htm#1700d0b9230f34533cadd88f5cc61723" title="Get valid video modes count.">GetModesCount</a>())
<a name="l00108"></a>00108         <span class="keywordflow">return</span> SupportedModes[Index];
<a name="l00109"></a>00109     <span class="keywordflow">else</span>
<a name="l00110"></a>00110         <span class="keywordflow">return</span> <a class="code" href="classsf_1_1VideoMode.htm#04c9417e5c304510bef5f6aeb03f6ce1" title="Default constructor.">VideoMode</a>();
<a name="l00111"></a>00111 }
<a name="l00112"></a>00112 
<a name="l00113"></a>00113 
<a name="l00117"></a><a class="code" href="classsf_1_1VideoMode.htm#1700d0b9230f34533cadd88f5cc61723">00117</a> std::size_t <a class="code" href="classsf_1_1VideoMode.htm#1700d0b9230f34533cadd88f5cc61723" title="Get valid video modes count.">VideoMode::GetModesCount</a>()
<a name="l00118"></a>00118 {
<a name="l00119"></a>00119     <span class="keywordflow">if</span> (SupportedModes.empty())
<a name="l00120"></a>00120         InitializeModes();
<a name="l00121"></a>00121 
<a name="l00122"></a>00122     <span class="keywordflow">return</span> SupportedModes.size();
<a name="l00123"></a>00123 }
<a name="l00124"></a>00124 
<a name="l00125"></a>00125 
<a name="l00129"></a><a class="code" href="classsf_1_1VideoMode.htm#13ccf1d15900d7251659f871ea362c7c">00129</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1VideoMode.htm#13ccf1d15900d7251659f871ea362c7c" title="Tell whether or not the video mode is supported.">VideoMode::IsValid</a>()<span class="keyword"> const</span>
<a name="l00130"></a>00130 <span class="keyword"></span>{
<a name="l00131"></a>00131     <span class="keywordflow">if</span> (SupportedModes.empty())
<a name="l00132"></a>00132         InitializeModes();
<a name="l00133"></a>00133 
<a name="l00134"></a>00134     <span class="keywordflow">return</span> std::find(SupportedModes.begin(), SupportedModes.end(), *<span class="keyword">this</span>) != SupportedModes.end();
<a name="l00135"></a>00135 }
<a name="l00136"></a>00136 
<a name="l00137"></a>00137 
<a name="l00141"></a><a class="code" href="classsf_1_1VideoMode.htm#497c88cd2475d941f27a0ac2a0541fa1">00141</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1VideoMode.htm#497c88cd2475d941f27a0ac2a0541fa1" title="Comparison operator overload -- tell if two video modes are equal.">VideoMode::operator ==</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1VideoMode.htm" title="VideoMode defines a video mode (width, height, bpp, frequency) and provides static...">VideoMode</a>&amp; Other)<span class="keyword"> const</span>
<a name="l00142"></a>00142 <span class="keyword"></span>{
<a name="l00143"></a>00143     <span class="keywordflow">return</span> (<a class="code" href="classsf_1_1VideoMode.htm#bee130381af7a465b29ea5cdb3927203" title="Video mode width, in pixels.">Width</a>        == Other.<a class="code" href="classsf_1_1VideoMode.htm#bee130381af7a465b29ea5cdb3927203" title="Video mode width, in pixels.">Width</a>)        &amp;&amp;
<a name="l00144"></a>00144            (<a class="code" href="classsf_1_1VideoMode.htm#c890fbaecc5d9b82b44123a0d5b3c0f5" title="Video mode height, in pixels.">Height</a>       == Other.<a class="code" href="classsf_1_1VideoMode.htm#c890fbaecc5d9b82b44123a0d5b3c0f5" title="Video mode height, in pixels.">Height</a>)       &amp;&amp;
<a name="l00145"></a>00145            (<a class="code" href="classsf_1_1VideoMode.htm#c2aa4a809527fd9da6b70c9479d02c7a" title="Video mode pixel depth, in bits per pixels.">BitsPerPixel</a> == Other.<a class="code" href="classsf_1_1VideoMode.htm#c2aa4a809527fd9da6b70c9479d02c7a" title="Video mode pixel depth, in bits per pixels.">BitsPerPixel</a>);
<a name="l00146"></a>00146 }
<a name="l00147"></a>00147 
<a name="l00148"></a>00148 
<a name="l00152"></a><a class="code" href="classsf_1_1VideoMode.htm#7db70f110d4a1404e38ed8a909d77821">00152</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1VideoMode.htm#7db70f110d4a1404e38ed8a909d77821" title="Comparison operator overload -- tell if two video modes are different.">VideoMode::operator !=</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1VideoMode.htm" title="VideoMode defines a video mode (width, height, bpp, frequency) and provides static...">VideoMode</a>&amp; Other)<span class="keyword"> const</span>
<a name="l00153"></a>00153 <span class="keyword"></span>{
<a name="l00154"></a>00154     <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == Other);
<a name="l00155"></a>00155 }
<a name="l00156"></a>00156 
<a name="l00157"></a>00157 
<a name="l00161"></a>00161 <span class="keywordtype">void</span> VideoMode::InitializeModes()
<a name="l00162"></a>00162 {
<a name="l00163"></a>00163     <span class="comment">// We request the array of valid modes</span>
<a name="l00164"></a>00164     priv::VideoModeSupport::GetSupportedVideoModes(SupportedModes);
<a name="l00165"></a>00165 
<a name="l00166"></a>00166     <span class="comment">// And we sort them from highest to lowest (so that number 0 is the best)</span>
<a name="l00167"></a>00167     std::sort(SupportedModes.begin(), SupportedModes.end(), CompareModes());
<a name="l00168"></a>00168 }
<a name="l00169"></a>00169 
<a name="l00170"></a>00170 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
