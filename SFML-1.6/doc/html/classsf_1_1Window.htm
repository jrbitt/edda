<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><b>sf</b>::<a class="el" href="classsf_1_1Window.htm">Window</a>
  </div>
</div>
<div class="contents">
<h1>sf::Window Class Reference</h1><!-- doxytag: class="sf::Window" --><!-- doxytag: inherits="sf::WindowListener,sf::NonCopyable" --><a class="el" href="classsf_1_1Window.htm" title="Window is a rendering window ; it can create a new window or connect to an existing...">Window</a> is a rendering window ; it can create a new window or connect to an existing one.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="Window_2Window_8hpp-source.htm">Window.hpp</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for sf::Window:</div>
<div class="dynsection">

<p><center><img src="classsf_1_1Window.png" usemap="#sf::Window_map" border="0" alt=""></center>
<map name="sf::Window_map">
<area href="classsf_1_1WindowListener.htm" alt="sf::WindowListener" shape="rect" coords="0,0,117,24">
<area href="structsf_1_1NonCopyable.htm" alt="sf::NonCopyable" shape="rect" coords="127,0,244,24">
<area href="classsf_1_1RenderWindow.htm" alt="sf::RenderWindow" shape="rect" coords="63,112,180,136">
</map>
</div>

<p>
<a href="classsf_1_1Window-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#5359122166b4dc492c3d25caf08ccfc4">Window</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Default constructor.  <a href="#5359122166b4dc492c3d25caf08ccfc4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#8a89aba8776a4eeb5393522a0e6513c9">Window</a> (<a class="el" href="classsf_1_1VideoMode.htm">VideoMode</a> Mode, const std::string &amp;Title, unsigned long WindowStyle=Style::Resize|Style::Close, const <a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a> &amp;Params=<a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a>())</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct a new window.  <a href="#8a89aba8776a4eeb5393522a0e6513c9"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#ef6c45b1d53ed4a884ccb9c609d2456a">Window</a> (WindowHandle Handle, const <a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a> &amp;Params=<a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a>())</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct the window from an existing control.  <a href="#ef6c45b1d53ed4a884ccb9c609d2456a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#6d5a00ce5cc93a2c0bc8ae0e317f5008">~Window</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Destructor.  <a href="#6d5a00ce5cc93a2c0bc8ae0e317f5008"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#a891f1cbd7d77c4dc02ac950b6e76f61">Create</a> (<a class="el" href="classsf_1_1VideoMode.htm">VideoMode</a> Mode, const std::string &amp;Title, unsigned long WindowStyle=Style::Resize|Style::Close, const <a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a> &amp;Params=<a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a>())</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create (or recreate) the window.  <a href="#a891f1cbd7d77c4dc02ac950b6e76f61"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#58e264c181fd70e67986d26fea69a71d">Create</a> (WindowHandle Handle, const <a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a> &amp;Params=<a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a>())</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create (or recreate) the window from an existing control.  <a href="#58e264c181fd70e67986d26fea69a71d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#b04439f6fb9fdfe40f882676fdb2938c">Close</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Close (destroy) the window.  <a href="#b04439f6fb9fdfe40f882676fdb2938c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#5c4c82e1fdb4252108314fcbe462ad8d">IsOpened</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Tell whether or not the window is opened (ie.  <a href="#5c4c82e1fdb4252108314fcbe462ad8d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#c5dfd4d7df394e3638b567352ec69e22">GetWidth</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the width of the rendering region of the window.  <a href="#c5dfd4d7df394e3638b567352ec69e22"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#913a7ae79631eaa8ef6a1ad8cd0c5947">GetHeight</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the height of the rendering region of the window.  <a href="#913a7ae79631eaa8ef6a1ad8cd0c5947"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#27321006595f9f6a482b26b13800695f">GetSettings</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the creation settings of the window.  <a href="#27321006595f9f6a482b26b13800695f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#65cb14f66a870f459bd66e11e52fbfe8">GetEvent</a> (<a class="el" href="classsf_1_1Event.htm">Event</a> &amp;EventReceived)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the event on top of events stack, if any, and pop it.  <a href="#65cb14f66a870f459bd66e11e52fbfe8"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#cb8391cc93ff730288e2a8dd6b0bb7b5">UseVerticalSync</a> (bool Enabled)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable / disable vertical synchronization.  <a href="#cb8391cc93ff730288e2a8dd6b0bb7b5"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#6142e38cb60901e6604284425714f3f0">ShowMouseCursor</a> (bool Show)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Show or hide the mouse cursor.  <a href="#6142e38cb60901e6604284425714f3f0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#369d1764893c6fde8979fcf04142dc55">SetCursorPosition</a> (unsigned int Left, unsigned int Top)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the position of the mouse cursor.  <a href="#369d1764893c6fde8979fcf04142dc55"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#3a6d2908a624a8afda4b2fdd9ef46058">SetPosition</a> (int Left, int Top)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the position of the window on screen.  <a href="#3a6d2908a624a8afda4b2fdd9ef46058"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#dc4461bfaa9b4ff0fd0364a5079a47ef">SetSize</a> (unsigned int Width, unsigned int Height)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the size of the rendering region of the window.  <a href="#dc4461bfaa9b4ff0fd0364a5079a47ef"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#727c01602c86710fd935f9892946b2de">Show</a> (bool State)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Show or hide the window.  <a href="#727c01602c86710fd935f9892946b2de"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#43ac767f0b7b697b392444d639b909e0">EnableKeyRepeat</a> (bool Enabled)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable or disable automatic key-repeat.  <a href="#43ac767f0b7b697b392444d639b909e0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#36fa09e52af66878b8b826457b8f1dfa">SetIcon</a> (unsigned int Width, unsigned int Height, const Uint8 *Pixels)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the window's icon.  <a href="#36fa09e52af66878b8b826457b8f1dfa"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#9fc1e745594d5cf6a30225ec9ea36675">SetActive</a> (bool Active=true) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Activate of deactivate the window as the current target for rendering.  <a href="#9fc1e745594d5cf6a30225ec9ea36675"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#ee37843c5c882f7b3a0788b310308435">Display</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Display the window on screen.  <a href="#ee37843c5c882f7b3a0788b310308435"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1Input.htm">Input</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#49db47a79ca98b7d65087adeea06e919">GetInput</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the input manager of the window.  <a href="#49db47a79ca98b7d65087adeea06e919"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#5544031f1d2965c00532fb5660763f33">SetFramerateLimit</a> (unsigned int Limit)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Limit the framerate to a maximum fixed frequency.  <a href="#5544031f1d2965c00532fb5660763f33"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#63571ef14c9351899bcd605fb101c254">GetFrameTime</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get time elapsed since last frame.  <a href="#63571ef14c9351899bcd605fb101c254"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#d685eed68b85a66c8000a08e9a28aa91">SetJoystickThreshold</a> (float Threshold)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the joystick threshold, ie.  <a href="#d685eed68b85a66c8000a08e9a28aa91"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
<a class="el" href="classsf_1_1Window.htm" title="Window is a rendering window ; it can create a new window or connect to an existing...">Window</a> is a rendering window ; it can create a new window or connect to an existing one. 
<p>Definition at line <a class="el" href="Window_2Window_8hpp-source.htm#l00055">55</a> of file <a class="el" href="Window_2Window_8hpp-source.htm">Window/Window.hpp</a>.</p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="5359122166b4dc492c3d25caf08ccfc4"></a><!-- doxytag: member="sf::Window::Window" ref="5359122166b4dc492c3d25caf08ccfc4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Window::Window           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Default constructor. 
<p>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00049">49</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="8a89aba8776a4eeb5393522a0e6513c9"></a><!-- doxytag: member="sf::Window::Window" ref="8a89aba8776a4eeb5393522a0e6513c9" args="(VideoMode Mode, const std::string &amp;Title, unsigned long WindowStyle=Style::Resize|Style::Close, const WindowSettings &amp;Params=WindowSettings())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Window::Window           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1VideoMode.htm">VideoMode</a>&nbsp;</td>
          <td class="paramname"> <em>Mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>Title</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&nbsp;</td>
          <td class="paramname"> <em>WindowStyle</em> = <code>Style::Resize&nbsp;|&nbsp;Style::Close</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Params</em> = <code><a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a>()</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Construct a new window. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Mode</em>&nbsp;</td><td>: Video mode to use </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Title</em>&nbsp;</td><td>: Title of the window </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>WindowStyle</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Window.htm" title="Window is a rendering window ; it can create a new window or connect to an existing...">Window</a> style, see <a class="el" href="namespacesf_1_1Style.htm" title="Enumeration of window creation styles.">sf::Style</a> (Resize | Close by default) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Params</em>&nbsp;</td><td>: Creation parameters (see default constructor for default values) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00064">64</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="ef6c45b1d53ed4a884ccb9c609d2456a"></a><!-- doxytag: member="sf::Window::Window" ref="ef6c45b1d53ed4a884ccb9c609d2456a" args="(WindowHandle Handle, const WindowSettings &amp;Params=WindowSettings())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Window::Window           </td>
          <td>(</td>
          <td class="paramtype">WindowHandle&nbsp;</td>
          <td class="paramname"> <em>Handle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Params</em> = <code><a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a>()</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Construct the window from an existing control. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Handle</em>&nbsp;</td><td>: Platform-specific handle of the control </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Params</em>&nbsp;</td><td>: Creation parameters (see default constructor for default values) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00079">79</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="6d5a00ce5cc93a2c0bc8ae0e317f5008"></a><!-- doxytag: member="sf::Window::~Window" ref="6d5a00ce5cc93a2c0bc8ae0e317f5008" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Window::~Window           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Destructor. 
<p>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00094">94</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="b04439f6fb9fdfe40f882676fdb2938c"></a><!-- doxytag: member="sf::Window::Close" ref="b04439f6fb9fdfe40f882676fdb2938c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::Close           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Close (destroy) the window. 
<p>
The <a class="el" href="classsf_1_1Window.htm" title="Window is a rendering window ; it can create a new window or connect to an existing...">sf::Window</a> instance remains valid and you can call Create to recreate the window<p>
The <a class="el" href="classsf_1_1Window.htm" title="Window is a rendering window ; it can create a new window or connect to an existing...">sf::Window</a> instance remains valid and you can call Create to recreate the window 
<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00165">165</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="58e264c181fd70e67986d26fea69a71d"></a><!-- doxytag: member="sf::Window::Create" ref="58e264c181fd70e67986d26fea69a71d" args="(WindowHandle Handle, const WindowSettings &amp;Params=WindowSettings())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::Create           </td>
          <td>(</td>
          <td class="paramtype">WindowHandle&nbsp;</td>
          <td class="paramname"> <em>Handle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Params</em> = <code><a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a>()</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Create (or recreate) the window from an existing control. 
<p>
Create the window from an existing control.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Handle</em>&nbsp;</td><td>: Platform-specific handle of the control </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Params</em>&nbsp;</td><td>: Creation parameters (see default constructor for default values) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00147">147</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="a891f1cbd7d77c4dc02ac950b6e76f61"></a><!-- doxytag: member="sf::Window::Create" ref="a891f1cbd7d77c4dc02ac950b6e76f61" args="(VideoMode Mode, const std::string &amp;Title, unsigned long WindowStyle=Style::Resize|Style::Close, const WindowSettings &amp;Params=WindowSettings())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::Create           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1VideoMode.htm">VideoMode</a>&nbsp;</td>
          <td class="paramname"> <em>Mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>Title</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&nbsp;</td>
          <td class="paramname"> <em>WindowStyle</em> = <code>Style::Resize&nbsp;|&nbsp;Style::Close</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Params</em> = <code><a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a>()</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Create (or recreate) the window. 
<p>
Create the window.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Mode</em>&nbsp;</td><td>: Video mode to use </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Title</em>&nbsp;</td><td>: Title of the window </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>WindowStyle</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Window.htm" title="Window is a rendering window ; it can create a new window or connect to an existing...">Window</a> style, see <a class="el" href="namespacesf_1_1Style.htm" title="Enumeration of window creation styles.">sf::Style</a> (Resize | Close by default) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Params</em>&nbsp;</td><td>: Creation parameters (see default constructor for default values) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00104">104</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="ee37843c5c882f7b3a0788b310308435"></a><!-- doxytag: member="sf::Window::Display" ref="ee37843c5c882f7b3a0788b310308435" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::Display           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Display the window on screen. 
<p>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00353">353</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="43ac767f0b7b697b392444d639b909e0"></a><!-- doxytag: member="sf::Window::EnableKeyRepeat" ref="43ac767f0b7b697b392444d639b909e0" args="(bool Enabled)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::EnableKeyRepeat           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>Enabled</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Enable or disable automatic key-repeat. 
<p>
Automatic key-repeat is enabled by default<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Enabled</em>&nbsp;</td><td>: True to enable, false to disable</td></tr>
  </table>
</dl>
Automatic key-repeat is enabled by default 
<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00317">317</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="65cb14f66a870f459bd66e11e52fbfe8"></a><!-- doxytag: member="sf::Window::GetEvent" ref="65cb14f66a870f459bd66e11e52fbfe8" args="(Event &amp;EventReceived)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Window::GetEvent           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Event.htm">Event</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>EventReceived</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the event on top of events stack, if any, and pop it. 
<p>
Get the event on top of events stack, if any.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>EventReceived</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Event.htm" title="Event defines a system event and its parameters.">Event</a> to fill, if any</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if an event was returned, false if events stack was empty </dd></dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00218">218</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="63571ef14c9351899bcd605fb101c254"></a><!-- doxytag: member="sf::Window::GetFrameTime" ref="63571ef14c9351899bcd605fb101c254" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float sf::Window::GetFrameTime           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get time elapsed since last frame. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Time elapsed, in seconds </dd></dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00394">394</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="913a7ae79631eaa8ef6a1ad8cd0c5947"></a><!-- doxytag: member="sf::Window::GetHeight" ref="913a7ae79631eaa8ef6a1ad8cd0c5947" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int sf::Window::GetHeight           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the height of the rendering region of the window. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Height in pixels </dd></dl>

<p>Reimplemented in <a class="el" href="classsf_1_1RenderWindow.htm#efa842a47f9c2415d1f8e93543ed2447">sf::RenderWindow</a>.</p>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00200">200</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="49db47a79ca98b7d65087adeea06e919"></a><!-- doxytag: member="sf::Window::GetInput" ref="49db47a79ca98b7d65087adeea06e919" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Input.htm">Input</a> &amp; sf::Window::GetInput           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the input manager of the window. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Reference to the input </dd></dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00376">376</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="27321006595f9f6a482b26b13800695f"></a><!-- doxytag: member="sf::Window::GetSettings" ref="27321006595f9f6a482b26b13800695f" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structsf_1_1WindowSettings.htm">WindowSettings</a> &amp; sf::Window::GetSettings           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the creation settings of the window. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Structure containing the creation settings </dd></dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00209">209</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="c5dfd4d7df394e3638b567352ec69e22"></a><!-- doxytag: member="sf::Window::GetWidth" ref="c5dfd4d7df394e3638b567352ec69e22" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int sf::Window::GetWidth           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the width of the rendering region of the window. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Width in pixels </dd></dl>

<p>Reimplemented in <a class="el" href="classsf_1_1RenderWindow.htm#e2b04f655a655b7c4bfac22958266e0c">sf::RenderWindow</a>.</p>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00191">191</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="5c4c82e1fdb4252108314fcbe462ad8d"></a><!-- doxytag: member="sf::Window::IsOpened" ref="5c4c82e1fdb4252108314fcbe462ad8d" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Window::IsOpened           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Tell whether or not the window is opened (ie. 
<p>
has been created). Note that a hidden window (Show(false)) will still return true<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if the window is opened</dd></dl>
has been created). Note that a hidden window (Show(false)) will still return true 
<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00182">182</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="9fc1e745594d5cf6a30225ec9ea36675"></a><!-- doxytag: member="sf::Window::SetActive" ref="9fc1e745594d5cf6a30225ec9ea36675" args="(bool Active=true) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Window::SetActive           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>Active</em> = <code>true</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Activate of deactivate the window as the current target for rendering. 
<p>
Activate of deactivate the window as the current target for rendering.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Active</em>&nbsp;</td><td>: True to activate, false to deactivate (true by default)</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if operation was successful, false otherwise </dd></dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00338">338</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="369d1764893c6fde8979fcf04142dc55"></a><!-- doxytag: member="sf::Window::SetCursorPosition" ref="369d1764893c6fde8979fcf04142dc55" args="(unsigned int Left, unsigned int Top)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::SetCursorPosition           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Top</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Change the position of the mouse cursor. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Left</em>&nbsp;</td><td>: Left coordinate of the cursor, relative to the window </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Top</em>&nbsp;</td><td>: Top coordinate of the cursor, relative to the window </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00260">260</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="5544031f1d2965c00532fb5660763f33"></a><!-- doxytag: member="sf::Window::SetFramerateLimit" ref="5544031f1d2965c00532fb5660763f33" args="(unsigned int Limit)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::SetFramerateLimit           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Limit</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Limit the framerate to a maximum fixed frequency. 
<p>
Set the framerate at a fixed frequency.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Limit</em>&nbsp;</td><td>: Framerate limit, in frames per seconds (use 0 to disable limit) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00385">385</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="36fa09e52af66878b8b826457b8f1dfa"></a><!-- doxytag: member="sf::Window::SetIcon" ref="36fa09e52af66878b8b826457b8f1dfa" args="(unsigned int Width, unsigned int Height, const Uint8 *Pixels)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::SetIcon           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Uint8 *&nbsp;</td>
          <td class="paramname"> <em>Pixels</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Change the window's icon. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Width</em>&nbsp;</td><td>: Icon's width, in pixels </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Height</em>&nbsp;</td><td>: Icon's height, in pixels </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Pixels</em>&nbsp;</td><td>: Pointer to the pixels in memory, format must be RGBA 32 bits </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00327">327</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="d685eed68b85a66c8000a08e9a28aa91"></a><!-- doxytag: member="sf::Window::SetJoystickThreshold" ref="d685eed68b85a66c8000a08e9a28aa91" args="(float Threshold)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::SetJoystickThreshold           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Threshold</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Change the joystick threshold, ie. 
<p>
the value below which no move event will be generated<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Threshold</em>&nbsp;</td><td>: New threshold, in range [0, 100]</td></tr>
  </table>
</dl>
the value below which no move event will be generated 
<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00404">404</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="3a6d2908a624a8afda4b2fdd9ef46058"></a><!-- doxytag: member="sf::Window::SetPosition" ref="3a6d2908a624a8afda4b2fdd9ef46058" args="(int Left, int Top)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::SetPosition           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>Left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>Top</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Change the position of the window on screen. 
<p>
Only works for top-level windows<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Left</em>&nbsp;</td><td>: Left position </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Top</em>&nbsp;</td><td>: Top position </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00276">276</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="dc4461bfaa9b4ff0fd0364a5079a47ef"></a><!-- doxytag: member="sf::Window::SetSize" ref="dc4461bfaa9b4ff0fd0364a5079a47ef" args="(unsigned int Width, unsigned int Height)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::SetSize           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Height</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Change the size of the rendering region of the window. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Width</em>&nbsp;</td><td>: New width </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Height</em>&nbsp;</td><td>: New height </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00293">293</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="727c01602c86710fd935f9892946b2de"></a><!-- doxytag: member="sf::Window::Show" ref="727c01602c86710fd935f9892946b2de" args="(bool State)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::Show           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>State</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Show or hide the window. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>State</em>&nbsp;</td><td>: True to show, false to hide </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00303">303</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="6142e38cb60901e6604284425714f3f0"></a><!-- doxytag: member="sf::Window::ShowMouseCursor" ref="6142e38cb60901e6604284425714f3f0" args="(bool Show)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::ShowMouseCursor           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>Show</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Show or hide the mouse cursor. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Show</em>&nbsp;</td><td>: True to show, false to hide </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00250">250</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="cb8391cc93ff730288e2a8dd6b0bb7b5"></a><!-- doxytag: member="sf::Window::UseVerticalSync" ref="cb8391cc93ff730288e2a8dd6b0bb7b5" args="(bool Enabled)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::UseVerticalSync           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>Enabled</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Enable / disable vertical synchronization. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Enabled</em>&nbsp;</td><td>: True to enable v-sync, false to deactivate </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Window_8cpp-source.htm#l00240">240</a> of file <a class="el" href="Window_8cpp-source.htm">Window.cpp</a>.</p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="Window_2Window_8hpp-source.htm">Window/Window.hpp</a><li><a class="el" href="Window_8cpp-source.htm">Window.cpp</a></ul>
</div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
