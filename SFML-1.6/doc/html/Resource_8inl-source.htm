<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>Resource.inl</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 
<a name="l00029"></a>00029 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00030"></a>00030 Resource&lt;T&gt;::Resource()
<a name="l00031"></a>00031 {
<a name="l00032"></a>00032     <span class="comment">// Nothing to do</span>
<a name="l00033"></a>00033 }
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 
<a name="l00039"></a>00039 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00040"></a>00040 <a class="code" href="classsf_1_1Resource.htm#a044d32edfcd9b6aebd50d03658e8130" title="Default constructor.">Resource&lt;T&gt;::Resource</a>(<span class="keyword">const</span> Resource&lt;T&gt;&amp;)
<a name="l00041"></a>00041 {
<a name="l00042"></a>00042     <span class="comment">// Nothing to do, we don't want to copy observers</span>
<a name="l00043"></a>00043 }
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 
<a name="l00049"></a>00049 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00050"></a>00050 <a class="code" href="classsf_1_1Resource.htm#0e83e83339851d7b3246939bde3fc1ac" title="Destructor.">Resource&lt;T&gt;::~Resource</a>()
<a name="l00051"></a>00051 {
<a name="l00052"></a>00052     <span class="comment">// Notify all observers</span>
<a name="l00053"></a>00053     <span class="keywordflow">for</span> (<span class="keyword">typename</span> std::set&lt;ResourcePtr&lt;T&gt;*&gt;::iterator i = myObservers.begin(); i != myObservers.end(); ++i)
<a name="l00054"></a>00054     {
<a name="l00055"></a>00055         (*i)-&gt;OnResourceDestroyed();
<a name="l00056"></a>00056     }
<a name="l00057"></a>00057 }
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 
<a name="l00063"></a>00063 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00064"></a>00064 Resource&lt;T&gt;&amp; <a class="code" href="classsf_1_1Resource.htm#772badbe4813a5b459f588698ac7ad60" title="Assignment operator.">Resource&lt;T&gt;::operator =</a>(<span class="keyword">const</span> Resource&lt;T&gt;&amp;)
<a name="l00065"></a>00065 {
<a name="l00066"></a>00066     <span class="comment">// Nothing to do, we don't want to copy observers</span>
<a name="l00067"></a>00067     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00068"></a>00068 }
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 
<a name="l00074"></a>00074 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00075"></a>00075 <span class="keywordtype">void</span> Resource&lt;T&gt;::Connect(ResourcePtr&lt;T&gt;&amp; Observer)<span class="keyword"> const</span>
<a name="l00076"></a>00076 <span class="keyword"></span>{
<a name="l00077"></a>00077     myObservers.insert(&amp;Observer);
<a name="l00078"></a>00078 }
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 
<a name="l00084"></a>00084 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00085"></a>00085 <span class="keywordtype">void</span> Resource&lt;T&gt;::Disconnect(ResourcePtr&lt;T&gt;&amp; Observer)<span class="keyword"> const</span>
<a name="l00086"></a>00086 <span class="keyword"></span>{
<a name="l00087"></a>00087     myObservers.erase(&amp;Observer);
<a name="l00088"></a>00088 }
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
