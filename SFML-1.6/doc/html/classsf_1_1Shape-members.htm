<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>sf::Shape Member List</h1>This is the complete list of members for <a class="el" href="classsf_1_1Shape.htm">sf::Shape</a>, including all inherited members.<p><table>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#b28fab6a7d2b596f15ef5c0611341c92">AddPoint</a>(float X, float Y, const Color &amp;Col=Color(255, 255, 255), const Color &amp;OutlineCol=Color(0, 0, 0))</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#212f5b1d630e820989a53dcbf46d33e4">AddPoint</a>(const Vector2f &amp;Position, const Color &amp;Col=Color(255, 255, 255), const Color &amp;OutlineCol=Color(0, 0, 0))</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#10ccaef12679a28cf4d3003fceffc2f0">Circle</a>(float X, float Y, float Radius, const Color &amp;Col, float Outline=0.f, const Color &amp;OutlineCol=sf::Color(0, 0, 0))</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#b7b5082c253cf624b76de040f9c017d4">Circle</a>(const Vector2f &amp;Center, float Radius, const Color &amp;Col, float Outline=0.f, const Color &amp;OutlineCol=sf::Color(0, 0, 0))</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#712de01505e04a03b93cf33ae004cdbc">Drawable</a>(const Vector2f &amp;Position=Vector2f(0, 0), const Vector2f &amp;Scale=Vector2f(1, 1), float Rotation=0.f, const Color &amp;Col=Color(255, 255, 255, 255))</td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#6370770e5f1d1c1b1abfeef80d6296ae">EnableFill</a>(bool Enable)</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#f65abf11c7faa1a78c6d203e68a35a26">EnableOutline</a>(bool Enable)</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#b6446c4717a2800cad85db55cb55409a">GetBlendMode</a>() const </td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#de634efe8d6264282acc564fa5ea77c0">GetCenter</a>() const </td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#a2a028c4a975b5ed6d5a560a1c44e0c8">GetColor</a>() const </td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#48238d5726104ba7ddb42f21fc5d5b2f">GetInverseMatrix</a>() const </td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#c659a89e42063d13aa9ebe2b534d404e">GetMatrix</a>() const </td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#8bafa82b4f42937d897c5c5aecd22350">GetNbPoints</a>() const </td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#ed31da968d6d4bc8f6a3b4bf808c1087">GetOutlineWidth</a>() const </td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#f22db94719a2e359cb02dd4108e6ea92">GetPointColor</a>(unsigned int Index) const </td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#f9a40ea9b28f96f183533991e6f811b8">GetPointOutlineColor</a>(unsigned int Index) const </td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#2b3cf65f5453a84466f749b97e611436">GetPointPosition</a>(unsigned int Index) const </td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#9ad52594fd5e835cbd03b79098d70e0b">GetPosition</a>() const </td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#4e82bec096673bccf7ceac5207617017">GetRotation</a>() const </td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#fa4d6b97e7c10a82430ff9ee56009c97">GetScale</a>() const </td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#90fe51b17c8029ed528d8590595a3f1f">Line</a>(float P1X, float P1Y, float P2X, float P2Y, float Thickness, const Color &amp;Col, float Outline=0.f, const Color &amp;OutlineCol=sf::Color(0, 0, 0))</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#264e5374cac72a520fcf69c3bbdfe688">Line</a>(const Vector2f &amp;P1, const Vector2f &amp;P2, float Thickness, const Color &amp;Col, float Outline=0.f, const Color &amp;OutlineCol=sf::Color(0, 0, 0))</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#501df9af956362b3e3769d80381c051b">Move</a>(float OffsetX, float OffsetY)</td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#3c0ac0851d6b0ebed80ae9641ff93161">Move</a>(const Vector2f &amp;Offset)</td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#aec9c0468a77871f6410aea757105498">Rectangle</a>(float P1X, float P1Y, float P2X, float P2Y, const Color &amp;Col, float Outline=0.f, const Color &amp;OutlineCol=sf::Color(0, 0, 0))</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#7273d55fb2e6ede4d901428a97579169">Rectangle</a>(const Vector2f &amp;P1, const Vector2f &amp;P2, const Color &amp;Col, float Outline=0.f, const Color &amp;OutlineCol=sf::Color(0, 0, 0))</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#b32d683b125efd3bd7ccf878b1f50a31">Render</a>(RenderTarget &amp;Target) const </td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td><code> [protected, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#3e7d558d0ef488485a2d3f885ff2b419">Rotate</a>(float Angle)</td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#2a132c9f2f3736b7d0f6ea80303caacd">Scale</a>(float FactorX, float FactorY)</td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#c969d85eaf63f072de9e963bd973e91a">Scale</a>(const Vector2f &amp;Factor)</td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#aa6558b1ae27e29cb825028473707da5">SetBlendMode</a>(Blend::Mode Mode)</td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#11ba1d92bc863af6d95831d216802f61">SetCenter</a>(float CenterX, float CenterY)</td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#235e438555d8161f4995615f24fa0b11">SetCenter</a>(const Vector2f &amp;Center)</td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#8cae9f22220985e368a1b38af7644ffb">SetColor</a>(const Color &amp;Col)</td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#77ce4ef6cf1944768b2bc88c98a98b65">SetOutlineWidth</a>(float Width)</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#d55eab90a2fb9fd0bcc1dd695b0bc769">SetPointColor</a>(unsigned int Index, const Color &amp;Col)</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#d28205b9e4784ae0adcc2209669572fe">SetPointOutlineColor</a>(unsigned int Index, const Color &amp;OutlineCol)</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#f3eaee50b3af95d9884b41fc3996567e">SetPointPosition</a>(unsigned int Index, const Vector2f &amp;Position)</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#e3000e995446507929c24b3abbcce18c">SetPointPosition</a>(unsigned int Index, float X, float Y)</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#419da954b1f2ad1ac2ae0b9ab6e72589">SetPosition</a>(float X, float Y)</td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#d2a279f3b13abf57cc25b2b4bd3b81ae">SetPosition</a>(const Vector2f &amp;Position)</td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#6d06383770eb01ffecf3d1cae6fec0ec">SetRotation</a>(float Rotation)</td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#0b486c56c2bd137bac629f72fea66769">SetScale</a>(float ScaleX, float ScaleY)</td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#84876c5ef7fa628c85c3c9e000e50aa1">SetScale</a>(const Vector2f &amp;Scale)</td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#0cafae61a1d23bddb059d64df0e1502f">SetScaleX</a>(float FactorX)</td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#89e7793c74c656e5850b71d0ab34b8bf">SetScaleY</a>(float FactorY)</td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#c8de7bfe092736083dcf23b0dbd22b1e">SetX</a>(float X)</td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#83fecebe749c1aca9070eafd63e1a0c9">SetY</a>(float Y)</td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shape.htm#413a457f720835b9f5d8e97ca8b80960">Shape</a>()</td><td><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#fe3cb6e62921ce13806c27dc727f8945">TransformToGlobal</a>(const sf::Vector2f &amp;Point) const </td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#809f25ae0b3a2015ec8a44fe9f5a0008">TransformToLocal</a>(const sf::Vector2f &amp;Point) const </td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Drawable.htm#28141b9ba1e4b432313339546669817a">~Drawable</a>()</td><td><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td><code> [virtual]</code></td></tr>
</table></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
