<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>Packet.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Network/Packet.hpp&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;SFML/Network/SocketHelper.hpp&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="keyword">namespace </span>sf
<a name="l00034"></a>00034 {
<a name="l00038"></a><a class="code" href="classsf_1_1Packet.htm#786e5d4ced83992ceefa1799963ea858">00038</a> <a class="code" href="classsf_1_1Packet.htm#786e5d4ced83992ceefa1799963ea858" title="Default constructor.">Packet::Packet</a>() :
<a name="l00039"></a>00039 myReadPos(0),
<a name="l00040"></a>00040 myIsValid(true)
<a name="l00041"></a>00041 {
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 }
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 
<a name="l00049"></a><a class="code" href="classsf_1_1Packet.htm#bd57f3b7a6e0e9119f4021754b5b19e5">00049</a> <a class="code" href="classsf_1_1Packet.htm#bd57f3b7a6e0e9119f4021754b5b19e5" title="Virtual destructor.">Packet::~Packet</a>()
<a name="l00050"></a>00050 {
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 }
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 
<a name="l00058"></a><a class="code" href="classsf_1_1Packet.htm#aaa020852bd7be75625b9f64b3a77c64">00058</a> <span class="keywordtype">void</span> <a class="code" href="classsf_1_1Packet.htm#aaa020852bd7be75625b9f64b3a77c64" title="Append data to the end of the packet.">Packet::Append</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* Data, std::size_t SizeInBytes)
<a name="l00059"></a>00059 {
<a name="l00060"></a>00060     <span class="keywordflow">if</span> (Data &amp;&amp; (SizeInBytes &gt; 0))
<a name="l00061"></a>00061     {
<a name="l00062"></a>00062         std::size_t Start = myData.size();
<a name="l00063"></a>00063         myData.resize(Start + SizeInBytes);
<a name="l00064"></a>00064         memcpy(&amp;myData[Start], Data, SizeInBytes);
<a name="l00065"></a>00065     }
<a name="l00066"></a>00066 }
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 
<a name="l00072"></a><a class="code" href="classsf_1_1Packet.htm#3a7a30fb7a39e59df0cbd773756f60da">00072</a> <span class="keywordtype">void</span> <a class="code" href="classsf_1_1Packet.htm#3a7a30fb7a39e59df0cbd773756f60da" title="Clear the packet data.">Packet::Clear</a>()
<a name="l00073"></a>00073 {
<a name="l00074"></a>00074     myData.clear();
<a name="l00075"></a>00075     myReadPos = 0;
<a name="l00076"></a>00076     myIsValid = <span class="keyword">true</span>;
<a name="l00077"></a>00077 }
<a name="l00078"></a>00078 
<a name="l00079"></a>00079 
<a name="l00085"></a><a class="code" href="classsf_1_1Packet.htm#78286172beef1f89bd2a77edb7118c7a">00085</a> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classsf_1_1Packet.htm#78286172beef1f89bd2a77edb7118c7a" title="Get a pointer to the data contained in the packet Warning : the returned pointer...">Packet::GetData</a>()<span class="keyword"> const</span>
<a name="l00086"></a>00086 <span class="keyword"></span>{
<a name="l00087"></a>00087     <span class="keywordflow">return</span> !myData.empty() ? &amp;myData[0] : NULL;
<a name="l00088"></a>00088 }
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 
<a name="l00094"></a><a class="code" href="classsf_1_1Packet.htm#4e6fcdc0ff42ad45b33cea22be253b0d">00094</a> std::size_t <a class="code" href="classsf_1_1Packet.htm#4e6fcdc0ff42ad45b33cea22be253b0d" title="Get the size of the data contained in the packet.">Packet::GetDataSize</a>()<span class="keyword"> const</span>
<a name="l00095"></a>00095 <span class="keyword"></span>{
<a name="l00096"></a>00096     <span class="keywordflow">return</span> myData.size();
<a name="l00097"></a>00097 }
<a name="l00098"></a>00098 
<a name="l00099"></a>00099 
<a name="l00103"></a><a class="code" href="classsf_1_1Packet.htm#8d587905fb63e62419f1cc338eceed36">00103</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1Packet.htm#8d587905fb63e62419f1cc338eceed36" title="Tell if the reading position has reached the end of the packet.">Packet::EndOfPacket</a>()<span class="keyword"> const</span>
<a name="l00104"></a>00104 <span class="keyword"></span>{
<a name="l00105"></a>00105     <span class="keywordflow">return</span> myReadPos &gt;= myData.size();
<a name="l00106"></a>00106 }
<a name="l00107"></a>00107 
<a name="l00108"></a>00108 
<a name="l00112"></a><a class="code" href="classsf_1_1Packet.htm#087ae98bb7e93f8c82b29b88aee2f8d6">00112</a> <a class="code" href="classsf_1_1Packet.htm#087ae98bb7e93f8c82b29b88aee2f8d6" title="Return the validity of packet.">Packet::operator bool</a>()<span class="keyword"> const</span>
<a name="l00113"></a>00113 <span class="keyword"></span>{
<a name="l00114"></a>00114     <span class="keywordflow">return</span> myIsValid;
<a name="l00115"></a>00115 }
<a name="l00116"></a>00116 
<a name="l00117"></a>00117 
<a name="l00121"></a><a class="code" href="classsf_1_1Packet.htm#8dfd4b8767cfd705a71d79b76d12ee16">00121</a> <a class="code" href="classsf_1_1Packet.htm" title="Packet wraps data to send / to receive through the network.">Packet</a>&amp; <a class="code" href="classsf_1_1Packet.htm#8dfd4b8767cfd705a71d79b76d12ee16" title="Operator &amp;gt;&amp;gt; overloads to extract data from the packet.">Packet::operator &gt;&gt;</a>(<span class="keywordtype">bool</span>&amp; Data)
<a name="l00122"></a>00122 {
<a name="l00123"></a>00123     Uint8 Value;
<a name="l00124"></a>00124     <span class="keywordflow">if</span> (*<span class="keyword">this</span> &gt;&gt; Value)
<a name="l00125"></a>00125         Data = (Value != 0);
<a name="l00126"></a>00126 
<a name="l00127"></a>00127     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00128"></a>00128 }
<a name="l00129"></a>00129 <a class="code" href="classsf_1_1Packet.htm" title="Packet wraps data to send / to receive through the network.">Packet</a>&amp; <a class="code" href="classsf_1_1Packet.htm#8dfd4b8767cfd705a71d79b76d12ee16" title="Operator &amp;gt;&amp;gt; overloads to extract data from the packet.">Packet::operator &gt;&gt;</a>(Int8&amp; Data)
<a name="l00130"></a>00130 {
<a name="l00131"></a>00131     <span class="keywordflow">if</span> (CheckSize(<span class="keyword">sizeof</span>(Data)))
<a name="l00132"></a>00132     {
<a name="l00133"></a>00133         Data = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>Int8*<span class="keyword">&gt;</span>(<a class="code" href="classsf_1_1Packet.htm#78286172beef1f89bd2a77edb7118c7a" title="Get a pointer to the data contained in the packet Warning : the returned pointer...">GetData</a>() + myReadPos);
<a name="l00134"></a>00134         myReadPos += <span class="keyword">sizeof</span>(Data);
<a name="l00135"></a>00135     }
<a name="l00136"></a>00136 
<a name="l00137"></a>00137     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00138"></a>00138 }
<a name="l00139"></a>00139 Packet&amp; <a class="code" href="classsf_1_1Packet.htm#8dfd4b8767cfd705a71d79b76d12ee16" title="Operator &amp;gt;&amp;gt; overloads to extract data from the packet.">Packet::operator &gt;&gt;</a>(Uint8&amp; Data)
<a name="l00140"></a>00140 {
<a name="l00141"></a>00141     <span class="keywordflow">if</span> (CheckSize(<span class="keyword">sizeof</span>(Data)))
<a name="l00142"></a>00142     {
<a name="l00143"></a>00143         Data = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>Uint8*<span class="keyword">&gt;</span>(<a class="code" href="classsf_1_1Packet.htm#78286172beef1f89bd2a77edb7118c7a" title="Get a pointer to the data contained in the packet Warning : the returned pointer...">GetData</a>() + myReadPos);
<a name="l00144"></a>00144         myReadPos += <span class="keyword">sizeof</span>(Data);
<a name="l00145"></a>00145     }
<a name="l00146"></a>00146 
<a name="l00147"></a>00147     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00148"></a>00148 }
<a name="l00149"></a>00149 Packet&amp; <a class="code" href="classsf_1_1Packet.htm#8dfd4b8767cfd705a71d79b76d12ee16" title="Operator &amp;gt;&amp;gt; overloads to extract data from the packet.">Packet::operator &gt;&gt;</a>(Int16&amp; Data)
<a name="l00150"></a>00150 {
<a name="l00151"></a>00151     <span class="keywordflow">if</span> (CheckSize(<span class="keyword">sizeof</span>(Data)))
<a name="l00152"></a>00152     {
<a name="l00153"></a>00153         Data = ntohs(*reinterpret_cast&lt;const Int16*&gt;(<a class="code" href="classsf_1_1Packet.htm#78286172beef1f89bd2a77edb7118c7a" title="Get a pointer to the data contained in the packet Warning : the returned pointer...">GetData</a>() + myReadPos));
<a name="l00154"></a>00154         myReadPos += <span class="keyword">sizeof</span>(Data);
<a name="l00155"></a>00155     }
<a name="l00156"></a>00156 
<a name="l00157"></a>00157     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00158"></a>00158 }
<a name="l00159"></a>00159 Packet&amp; <a class="code" href="classsf_1_1Packet.htm#8dfd4b8767cfd705a71d79b76d12ee16" title="Operator &amp;gt;&amp;gt; overloads to extract data from the packet.">Packet::operator &gt;&gt;</a>(Uint16&amp; Data)
<a name="l00160"></a>00160 {
<a name="l00161"></a>00161     <span class="keywordflow">if</span> (CheckSize(<span class="keyword">sizeof</span>(Data)))
<a name="l00162"></a>00162     {
<a name="l00163"></a>00163         Data = ntohs(*reinterpret_cast&lt;const Uint16*&gt;(<a class="code" href="classsf_1_1Packet.htm#78286172beef1f89bd2a77edb7118c7a" title="Get a pointer to the data contained in the packet Warning : the returned pointer...">GetData</a>() + myReadPos));
<a name="l00164"></a>00164         myReadPos += <span class="keyword">sizeof</span>(Data);
<a name="l00165"></a>00165     }
<a name="l00166"></a>00166 
<a name="l00167"></a>00167     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00168"></a>00168 }
<a name="l00169"></a>00169 Packet&amp; <a class="code" href="classsf_1_1Packet.htm#8dfd4b8767cfd705a71d79b76d12ee16" title="Operator &amp;gt;&amp;gt; overloads to extract data from the packet.">Packet::operator &gt;&gt;</a>(Int32&amp; Data)
<a name="l00170"></a>00170 {
<a name="l00171"></a>00171     <span class="keywordflow">if</span> (CheckSize(<span class="keyword">sizeof</span>(Data)))
<a name="l00172"></a>00172     {
<a name="l00173"></a>00173         Data = ntohl(*reinterpret_cast&lt;const Int32*&gt;(<a class="code" href="classsf_1_1Packet.htm#78286172beef1f89bd2a77edb7118c7a" title="Get a pointer to the data contained in the packet Warning : the returned pointer...">GetData</a>() + myReadPos));
<a name="l00174"></a>00174         myReadPos += <span class="keyword">sizeof</span>(Data);
<a name="l00175"></a>00175     }
<a name="l00176"></a>00176 
<a name="l00177"></a>00177     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00178"></a>00178 }
<a name="l00179"></a>00179 Packet&amp; <a class="code" href="classsf_1_1Packet.htm#8dfd4b8767cfd705a71d79b76d12ee16" title="Operator &amp;gt;&amp;gt; overloads to extract data from the packet.">Packet::operator &gt;&gt;</a>(Uint32&amp; Data)
<a name="l00180"></a>00180 {
<a name="l00181"></a>00181     <span class="keywordflow">if</span> (CheckSize(<span class="keyword">sizeof</span>(Data)))
<a name="l00182"></a>00182     {
<a name="l00183"></a>00183         Data = ntohl(*reinterpret_cast&lt;const Uint32*&gt;(<a class="code" href="classsf_1_1Packet.htm#78286172beef1f89bd2a77edb7118c7a" title="Get a pointer to the data contained in the packet Warning : the returned pointer...">GetData</a>() + myReadPos));
<a name="l00184"></a>00184         myReadPos += <span class="keyword">sizeof</span>(Data);
<a name="l00185"></a>00185     }
<a name="l00186"></a>00186 
<a name="l00187"></a>00187     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00188"></a>00188 }
<a name="l00189"></a>00189 Packet&amp; <a class="code" href="classsf_1_1Packet.htm#8dfd4b8767cfd705a71d79b76d12ee16" title="Operator &amp;gt;&amp;gt; overloads to extract data from the packet.">Packet::operator &gt;&gt;</a>(<span class="keywordtype">float</span>&amp; Data)
<a name="l00190"></a>00190 {
<a name="l00191"></a>00191     <span class="keywordflow">if</span> (CheckSize(<span class="keyword">sizeof</span>(Data)))
<a name="l00192"></a>00192     {
<a name="l00193"></a>00193         Data = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span>*<span class="keyword">&gt;</span>(<a class="code" href="classsf_1_1Packet.htm#78286172beef1f89bd2a77edb7118c7a" title="Get a pointer to the data contained in the packet Warning : the returned pointer...">GetData</a>() + myReadPos);
<a name="l00194"></a>00194         myReadPos += <span class="keyword">sizeof</span>(Data);
<a name="l00195"></a>00195     }
<a name="l00196"></a>00196 
<a name="l00197"></a>00197     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00198"></a>00198 }
<a name="l00199"></a>00199 Packet&amp; <a class="code" href="classsf_1_1Packet.htm#8dfd4b8767cfd705a71d79b76d12ee16" title="Operator &amp;gt;&amp;gt; overloads to extract data from the packet.">Packet::operator &gt;&gt;</a>(<span class="keywordtype">double</span>&amp; Data)
<a name="l00200"></a>00200 {
<a name="l00201"></a>00201     <span class="keywordflow">if</span> (CheckSize(<span class="keyword">sizeof</span>(Data)))
<a name="l00202"></a>00202     {
<a name="l00203"></a>00203         Data = *<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">double</span>*<span class="keyword">&gt;</span>(<a class="code" href="classsf_1_1Packet.htm#78286172beef1f89bd2a77edb7118c7a" title="Get a pointer to the data contained in the packet Warning : the returned pointer...">GetData</a>() + myReadPos);
<a name="l00204"></a>00204         myReadPos += <span class="keyword">sizeof</span>(Data);
<a name="l00205"></a>00205     }
<a name="l00206"></a>00206 
<a name="l00207"></a>00207     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00208"></a>00208 }
<a name="l00209"></a>00209 Packet&amp; <a class="code" href="classsf_1_1Packet.htm#8dfd4b8767cfd705a71d79b76d12ee16" title="Operator &amp;gt;&amp;gt; overloads to extract data from the packet.">Packet::operator &gt;&gt;</a>(<span class="keywordtype">char</span>* Data)
<a name="l00210"></a>00210 {
<a name="l00211"></a>00211     <span class="comment">// First extract string length</span>
<a name="l00212"></a>00212     Uint32 Length;
<a name="l00213"></a>00213     *<span class="keyword">this</span> &gt;&gt; Length;
<a name="l00214"></a>00214 
<a name="l00215"></a>00215     <span class="keywordflow">if</span> ((Length &gt; 0) &amp;&amp; CheckSize(Length))
<a name="l00216"></a>00216     {
<a name="l00217"></a>00217         <span class="comment">// Then extract characters</span>
<a name="l00218"></a>00218         memcpy(Data, <a class="code" href="classsf_1_1Packet.htm#78286172beef1f89bd2a77edb7118c7a" title="Get a pointer to the data contained in the packet Warning : the returned pointer...">GetData</a>() + myReadPos, Length);
<a name="l00219"></a>00219         Data[Length] = <span class="charliteral">'\0'</span>;
<a name="l00220"></a>00220 
<a name="l00221"></a>00221         <span class="comment">// Update reading position</span>
<a name="l00222"></a>00222         myReadPos += Length;
<a name="l00223"></a>00223     }
<a name="l00224"></a>00224 
<a name="l00225"></a>00225     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00226"></a>00226 }
<a name="l00227"></a>00227 Packet&amp; <a class="code" href="classsf_1_1Packet.htm#8dfd4b8767cfd705a71d79b76d12ee16" title="Operator &amp;gt;&amp;gt; overloads to extract data from the packet.">Packet::operator &gt;&gt;</a>(std::string&amp; Data)
<a name="l00228"></a>00228 {
<a name="l00229"></a>00229     <span class="comment">// First extract string length</span>
<a name="l00230"></a>00230     Uint32 Length;
<a name="l00231"></a>00231     *<span class="keyword">this</span> &gt;&gt; Length;
<a name="l00232"></a>00232 
<a name="l00233"></a>00233     Data.clear();
<a name="l00234"></a>00234     <span class="keywordflow">if</span> ((Length &gt; 0) &amp;&amp; CheckSize(Length))
<a name="l00235"></a>00235     {
<a name="l00236"></a>00236         <span class="comment">// Then extract characters</span>
<a name="l00237"></a>00237         Data.assign(<a class="code" href="classsf_1_1Packet.htm#78286172beef1f89bd2a77edb7118c7a" title="Get a pointer to the data contained in the packet Warning : the returned pointer...">GetData</a>() + myReadPos, Length);
<a name="l00238"></a>00238 
<a name="l00239"></a>00239         <span class="comment">// Update reading position</span>
<a name="l00240"></a>00240         myReadPos += Length;
<a name="l00241"></a>00241     }
<a name="l00242"></a>00242 
<a name="l00243"></a>00243     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00244"></a>00244 }
<a name="l00245"></a>00245 Packet&amp; <a class="code" href="classsf_1_1Packet.htm#8dfd4b8767cfd705a71d79b76d12ee16" title="Operator &amp;gt;&amp;gt; overloads to extract data from the packet.">Packet::operator &gt;&gt;</a>(<span class="keywordtype">wchar_t</span>* Data)
<a name="l00246"></a>00246 {
<a name="l00247"></a>00247     <span class="comment">// First extract string length</span>
<a name="l00248"></a>00248     Uint32 Length;
<a name="l00249"></a>00249     *<span class="keyword">this</span> &gt;&gt; Length;
<a name="l00250"></a>00250 
<a name="l00251"></a>00251     <span class="keywordflow">if</span> ((Length &gt; 0) &amp;&amp; CheckSize(Length * <span class="keyword">sizeof</span>(Int32)))
<a name="l00252"></a>00252     {
<a name="l00253"></a>00253         <span class="comment">// Then extract characters</span>
<a name="l00254"></a>00254         <span class="keywordflow">for</span> (Uint32 i = 0; i &lt; Length; ++i)
<a name="l00255"></a>00255         {
<a name="l00256"></a>00256             Uint32 c;
<a name="l00257"></a>00257             *<span class="keyword">this</span> &gt;&gt; c;
<a name="l00258"></a>00258             Data[i] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">wchar_t</span><span class="keyword">&gt;</span>(c);
<a name="l00259"></a>00259         }
<a name="l00260"></a>00260         Data[Length] = L<span class="charliteral">'\0'</span>;
<a name="l00261"></a>00261     }
<a name="l00262"></a>00262 
<a name="l00263"></a>00263     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00264"></a>00264 }
<a name="l00265"></a>00265 Packet&amp; <a class="code" href="classsf_1_1Packet.htm#8dfd4b8767cfd705a71d79b76d12ee16" title="Operator &amp;gt;&amp;gt; overloads to extract data from the packet.">Packet::operator &gt;&gt;</a>(std::wstring&amp; Data)
<a name="l00266"></a>00266 {
<a name="l00267"></a>00267     <span class="comment">// First extract string length</span>
<a name="l00268"></a>00268     Uint32 Length;
<a name="l00269"></a>00269     *<span class="keyword">this</span> &gt;&gt; Length;
<a name="l00270"></a>00270 
<a name="l00271"></a>00271     Data.clear();
<a name="l00272"></a>00272     <span class="keywordflow">if</span> ((Length &gt; 0) &amp;&amp; CheckSize(Length * <span class="keyword">sizeof</span>(Int32)))
<a name="l00273"></a>00273     {
<a name="l00274"></a>00274         <span class="comment">// Then extract characters</span>
<a name="l00275"></a>00275         <span class="keywordflow">for</span> (Uint32 i = 0; i &lt; Length; ++i)
<a name="l00276"></a>00276         {
<a name="l00277"></a>00277             Uint32 c;
<a name="l00278"></a>00278             *<span class="keyword">this</span> &gt;&gt; c;
<a name="l00279"></a>00279             Data += <span class="keyword">static_cast&lt;</span><span class="keywordtype">wchar_t</span><span class="keyword">&gt;</span>(c);
<a name="l00280"></a>00280         }
<a name="l00281"></a>00281     }
<a name="l00282"></a>00282 
<a name="l00283"></a>00283     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00284"></a>00284 }
<a name="l00285"></a>00285 
<a name="l00286"></a>00286 
<a name="l00290"></a><a class="code" href="classsf_1_1Packet.htm#63d813d3e0e7f8438ad15a0130b4f550">00290</a> <a class="code" href="classsf_1_1Packet.htm" title="Packet wraps data to send / to receive through the network.">Packet</a>&amp; <a class="code" href="classsf_1_1Packet.htm#63d813d3e0e7f8438ad15a0130b4f550" title="Operator &amp;lt;&amp;lt; overloads to put data into the packet.">Packet::operator &lt;&lt;</a>(<span class="keywordtype">bool</span> Data)
<a name="l00291"></a>00291 {
<a name="l00292"></a>00292     *this &lt;&lt; static_cast&lt;Uint8&gt;(Data);
<a name="l00293"></a>00293     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00294"></a>00294 }
<a name="l00295"></a>00295 <a class="code" href="classsf_1_1Packet.htm" title="Packet wraps data to send / to receive through the network.">Packet</a>&amp; <a class="code" href="classsf_1_1Packet.htm#63d813d3e0e7f8438ad15a0130b4f550" title="Operator &amp;lt;&amp;lt; overloads to put data into the packet.">Packet::operator &lt;&lt;</a>(Int8 Data)
<a name="l00296"></a>00296 {
<a name="l00297"></a>00297     <a class="code" href="classsf_1_1Packet.htm#aaa020852bd7be75625b9f64b3a77c64" title="Append data to the end of the packet.">Append</a>(&amp;Data, <span class="keyword">sizeof</span>(Data));
<a name="l00298"></a>00298     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00299"></a>00299 }
<a name="l00300"></a>00300 Packet&amp; <a class="code" href="classsf_1_1Packet.htm#63d813d3e0e7f8438ad15a0130b4f550" title="Operator &amp;lt;&amp;lt; overloads to put data into the packet.">Packet::operator &lt;&lt;</a>(Uint8 Data)
<a name="l00301"></a>00301 {
<a name="l00302"></a>00302     <a class="code" href="classsf_1_1Packet.htm#aaa020852bd7be75625b9f64b3a77c64" title="Append data to the end of the packet.">Append</a>(&amp;Data, <span class="keyword">sizeof</span>(Data));
<a name="l00303"></a>00303     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00304"></a>00304 }
<a name="l00305"></a>00305 Packet&amp; <a class="code" href="classsf_1_1Packet.htm#63d813d3e0e7f8438ad15a0130b4f550" title="Operator &amp;lt;&amp;lt; overloads to put data into the packet.">Packet::operator &lt;&lt;</a>(Int16 Data)
<a name="l00306"></a>00306 {
<a name="l00307"></a>00307     Int16 ToWrite = htons(Data);
<a name="l00308"></a>00308     <a class="code" href="classsf_1_1Packet.htm#aaa020852bd7be75625b9f64b3a77c64" title="Append data to the end of the packet.">Append</a>(&amp;ToWrite, <span class="keyword">sizeof</span>(ToWrite));
<a name="l00309"></a>00309     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00310"></a>00310 }
<a name="l00311"></a>00311 Packet&amp; <a class="code" href="classsf_1_1Packet.htm#63d813d3e0e7f8438ad15a0130b4f550" title="Operator &amp;lt;&amp;lt; overloads to put data into the packet.">Packet::operator &lt;&lt;</a>(Uint16 Data)
<a name="l00312"></a>00312 {
<a name="l00313"></a>00313     Uint16 ToWrite = htons(Data);
<a name="l00314"></a>00314     <a class="code" href="classsf_1_1Packet.htm#aaa020852bd7be75625b9f64b3a77c64" title="Append data to the end of the packet.">Append</a>(&amp;ToWrite, <span class="keyword">sizeof</span>(ToWrite));
<a name="l00315"></a>00315     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00316"></a>00316 }
<a name="l00317"></a>00317 Packet&amp; <a class="code" href="classsf_1_1Packet.htm#63d813d3e0e7f8438ad15a0130b4f550" title="Operator &amp;lt;&amp;lt; overloads to put data into the packet.">Packet::operator &lt;&lt;</a>(Int32 Data)
<a name="l00318"></a>00318 {
<a name="l00319"></a>00319     Int32 ToWrite = htonl(Data);
<a name="l00320"></a>00320     <a class="code" href="classsf_1_1Packet.htm#aaa020852bd7be75625b9f64b3a77c64" title="Append data to the end of the packet.">Append</a>(&amp;ToWrite, <span class="keyword">sizeof</span>(ToWrite));
<a name="l00321"></a>00321     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00322"></a>00322 }
<a name="l00323"></a>00323 Packet&amp; <a class="code" href="classsf_1_1Packet.htm#63d813d3e0e7f8438ad15a0130b4f550" title="Operator &amp;lt;&amp;lt; overloads to put data into the packet.">Packet::operator &lt;&lt;</a>(Uint32 Data)
<a name="l00324"></a>00324 {
<a name="l00325"></a>00325     Uint32 ToWrite = htonl(Data);
<a name="l00326"></a>00326     <a class="code" href="classsf_1_1Packet.htm#aaa020852bd7be75625b9f64b3a77c64" title="Append data to the end of the packet.">Append</a>(&amp;ToWrite, <span class="keyword">sizeof</span>(ToWrite));
<a name="l00327"></a>00327     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00328"></a>00328 }
<a name="l00329"></a>00329 Packet&amp; <a class="code" href="classsf_1_1Packet.htm#63d813d3e0e7f8438ad15a0130b4f550" title="Operator &amp;lt;&amp;lt; overloads to put data into the packet.">Packet::operator &lt;&lt;</a>(<span class="keywordtype">float</span> Data)
<a name="l00330"></a>00330 {
<a name="l00331"></a>00331     <a class="code" href="classsf_1_1Packet.htm#aaa020852bd7be75625b9f64b3a77c64" title="Append data to the end of the packet.">Append</a>(&amp;Data, <span class="keyword">sizeof</span>(Data));
<a name="l00332"></a>00332     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00333"></a>00333 }
<a name="l00334"></a>00334 Packet&amp; <a class="code" href="classsf_1_1Packet.htm#63d813d3e0e7f8438ad15a0130b4f550" title="Operator &amp;lt;&amp;lt; overloads to put data into the packet.">Packet::operator &lt;&lt;</a>(<span class="keywordtype">double</span> Data)
<a name="l00335"></a>00335 {
<a name="l00336"></a>00336     <a class="code" href="classsf_1_1Packet.htm#aaa020852bd7be75625b9f64b3a77c64" title="Append data to the end of the packet.">Append</a>(&amp;Data, <span class="keyword">sizeof</span>(Data));
<a name="l00337"></a>00337     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00338"></a>00338 }
<a name="l00339"></a>00339 Packet&amp; <a class="code" href="classsf_1_1Packet.htm#63d813d3e0e7f8438ad15a0130b4f550" title="Operator &amp;lt;&amp;lt; overloads to put data into the packet.">Packet::operator &lt;&lt;</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* Data)
<a name="l00340"></a>00340 {
<a name="l00341"></a>00341     <span class="comment">// First insert string length</span>
<a name="l00342"></a>00342     Uint32 Length = 0;
<a name="l00343"></a>00343     <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keywordtype">char</span>* c = Data; *c != <span class="charliteral">'\0'</span>; ++c)
<a name="l00344"></a>00344         ++Length;
<a name="l00345"></a>00345     *<span class="keyword">this</span> &lt;&lt; Length;
<a name="l00346"></a>00346 
<a name="l00347"></a>00347     <span class="comment">// Then insert characters</span>
<a name="l00348"></a>00348     <a class="code" href="classsf_1_1Packet.htm#aaa020852bd7be75625b9f64b3a77c64" title="Append data to the end of the packet.">Append</a>(Data, Length * <span class="keyword">sizeof</span>(<span class="keywordtype">char</span>));
<a name="l00349"></a>00349 
<a name="l00350"></a>00350     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00351"></a>00351 }
<a name="l00352"></a>00352 Packet&amp; <a class="code" href="classsf_1_1Packet.htm#63d813d3e0e7f8438ad15a0130b4f550" title="Operator &amp;lt;&amp;lt; overloads to put data into the packet.">Packet::operator &lt;&lt;</a>(<span class="keyword">const</span> std::string&amp; Data)
<a name="l00353"></a>00353 {
<a name="l00354"></a>00354     <span class="comment">// First insert string length</span>
<a name="l00355"></a>00355     Uint32 Length = <span class="keyword">static_cast&lt;</span>Uint32<span class="keyword">&gt;</span>(Data.size());
<a name="l00356"></a>00356     *<span class="keyword">this</span> &lt;&lt; Length;
<a name="l00357"></a>00357 
<a name="l00358"></a>00358     <span class="comment">// Then insert characters</span>
<a name="l00359"></a>00359     <span class="keywordflow">if</span> (Length &gt; 0)
<a name="l00360"></a>00360     {
<a name="l00361"></a>00361         <a class="code" href="classsf_1_1Packet.htm#aaa020852bd7be75625b9f64b3a77c64" title="Append data to the end of the packet.">Append</a>(Data.c_str(), Length * <span class="keyword">sizeof</span>(std::string::value_type));
<a name="l00362"></a>00362     }
<a name="l00363"></a>00363 
<a name="l00364"></a>00364     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00365"></a>00365 }
<a name="l00366"></a>00366 Packet&amp; <a class="code" href="classsf_1_1Packet.htm#63d813d3e0e7f8438ad15a0130b4f550" title="Operator &amp;lt;&amp;lt; overloads to put data into the packet.">Packet::operator &lt;&lt;</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* Data)
<a name="l00367"></a>00367 {
<a name="l00368"></a>00368     <span class="comment">// First insert string length</span>
<a name="l00369"></a>00369     Uint32 Length = 0;
<a name="l00370"></a>00370     <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* c = Data; *c != L<span class="charliteral">'\0'</span>; ++c)
<a name="l00371"></a>00371         ++Length;
<a name="l00372"></a>00372     *<span class="keyword">this</span> &lt;&lt; Length;
<a name="l00373"></a>00373 
<a name="l00374"></a>00374     <span class="comment">// Then insert characters</span>
<a name="l00375"></a>00375     <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* c = Data; *c != L<span class="charliteral">'\0'</span>; ++c)
<a name="l00376"></a>00376         *<span class="keyword">this</span> &lt;&lt; static_cast&lt;Int32&gt;(*c);
<a name="l00377"></a>00377 
<a name="l00378"></a>00378     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00379"></a>00379 }
<a name="l00380"></a>00380 Packet&amp; <a class="code" href="classsf_1_1Packet.htm#63d813d3e0e7f8438ad15a0130b4f550" title="Operator &amp;lt;&amp;lt; overloads to put data into the packet.">Packet::operator &lt;&lt;</a>(<span class="keyword">const</span> std::wstring&amp; Data)
<a name="l00381"></a>00381 {
<a name="l00382"></a>00382     <span class="comment">// First insert string length</span>
<a name="l00383"></a>00383     Uint32 Length = <span class="keyword">static_cast&lt;</span>Uint32<span class="keyword">&gt;</span>(Data.size());
<a name="l00384"></a>00384     *<span class="keyword">this</span> &lt;&lt; Length;
<a name="l00385"></a>00385 
<a name="l00386"></a>00386     <span class="comment">// Then insert characters</span>
<a name="l00387"></a>00387     <span class="keywordflow">if</span> (Length &gt; 0)
<a name="l00388"></a>00388     {
<a name="l00389"></a>00389         <span class="keywordflow">for</span> (std::wstring::const_iterator c = Data.begin(); c != Data.end(); ++c)
<a name="l00390"></a>00390             *<span class="keyword">this</span> &lt;&lt; static_cast&lt;Int32&gt;(*c);
<a name="l00391"></a>00391     }
<a name="l00392"></a>00392 
<a name="l00393"></a>00393     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00394"></a>00394 }
<a name="l00395"></a>00395 
<a name="l00396"></a>00396 
<a name="l00400"></a>00400 <span class="keywordtype">bool</span> Packet::CheckSize(std::size_t Size)
<a name="l00401"></a>00401 {
<a name="l00402"></a>00402     myIsValid = myIsValid &amp;&amp; (myReadPos + Size &lt;= myData.size());
<a name="l00403"></a>00403 
<a name="l00404"></a>00404     <span class="keywordflow">return</span> myIsValid;
<a name="l00405"></a>00405 }
<a name="l00406"></a>00406 
<a name="l00407"></a>00407 
<a name="l00411"></a>00411 <span class="keyword">const</span> <span class="keywordtype">char</span>* Packet::OnSend(std::size_t&amp; DataSize)
<a name="l00412"></a>00412 {
<a name="l00413"></a>00413     DataSize = <a class="code" href="classsf_1_1Packet.htm#4e6fcdc0ff42ad45b33cea22be253b0d" title="Get the size of the data contained in the packet.">GetDataSize</a>();
<a name="l00414"></a>00414     <span class="keywordflow">return</span> <a class="code" href="classsf_1_1Packet.htm#78286172beef1f89bd2a77edb7118c7a" title="Get a pointer to the data contained in the packet Warning : the returned pointer...">GetData</a>();
<a name="l00415"></a>00415 }
<a name="l00416"></a>00416 
<a name="l00417"></a>00417 
<a name="l00421"></a>00421 <span class="keywordtype">void</span> Packet::OnReceive(<span class="keyword">const</span> <span class="keywordtype">char</span>* Data, std::size_t DataSize)
<a name="l00422"></a>00422 {
<a name="l00423"></a>00423     <a class="code" href="classsf_1_1Packet.htm#aaa020852bd7be75625b9f64b3a77c64" title="Append data to the end of the packet.">Append</a>(Data, DataSize);
<a name="l00424"></a>00424 }
<a name="l00425"></a>00425 
<a name="l00426"></a>00426 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
