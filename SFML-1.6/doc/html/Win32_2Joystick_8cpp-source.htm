<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>Joystick.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#define _WIN32_WINDOWS 0x0501</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">#define _WIN32_WINNT   0x0501</span>
<a name="l00030"></a>00030 <span class="preprocessor"></span><span class="preprocessor">#include &lt;SFML/Window/Joystick.hpp&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;windows.h&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;mmsystem.h&gt;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="keyword">namespace </span>sf
<a name="l00036"></a>00036 {
<a name="l00037"></a>00037 <span class="keyword">namespace </span>priv
<a name="l00038"></a>00038 {
<a name="l00042"></a>00042 <span class="keywordtype">void</span> Joystick::Initialize(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Index)
<a name="l00043"></a>00043 {
<a name="l00044"></a>00044     <span class="comment">// Reset state</span>
<a name="l00045"></a>00045     myIndex            = JOYSTICKID1;
<a name="l00046"></a>00046     myNbButtons        = 0;
<a name="l00047"></a>00047     myIsConnected      = <span class="keyword">false</span>;
<a name="l00048"></a>00048     myHasContinuousPOV = <span class="keyword">false</span>;
<a name="l00049"></a>00049     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; Joy::AxisCount; ++i)
<a name="l00050"></a>00050         myAxes[i] = <span class="keyword">false</span>;
<a name="l00051"></a>00051 
<a name="l00052"></a>00052     <span class="comment">// Get the Index-th connected joystick</span>
<a name="l00053"></a>00053     MMRESULT Error;
<a name="l00054"></a>00054     JOYINFOEX JoyInfo;
<a name="l00055"></a>00055     JoyInfo.dwSize = <span class="keyword">sizeof</span>(JoyInfo);
<a name="l00056"></a>00056     JoyInfo.dwFlags = JOY_RETURNALL;
<a name="l00057"></a>00057     <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NbFound = 0; (Error = joyGetPosEx(myIndex, &amp;JoyInfo)) != JOYERR_PARMS; myIndex++)
<a name="l00058"></a>00058     {
<a name="l00059"></a>00059         <span class="comment">// Check if the current joystick is connected</span>
<a name="l00060"></a>00060         <span class="keywordflow">if</span> (Error == JOYERR_NOERROR)
<a name="l00061"></a>00061         {
<a name="l00062"></a>00062             <span class="comment">// Check if it's the required index</span>
<a name="l00063"></a>00063             <span class="keywordflow">if</span> (NbFound == Index)
<a name="l00064"></a>00064             {
<a name="l00065"></a>00065                 <span class="comment">// Ok : store its parameters and return</span>
<a name="l00066"></a>00066                 myIsConnected = <span class="keyword">true</span>;
<a name="l00067"></a>00067                 JOYCAPS Caps;
<a name="l00068"></a>00068                 joyGetDevCaps(myIndex, &amp;Caps, <span class="keyword">sizeof</span>(Caps));
<a name="l00069"></a>00069                 myNbButtons = Caps.wNumButtons;
<a name="l00070"></a>00070                 <span class="keywordflow">if</span> (myNbButtons &gt; <a class="code" href="namespacesf_1_1Joy.htm#bb37a72f42b3ef9841fcf8270d0ac881a555e27e351d2052df5f4b7b6e6953bf" title="Total number of supported joystick buttons.">Joy::ButtonCount</a>)
<a name="l00071"></a>00071                     myNbButtons = <a class="code" href="namespacesf_1_1Joy.htm#bb37a72f42b3ef9841fcf8270d0ac881a555e27e351d2052df5f4b7b6e6953bf" title="Total number of supported joystick buttons.">Joy::ButtonCount</a>;
<a name="l00072"></a>00072 
<a name="l00073"></a>00073                 myAxes[Joy::AxisX]   = <span class="keyword">true</span>;
<a name="l00074"></a>00074                 myAxes[Joy::AxisY]   = <span class="keyword">true</span>;
<a name="l00075"></a>00075                 myAxes[Joy::AxisZ]   = (Caps.wCaps &amp; JOYCAPS_HASZ) != 0;
<a name="l00076"></a>00076                 myAxes[Joy::AxisR]   = (Caps.wCaps &amp; JOYCAPS_HASR) != 0;
<a name="l00077"></a>00077                 myAxes[Joy::AxisU]   = (Caps.wCaps &amp; JOYCAPS_HASU) != 0;
<a name="l00078"></a>00078                 myAxes[Joy::AxisV]   = (Caps.wCaps &amp; JOYCAPS_HASV) != 0;
<a name="l00079"></a>00079                 myAxes[Joy::AxisPOV] = (Caps.wCaps &amp; JOYCAPS_HASPOV) != 0;
<a name="l00080"></a>00080                 myHasContinuousPOV   = (Caps.wCaps &amp; JOYCAPS_POVCTS) != 0;
<a name="l00081"></a>00081 
<a name="l00082"></a>00082                 <span class="keywordflow">return</span>;
<a name="l00083"></a>00083             }
<a name="l00084"></a>00084 
<a name="l00085"></a>00085             <span class="comment">// Go to the next valid joystick</span>
<a name="l00086"></a>00086             ++NbFound;
<a name="l00087"></a>00087         }
<a name="l00088"></a>00088     }
<a name="l00089"></a>00089 }
<a name="l00090"></a>00090 
<a name="l00091"></a>00091 
<a name="l00095"></a>00095 JoystickState Joystick::UpdateState()
<a name="l00096"></a>00096 {
<a name="l00097"></a>00097     JoystickState State;
<a name="l00098"></a>00098 
<a name="l00099"></a>00099     <span class="keywordflow">if</span> (myIsConnected)
<a name="l00100"></a>00100     {
<a name="l00101"></a>00101         <span class="comment">// Get the joystick caps (for range conversions)</span>
<a name="l00102"></a>00102         JOYCAPS Caps;
<a name="l00103"></a>00103         <span class="keywordflow">if</span> (joyGetDevCaps(myIndex, &amp;Caps, <span class="keyword">sizeof</span>(Caps)) == JOYERR_NOERROR)
<a name="l00104"></a>00104         {
<a name="l00105"></a>00105             <span class="comment">// Get the current joystick state</span>
<a name="l00106"></a>00106             JOYINFOEX Pos;
<a name="l00107"></a>00107             Pos.dwFlags  = JOY_RETURNX | JOY_RETURNY | JOY_RETURNZ | JOY_RETURNR | JOY_RETURNU | JOY_RETURNV | JOY_RETURNBUTTONS;
<a name="l00108"></a>00108             Pos.dwFlags |= myHasContinuousPOV ? JOY_RETURNPOVCTS : JOY_RETURNPOV;
<a name="l00109"></a>00109             Pos.dwSize   = <span class="keyword">sizeof</span>(JOYINFOEX);
<a name="l00110"></a>00110             <span class="keywordflow">if</span> (joyGetPosEx(myIndex, &amp;Pos) == JOYERR_NOERROR)
<a name="l00111"></a>00111             {
<a name="l00112"></a>00112                 <span class="comment">// Axes</span>
<a name="l00113"></a>00113                 State.Axis[Joy::AxisX] = (Pos.dwXpos - (Caps.wXmax + Caps.wXmin) / 2.f) * 200.f / (Caps.wXmax - Caps.wXmin);
<a name="l00114"></a>00114                 State.Axis[Joy::AxisY] = (Pos.dwYpos - (Caps.wYmax + Caps.wYmin) / 2.f) * 200.f / (Caps.wYmax - Caps.wYmin);
<a name="l00115"></a>00115                 State.Axis[Joy::AxisZ] = (Pos.dwZpos - (Caps.wZmax + Caps.wZmin) / 2.f) * 200.f / (Caps.wZmax - Caps.wZmin);
<a name="l00116"></a>00116                 State.Axis[Joy::AxisR] = (Pos.dwRpos - (Caps.wRmax + Caps.wRmin) / 2.f) * 200.f / (Caps.wRmax - Caps.wRmin);
<a name="l00117"></a>00117                 State.Axis[Joy::AxisU] = (Pos.dwUpos - (Caps.wUmax + Caps.wUmin) / 2.f) * 200.f / (Caps.wUmax - Caps.wUmin);
<a name="l00118"></a>00118                 State.Axis[Joy::AxisV] = (Pos.dwVpos - (Caps.wVmax + Caps.wVmin) / 2.f) * 200.f / (Caps.wVmax - Caps.wVmin);
<a name="l00119"></a>00119 
<a name="l00120"></a>00120                 <span class="comment">// POV</span>
<a name="l00121"></a>00121                 <span class="keywordflow">if</span> (Pos.dwPOV != 0xFFFF)
<a name="l00122"></a>00122                     State.Axis[Joy::AxisPOV] = Pos.dwPOV / 100.f;
<a name="l00123"></a>00123                 <span class="keywordflow">else</span>
<a name="l00124"></a>00124                     State.Axis[Joy::AxisPOV] = -1.f;
<a name="l00125"></a>00125 
<a name="l00126"></a>00126                 <span class="comment">// Buttons</span>
<a name="l00127"></a>00127                 <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; GetButtonsCount(); ++i)
<a name="l00128"></a>00128                     State.Buttons[i] = (Pos.dwButtons &amp; (1 &lt;&lt; i)) != 0;
<a name="l00129"></a>00129             }
<a name="l00130"></a>00130         }
<a name="l00131"></a>00131     }
<a name="l00132"></a>00132 
<a name="l00133"></a>00133     <span class="keywordflow">return</span> State;
<a name="l00134"></a>00134 }
<a name="l00135"></a>00135 
<a name="l00136"></a>00136 
<a name="l00140"></a>00140 <span class="keywordtype">bool</span> Joystick::HasAxis(Joy::Axis Axis)<span class="keyword"> const</span>
<a name="l00141"></a>00141 <span class="keyword"></span>{
<a name="l00142"></a>00142     <span class="keywordflow">return</span> myAxes[Axis];
<a name="l00143"></a>00143 }
<a name="l00144"></a>00144 
<a name="l00145"></a>00145 
<a name="l00149"></a>00149 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Joystick::GetButtonsCount()<span class="keyword"> const</span>
<a name="l00150"></a>00150 <span class="keyword"></span>{
<a name="l00151"></a>00151     <span class="keywordflow">return</span> myNbButtons;
<a name="l00152"></a>00152 }
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 
<a name="l00155"></a>00155 } <span class="comment">// namespace priv</span>
<a name="l00156"></a>00156 
<a name="l00157"></a>00157 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
