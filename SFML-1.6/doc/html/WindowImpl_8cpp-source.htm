<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>WindowImpl.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Window/WindowImpl.hpp&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;SFML/Window/Event.hpp&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;SFML/Window/WindowListener.hpp&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;cmath&gt;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="preprocessor">#if defined(SFML_SYSTEM_WINDOWS)</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span>
<a name="l00036"></a>00036 <span class="preprocessor">    #include &lt;SFML/Window/Win32/WindowImplWin32.hpp&gt;</span>
<a name="l00037"></a>00037     <span class="keyword">typedef</span> sf::priv::WindowImplWin32 WindowImplType;
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="preprocessor">#elif defined(SFML_SYSTEM_LINUX) || defined(SFML_SYSTEM_FREEBSD)</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span>
<a name="l00041"></a>00041 <span class="preprocessor">    #include &lt;SFML/Window/Linux/WindowImplX11.hpp&gt;</span>
<a name="l00042"></a>00042     <span class="keyword">typedef</span> sf::priv::WindowImplX11 WindowImplType;
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="preprocessor">#elif defined(SFML_SYSTEM_MACOS)</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span>
<a name="l00046"></a>00046 <span class="preprocessor">    #include &lt;SFML/Window/Cocoa/WindowImplCocoa.hpp&gt;</span>
<a name="l00047"></a>00047     <span class="keyword">typedef</span> sf::priv::WindowImplCocoa WindowImplType;
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 <span class="preprocessor">#endif</span>
<a name="l00050"></a>00050 <span class="preprocessor"></span>
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="keyword">namespace </span>sf
<a name="l00053"></a>00053 {
<a name="l00054"></a>00054 <span class="keyword">namespace </span>priv
<a name="l00055"></a>00055 {
<a name="l00059"></a>00059 WindowImpl* WindowImpl::New()
<a name="l00060"></a>00060 {
<a name="l00061"></a>00061     <span class="keywordflow">return</span> <span class="keyword">new</span> WindowImplType();
<a name="l00062"></a>00062 }
<a name="l00063"></a>00063 
<a name="l00064"></a>00064 
<a name="l00068"></a>00068 WindowImpl* WindowImpl::New(VideoMode Mode, <span class="keyword">const</span> std::string&amp; Title, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> WindowStyle, WindowSettings&amp; Params)
<a name="l00069"></a>00069 {
<a name="l00070"></a>00070     <span class="keywordflow">return</span> <span class="keyword">new</span> WindowImplType(Mode, Title, WindowStyle, Params);
<a name="l00071"></a>00071 }
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 
<a name="l00077"></a>00077 WindowImpl* WindowImpl::New(WindowHandle Handle, WindowSettings&amp; Params)
<a name="l00078"></a>00078 {
<a name="l00079"></a>00079     <span class="keywordflow">return</span> <span class="keyword">new</span> WindowImplType(Handle, Params);
<a name="l00080"></a>00080 }
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 
<a name="l00086"></a>00086 WindowImpl::WindowImpl() :
<a name="l00087"></a>00087 myWidth       (0),
<a name="l00088"></a>00088 myHeight      (0),
<a name="l00089"></a>00089 myJoyThreshold(0.1f)
<a name="l00090"></a>00090 {
<a name="l00091"></a>00091 }
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 
<a name="l00097"></a>00097 WindowImpl::~WindowImpl()
<a name="l00098"></a>00098 {
<a name="l00099"></a>00099     <span class="comment">// Nothing to do</span>
<a name="l00100"></a>00100 }
<a name="l00101"></a>00101 
<a name="l00102"></a>00102 
<a name="l00106"></a>00106 <span class="keywordtype">void</span> WindowImpl::AddListener(WindowListener* Listener)
<a name="l00107"></a>00107 {
<a name="l00108"></a>00108     <span class="keywordflow">if</span> (Listener)
<a name="l00109"></a>00109         myListeners.insert(Listener);
<a name="l00110"></a>00110 }
<a name="l00111"></a>00111 
<a name="l00112"></a>00112 
<a name="l00116"></a>00116 <span class="keywordtype">void</span> WindowImpl::RemoveListener(WindowListener* Listener)
<a name="l00117"></a>00117 {
<a name="l00118"></a>00118     myListeners.erase(Listener);
<a name="l00119"></a>00119 }
<a name="l00120"></a>00120 
<a name="l00121"></a>00121 
<a name="l00125"></a>00125 <span class="keywordtype">void</span> WindowImpl::Initialize()
<a name="l00126"></a>00126 {
<a name="l00127"></a>00127     <span class="comment">// Initialize the joysticks</span>
<a name="l00128"></a>00128     <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="namespacesf_1_1Joy.htm#bb37a72f42b3ef9841fcf8270d0ac881668554c121c39f79eceb15f8b6631a9f" title="Total number of supported joysticks.">Joy::Count</a>; ++i)
<a name="l00129"></a>00129     {
<a name="l00130"></a>00130         myJoysticks[i].Initialize(i);
<a name="l00131"></a>00131         myJoyStates[i] = myJoysticks[i].UpdateState();
<a name="l00132"></a>00132     }
<a name="l00133"></a>00133 }
<a name="l00134"></a>00134 
<a name="l00135"></a>00135 
<a name="l00139"></a>00139 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> WindowImpl::GetWidth()<span class="keyword"> const</span>
<a name="l00140"></a>00140 <span class="keyword"></span>{
<a name="l00141"></a>00141     <span class="keywordflow">return</span> myWidth;
<a name="l00142"></a>00142 }
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 
<a name="l00148"></a>00148 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> WindowImpl::GetHeight()<span class="keyword"> const</span>
<a name="l00149"></a>00149 <span class="keyword"></span>{
<a name="l00150"></a>00150     <span class="keywordflow">return</span> myHeight;
<a name="l00151"></a>00151 }
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 
<a name="l00158"></a>00158 <span class="keywordtype">void</span> WindowImpl::SetJoystickThreshold(<span class="keywordtype">float</span> Threshold)
<a name="l00159"></a>00159 {
<a name="l00160"></a>00160     myJoyThreshold = Threshold;
<a name="l00161"></a>00161 }
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 
<a name="l00167"></a>00167 <span class="keywordtype">void</span> WindowImpl::DoEvents()
<a name="l00168"></a>00168 {
<a name="l00169"></a>00169     <span class="comment">// Read the joysticks state and generate the appropriate events</span>
<a name="l00170"></a>00170     ProcessJoystickEvents();
<a name="l00171"></a>00171 
<a name="l00172"></a>00172     <span class="comment">// Let the derived class process other events</span>
<a name="l00173"></a>00173     ProcessEvents();
<a name="l00174"></a>00174 }
<a name="l00175"></a>00175 
<a name="l00176"></a>00176 
<a name="l00180"></a>00180 <span class="keywordtype">bool</span> WindowImpl::IsContextActive()
<a name="l00181"></a>00181 {
<a name="l00182"></a>00182     <span class="keywordflow">return</span> WindowImplType::IsContextActive();
<a name="l00183"></a>00183 }
<a name="l00184"></a>00184 
<a name="l00185"></a>00185 
<a name="l00189"></a>00189 <span class="keywordtype">void</span> WindowImpl::SendEvent(<span class="keyword">const</span> Event&amp; EventToSend)
<a name="l00190"></a>00190 {
<a name="l00191"></a>00191     <span class="keywordflow">for</span> (std::set&lt;WindowListener*&gt;::iterator i = myListeners.begin(); i != myListeners.end(); ++i)
<a name="l00192"></a>00192     {
<a name="l00193"></a>00193         (*i)-&gt;OnEvent(EventToSend);
<a name="l00194"></a>00194     }
<a name="l00195"></a>00195 }
<a name="l00196"></a>00196 
<a name="l00197"></a>00197 
<a name="l00203"></a>00203 <span class="keywordtype">int</span> WindowImpl::EvaluateConfig(<span class="keyword">const</span> VideoMode&amp; Mode, <span class="keyword">const</span> WindowSettings&amp; Settings, <span class="keywordtype">int</span> ColorBits, <span class="keywordtype">int</span> DepthBits, <span class="keywordtype">int</span> StencilBits, <span class="keywordtype">int</span> Antialiasing)
<a name="l00204"></a>00204 {
<a name="l00205"></a>00205     <span class="keywordflow">return</span> abs(static_cast&lt;int&gt;(Mode.BitsPerPixel          - ColorBits))   +
<a name="l00206"></a>00206            abs(static_cast&lt;int&gt;(Settings.DepthBits         - DepthBits))   +
<a name="l00207"></a>00207            abs(static_cast&lt;int&gt;(Settings.StencilBits       - StencilBits)) +
<a name="l00208"></a>00208            abs(static_cast&lt;int&gt;(Settings.AntialiasingLevel - Antialiasing));
<a name="l00209"></a>00209 }
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 
<a name="l00215"></a>00215 <span class="keywordtype">void</span> WindowImpl::ProcessJoystickEvents()
<a name="l00216"></a>00216 {
<a name="l00217"></a>00217     <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; Joy::Count; ++i)
<a name="l00218"></a>00218     {
<a name="l00219"></a>00219         <span class="comment">// Copy the previous state of the joystick and get the new one</span>
<a name="l00220"></a>00220         JoystickState PreviousState = myJoyStates[i];
<a name="l00221"></a>00221         myJoyStates[i] = myJoysticks[i].UpdateState();
<a name="l00222"></a>00222 
<a name="l00223"></a>00223         <span class="comment">// Axis</span>
<a name="l00224"></a>00224         <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; Joy::AxisCount; ++j)
<a name="l00225"></a>00225         {
<a name="l00226"></a>00226             Joy::Axis Axis = <span class="keyword">static_cast&lt;</span>Joy::Axis<span class="keyword">&gt;</span>(j);
<a name="l00227"></a>00227             <span class="keywordflow">if</span> (myJoysticks[i].HasAxis(Axis))
<a name="l00228"></a>00228             {
<a name="l00229"></a>00229                 <span class="keywordtype">float</span> PrevPos = PreviousState.Axis[j];
<a name="l00230"></a>00230                 <span class="keywordtype">float</span> CurrPos = myJoyStates[i].Axis[j];
<a name="l00231"></a>00231                 <span class="keywordflow">if</span> (fabs(CurrPos - PrevPos) &gt;= myJoyThreshold)
<a name="l00232"></a>00232                 {
<a name="l00233"></a>00233                     Event Event;
<a name="l00234"></a>00234                     Event.Type               = Event::JoyMoved;
<a name="l00235"></a>00235                     Event.JoyMove.JoystickId = i;
<a name="l00236"></a>00236                     Event.JoyMove.Axis       = Axis;
<a name="l00237"></a>00237                     Event.JoyMove.Position   = CurrPos;
<a name="l00238"></a>00238                     SendEvent(Event);
<a name="l00239"></a>00239                 }
<a name="l00240"></a>00240             }
<a name="l00241"></a>00241         }
<a name="l00242"></a>00242 
<a name="l00243"></a>00243         <span class="comment">// Buttons</span>
<a name="l00244"></a>00244         <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> j = 0; j &lt; myJoysticks[i].GetButtonsCount(); ++j)
<a name="l00245"></a>00245         {
<a name="l00246"></a>00246             <span class="keywordtype">bool</span> PrevPressed = PreviousState.Buttons[j];
<a name="l00247"></a>00247             <span class="keywordtype">bool</span> CurrPressed = myJoyStates[i].Buttons[j];
<a name="l00248"></a>00248 
<a name="l00249"></a>00249             <span class="keywordflow">if</span> ((!PrevPressed &amp;&amp; CurrPressed) || (PrevPressed &amp;&amp; !CurrPressed))
<a name="l00250"></a>00250             {
<a name="l00251"></a>00251                 Event Event;
<a name="l00252"></a>00252                 Event.Type                 = CurrPressed ? Event::JoyButtonPressed : Event::JoyButtonReleased;
<a name="l00253"></a>00253                 Event.JoyButton.JoystickId = i;
<a name="l00254"></a>00254                 Event.JoyButton.Button     = j;
<a name="l00255"></a>00255                 SendEvent(Event);
<a name="l00256"></a>00256             }
<a name="l00257"></a>00257         }
<a name="l00258"></a>00258     }
<a name="l00259"></a>00259 }
<a name="l00260"></a>00260 
<a name="l00261"></a>00261 
<a name="l00262"></a>00262 } <span class="comment">// namespace priv</span>
<a name="l00263"></a>00263 
<a name="l00264"></a>00264 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
