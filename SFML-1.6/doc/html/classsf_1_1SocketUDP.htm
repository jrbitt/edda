<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><b>sf</b>::<a class="el" href="classsf_1_1SocketUDP.htm">SocketUDP</a>
  </div>
</div>
<div class="contents">
<h1>sf::SocketUDP Class Reference</h1><!-- doxytag: class="sf::SocketUDP" --><a class="el" href="classsf_1_1SocketUDP.htm" title="SocketUDP wraps a socket using UDP protocol to send data fastly (but with less safety)...">SocketUDP</a> wraps a socket using UDP protocol to send data fastly (but with less safety).  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="SocketUDP_8hpp-source.htm">SocketUDP.hpp</a>&gt;</code>
<p>

<p>
<a href="classsf_1_1SocketUDP-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.htm#844e648922eccd86d4815d19472bb901">SocketUDP</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Default constructor.  <a href="#844e648922eccd86d4815d19472bb901"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.htm#128ebfff7472dfdd330b46b719e06fd6">SetBlocking</a> (bool Blocking)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the blocking state of the socket.  <a href="#128ebfff7472dfdd330b46b719e06fd6"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.htm#4a7e364fd39aa7338f0822d849323a5d">Bind</a> (unsigned short Port)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Bind the socket to a specific port.  <a href="#4a7e364fd39aa7338f0822d849323a5d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.htm#6f6b448b8ab63913dad5d6906645081c">Unbind</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Unbind the socket from its previous port, if any.  <a href="#6f6b448b8ab63913dad5d6906645081c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">Socket::Status&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.htm#bce9f533dd86c0fd8fbe26b7efce3bc2">Send</a> (const char *Data, std::size_t Size, const <a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> &amp;Address, unsigned short Port)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Send an array of bytes.  <a href="#bce9f533dd86c0fd8fbe26b7efce3bc2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">Socket::Status&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.htm#c6928928fa1d6242db1f8d4176369996">Receive</a> (char *Data, std::size_t MaxSize, std::size_t &amp;SizeReceived, <a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> &amp;Address, unsigned short &amp;Port)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Receive an array of bytes.  <a href="#c6928928fa1d6242db1f8d4176369996"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">Socket::Status&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.htm#fef698f2544ac0364d422e1e1ba7a5b6">Send</a> (<a class="el" href="classsf_1_1Packet.htm">Packet</a> &amp;PacketToSend, const <a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> &amp;Address, unsigned short Port)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Send a packet of data.  <a href="#fef698f2544ac0364d422e1e1ba7a5b6"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">Socket::Status&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.htm#463bbd635513f2653f072c2f220d2495">Receive</a> (<a class="el" href="classsf_1_1Packet.htm">Packet</a> &amp;PacketToReceive, <a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> &amp;Address, unsigned short &amp;Port)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Receive a packet.  <a href="#463bbd635513f2653f072c2f220d2495"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.htm#c9abf54c9ced16b55ddef46973cd1a58">Close</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Close the socket.  <a href="#c9abf54c9ced16b55ddef46973cd1a58"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.htm#ffecb97b84b51dea691934f9195abc1f">IsValid</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Check if the socket is in a valid state ; this function can be called any time to check if the socket is OK.  <a href="#ffecb97b84b51dea691934f9195abc1f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned short&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.htm#14f2c68a57a163a5d142acd0c4b022dd">GetPort</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the port the socket is currently bound to.  <a href="#14f2c68a57a163a5d142acd0c4b022dd"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.htm#5e6df73d3b4acf5890bd48229b2d2fa0">operator==</a> (const <a class="el" href="classsf_1_1SocketUDP.htm">SocketUDP</a> &amp;Other) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Comparison operator ==.  <a href="#5e6df73d3b4acf5890bd48229b2d2fa0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.htm#2cb8111d79d32e456f047132e61acd24">operator!=</a> (const <a class="el" href="classsf_1_1SocketUDP.htm">SocketUDP</a> &amp;Other) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Comparison operator !=.  <a href="#2cb8111d79d32e456f047132e61acd24"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.htm#fc35043831c10528cc3e97b959438b95">operator&lt;</a> (const <a class="el" href="classsf_1_1SocketUDP.htm">SocketUDP</a> &amp;Other) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Comparison operator &lt;.  <a href="#fc35043831c10528cc3e97b959438b95"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Friends</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="f750d7515f80120fe802531753208caf"></a><!-- doxytag: member="sf::SocketUDP::Selector&lt; SocketUDP &gt;" ref="f750d7515f80120fe802531753208caf" args="" -->
class&nbsp;</td><td class="memItemRight" valign="bottom"><b>Selector&lt; SocketUDP &gt;</b></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
<a class="el" href="classsf_1_1SocketUDP.htm" title="SocketUDP wraps a socket using UDP protocol to send data fastly (but with less safety)...">SocketUDP</a> wraps a socket using UDP protocol to send data fastly (but with less safety). 
<p>Definition at line <a class="el" href="SocketUDP_8hpp-source.htm#l00045">45</a> of file <a class="el" href="SocketUDP_8hpp-source.htm">SocketUDP.hpp</a>.</p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="844e648922eccd86d4815d19472bb901"></a><!-- doxytag: member="sf::SocketUDP::SocketUDP" ref="844e648922eccd86d4815d19472bb901" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::SocketUDP::SocketUDP           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Default constructor. 
<p>

<p>Definition at line <a class="el" href="SocketUDP_8cpp-source.htm#l00041">41</a> of file <a class="el" href="SocketUDP_8cpp-source.htm">SocketUDP.cpp</a>.</p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="4a7e364fd39aa7338f0822d849323a5d"></a><!-- doxytag: member="sf::SocketUDP::Bind" ref="4a7e364fd39aa7338f0822d849323a5d" args="(unsigned short Port)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::SocketUDP::Bind           </td>
          <td>(</td>
          <td class="paramtype">unsigned short&nbsp;</td>
          <td class="paramname"> <em>Port</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Bind the socket to a specific port. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Port</em>&nbsp;</td><td>: Port to bind the socket to</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if operation has been successful </dd></dl>

<p>Definition at line <a class="el" href="SocketUDP_8cpp-source.htm#l00064">64</a> of file <a class="el" href="SocketUDP_8cpp-source.htm">SocketUDP.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="c9abf54c9ced16b55ddef46973cd1a58"></a><!-- doxytag: member="sf::SocketUDP::Close" ref="c9abf54c9ced16b55ddef46973cd1a58" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::SocketUDP::Close           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Close the socket. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if operation has been successful </dd></dl>

<p>Definition at line <a class="el" href="SocketUDP_8cpp-source.htm#l00316">316</a> of file <a class="el" href="SocketUDP_8cpp-source.htm">SocketUDP.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="14f2c68a57a163a5d142acd0c4b022dd"></a><!-- doxytag: member="sf::SocketUDP::GetPort" ref="14f2c68a57a163a5d142acd0c4b022dd" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short sf::SocketUDP::GetPort           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the port the socket is currently bound to. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Current port (0 means the socket is not bound) </dd></dl>

<p>Definition at line <a class="el" href="SocketUDP_8cpp-source.htm#l00349">349</a> of file <a class="el" href="SocketUDP_8cpp-source.htm">SocketUDP.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="ffecb97b84b51dea691934f9195abc1f"></a><!-- doxytag: member="sf::SocketUDP::IsValid" ref="ffecb97b84b51dea691934f9195abc1f" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::SocketUDP::IsValid           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Check if the socket is in a valid state ; this function can be called any time to check if the socket is OK. 
<p>
Check if the socket is in a valid state ; this function can be called any time to check if the socket is OK.<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if the socket is valid </dd></dl>

<p>Definition at line <a class="el" href="SocketUDP_8cpp-source.htm#l00340">340</a> of file <a class="el" href="SocketUDP_8cpp-source.htm">SocketUDP.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="2cb8111d79d32e456f047132e61acd24"></a><!-- doxytag: member="sf::SocketUDP::operator!=" ref="2cb8111d79d32e456f047132e61acd24" args="(const SocketUDP &amp;Other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::SocketUDP::operator!=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1SocketUDP.htm">SocketUDP</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Other</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Comparison operator !=. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Other</em>&nbsp;</td><td>: Socket to compare</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if *this != Other </dd></dl>

<p>Definition at line <a class="el" href="SocketUDP_8cpp-source.htm#l00367">367</a> of file <a class="el" href="SocketUDP_8cpp-source.htm">SocketUDP.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="fc35043831c10528cc3e97b959438b95"></a><!-- doxytag: member="sf::SocketUDP::operator&lt;" ref="fc35043831c10528cc3e97b959438b95" args="(const SocketUDP &amp;Other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::SocketUDP::operator&lt;           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1SocketUDP.htm">SocketUDP</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Other</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Comparison operator &lt;. 
<p>
Provided for compatibility with standard containers, as comparing two sockets doesn't make much sense...<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Other</em>&nbsp;</td><td>: Socket to compare</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if *this &lt; Other</dd></dl>
Provided for compatibility with standard containers, as comparing two sockets doesn't make much sense... 
<p>Definition at line <a class="el" href="SocketUDP_8cpp-source.htm#l00378">378</a> of file <a class="el" href="SocketUDP_8cpp-source.htm">SocketUDP.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="5e6df73d3b4acf5890bd48229b2d2fa0"></a><!-- doxytag: member="sf::SocketUDP::operator==" ref="5e6df73d3b4acf5890bd48229b2d2fa0" args="(const SocketUDP &amp;Other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::SocketUDP::operator==           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1SocketUDP.htm">SocketUDP</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Other</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Comparison operator ==. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Other</em>&nbsp;</td><td>: Socket to compare</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if *this == Other </dd></dl>

<p>Definition at line <a class="el" href="SocketUDP_8cpp-source.htm#l00358">358</a> of file <a class="el" href="SocketUDP_8cpp-source.htm">SocketUDP.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="463bbd635513f2653f072c2f220d2495"></a><!-- doxytag: member="sf::SocketUDP::Receive" ref="463bbd635513f2653f072c2f220d2495" args="(Packet &amp;PacketToReceive, IPAddress &amp;Address, unsigned short &amp;Port)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Socket::Status sf::SocketUDP::Receive           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Packet.htm">Packet</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>PacketToReceive</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned short &amp;&nbsp;</td>
          <td class="paramname"> <em>Port</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Receive a packet. 
<p>
This function will block if the socket is blocking<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>PacketToReceive</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Packet.htm" title="Packet wraps data to send / to receive through the network.">Packet</a> to fill with received data </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Address</em>&nbsp;</td><td>: Address of the computer which sent the packet </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Port</em>&nbsp;</td><td>: Port on which the remote computer sent the data</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Status code</dd></dl>
This function will block if the socket is blocking 
<p>Definition at line <a class="el" href="SocketUDP_8cpp-source.htm#l00245">245</a> of file <a class="el" href="SocketUDP_8cpp-source.htm">SocketUDP.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="c6928928fa1d6242db1f8d4176369996"></a><!-- doxytag: member="sf::SocketUDP::Receive" ref="c6928928fa1d6242db1f8d4176369996" args="(char *Data, std::size_t MaxSize, std::size_t &amp;SizeReceived, IPAddress &amp;Address, unsigned short &amp;Port)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Socket::Status sf::SocketUDP::Receive           </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>Data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&nbsp;</td>
          <td class="paramname"> <em>MaxSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t &amp;&nbsp;</td>
          <td class="paramname"> <em>SizeReceived</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned short &amp;&nbsp;</td>
          <td class="paramname"> <em>Port</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Receive an array of bytes. 
<p>
This function will block if the socket is blocking<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Data</em>&nbsp;</td><td>: Pointer to a byte array to fill (make sure it is big enough) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>MaxSize</em>&nbsp;</td><td>: Maximum number of bytes to read </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>SizeReceived</em>&nbsp;</td><td>: Number of bytes received </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Address</em>&nbsp;</td><td>: Address of the computer which sent the data </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Port</em>&nbsp;</td><td>: Port on which the remote computer sent the data</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Status code</dd></dl>
This function will block if the socket is blocking 
<p>Definition at line <a class="el" href="SocketUDP_8cpp-source.htm#l00162">162</a> of file <a class="el" href="SocketUDP_8cpp-source.htm">SocketUDP.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="fef698f2544ac0364d422e1e1ba7a5b6"></a><!-- doxytag: member="sf::SocketUDP::Send" ref="fef698f2544ac0364d422e1e1ba7a5b6" args="(Packet &amp;PacketToSend, const IPAddress &amp;Address, unsigned short Port)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Socket::Status sf::SocketUDP::Send           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Packet.htm">Packet</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>PacketToSend</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned short&nbsp;</td>
          <td class="paramname"> <em>Port</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Send a packet of data. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>PacketToSend</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Packet.htm" title="Packet wraps data to send / to receive through the network.">Packet</a> to send </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Address</em>&nbsp;</td><td>: Address of the computer to send the packet to </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Port</em>&nbsp;</td><td>: Port to send the data to</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Status code </dd></dl>

<p>Definition at line <a class="el" href="SocketUDP_8cpp-source.htm#l00219">219</a> of file <a class="el" href="SocketUDP_8cpp-source.htm">SocketUDP.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="bce9f533dd86c0fd8fbe26b7efce3bc2"></a><!-- doxytag: member="sf::SocketUDP::Send" ref="bce9f533dd86c0fd8fbe26b7efce3bc2" args="(const char *Data, std::size_t Size, const IPAddress &amp;Address, unsigned short Port)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Socket::Status sf::SocketUDP::Send           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>Data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&nbsp;</td>
          <td class="paramname"> <em>Size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1IPAddress.htm">IPAddress</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned short&nbsp;</td>
          <td class="paramname"> <em>Port</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Send an array of bytes. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Data</em>&nbsp;</td><td>: Pointer to the bytes to send </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Size</em>&nbsp;</td><td>: Number of bytes to send </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Address</em>&nbsp;</td><td>: Address of the computer to send the packet to </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Port</em>&nbsp;</td><td>: Port to send the data to</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Status code </dd></dl>

<p>Definition at line <a class="el" href="SocketUDP_8cpp-source.htm#l00118">118</a> of file <a class="el" href="SocketUDP_8cpp-source.htm">SocketUDP.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="128ebfff7472dfdd330b46b719e06fd6"></a><!-- doxytag: member="sf::SocketUDP::SetBlocking" ref="128ebfff7472dfdd330b46b719e06fd6" args="(bool Blocking)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::SocketUDP::SetBlocking           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>Blocking</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Change the blocking state of the socket. 
<p>
The default behaviour of a socket is blocking<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Blocking</em>&nbsp;</td><td>: Pass true to set the socket as blocking, or false for non-blocking </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="SocketUDP_8cpp-source.htm#l00050">50</a> of file <a class="el" href="SocketUDP_8cpp-source.htm">SocketUDP.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="6f6b448b8ab63913dad5d6906645081c"></a><!-- doxytag: member="sf::SocketUDP::Unbind" ref="6f6b448b8ab63913dad5d6906645081c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::SocketUDP::Unbind           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Unbind the socket from its previous port, if any. 
<p>
Unbind the socket to its previous port.<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if operation has been successful </dd></dl>

<p>Definition at line <a class="el" href="SocketUDP_8cpp-source.htm#l00101">101</a> of file <a class="el" href="SocketUDP_8cpp-source.htm">SocketUDP.cpp</a>.</p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="SocketUDP_8hpp-source.htm">SocketUDP.hpp</a><li><a class="el" href="SocketUDP_8cpp-source.htm">SocketUDP.cpp</a></ul>
</div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
