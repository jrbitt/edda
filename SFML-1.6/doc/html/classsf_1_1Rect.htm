<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><b>sf</b>::<a class="el" href="classsf_1_1Rect.htm">Rect</a>
  </div>
</div>
<div class="contents">
<h1>sf::Rect&lt; T &gt; Class Template Reference</h1><!-- doxytag: class="sf::Rect" --><a class="el" href="classsf_1_1Rect.htm" title="Rect is an utility class for manipulating rectangles.">Rect</a> is an utility class for manipulating rectangles.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="Rect_8hpp-source.htm">Rect.hpp</a>&gt;</code>
<p>

<p>
<a href="classsf_1_1Rect-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Rect.htm#0f87ebaef9722a6222fd2e04ce8efb37">Rect</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Default constructor.  <a href="#0f87ebaef9722a6222fd2e04ce8efb37"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Rect.htm#0f19f5cf78eb52f122b904fb258acfce">Rect</a> (T LeftCoord, T TopCoord, T RightCoord, T BottomCoord)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct the rectangle from its coordinates.  <a href="#0f19f5cf78eb52f122b904fb258acfce"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Rect.htm#6a8c09ef44123228aa44aff8f0b09087">GetWidth</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the width of the rectangle.  <a href="#6a8c09ef44123228aa44aff8f0b09087"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Rect.htm#a3c1ca9c959dae33d2eec290b2e48d75">GetHeight</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the height of the rectangle.  <a href="#a3c1ca9c959dae33d2eec290b2e48d75"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Rect.htm#bacc8c95dd784ad3e19d94474bee24cd">Offset</a> (T OffsetX, T OffsetY)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Move the whole rectangle by the given offset.  <a href="#bacc8c95dd784ad3e19d94474bee24cd"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Rect.htm#b56c71b17e5edfaf4e4c839b8b4dfcb7">Contains</a> (T X, T Y) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Check if a point is inside the rectangle's area.  <a href="#b56c71b17e5edfaf4e4c839b8b4dfcb7"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Rect.htm#703256dda71eb3a5e748f5b0265e9272">Intersects</a> (const <a class="el" href="classsf_1_1Rect.htm">Rect</a>&lt; T &gt; &amp;Rectangle, <a class="el" href="classsf_1_1Rect.htm">Rect</a>&lt; T &gt; *OverlappingRect=NULL) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Check intersection between two rectangles.  <a href="#703256dda71eb3a5e748f5b0265e9272"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Public Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Rect.htm#9619c6b9741163c86eea6a0b84b2f9b3">Left</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Left coordinate of the rectangle.  <a href="#9619c6b9741163c86eea6a0b84b2f9b3"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Rect.htm#4addcc0bf656fb5f2f80d406cf90c047">Top</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Top coordinate of the rectangle.  <a href="#4addcc0bf656fb5f2f80d406cf90c047"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Rect.htm#6ce87895496327187a20a46dc2479383">Right</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Right coordinate of the rectangle.  <a href="#6ce87895496327187a20a46dc2479383"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Rect.htm#b234b311011892cfd8a3e831dec341a8">Bottom</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Bottom coordinate of the rectangle.  <a href="#b234b311011892cfd8a3e831dec341a8"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
<h3>template&lt;typename T&gt;<br>
 class sf::Rect&lt; T &gt;</h3>

<a class="el" href="classsf_1_1Rect.htm" title="Rect is an utility class for manipulating rectangles.">Rect</a> is an utility class for manipulating rectangles. 
<p>
Template parameter defines the type of coordinates (integer, float, ...) 
<p>Definition at line <a class="el" href="Rect_8hpp-source.htm#l00041">41</a> of file <a class="el" href="Rect_8hpp-source.htm">Rect.hpp</a>.</p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="0f87ebaef9722a6222fd2e04ce8efb37"></a><!-- doxytag: member="sf::Rect::Rect" ref="0f87ebaef9722a6222fd2e04ce8efb37" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Rect.htm">sf::Rect</a>&lt; T &gt;::<a class="el" href="classsf_1_1Rect.htm">Rect</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Default constructor. 
<p>

</div>
</div><p>
<a class="anchor" name="0f19f5cf78eb52f122b904fb258acfce"></a><!-- doxytag: member="sf::Rect::Rect" ref="0f19f5cf78eb52f122b904fb258acfce" args="(T LeftCoord, T TopCoord, T RightCoord, T BottomCoord)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Rect.htm">sf::Rect</a>&lt; T &gt;::<a class="el" href="classsf_1_1Rect.htm">Rect</a>           </td>
          <td>(</td>
          <td class="paramtype">T&nbsp;</td>
          <td class="paramname"> <em>LeftCoord</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&nbsp;</td>
          <td class="paramname"> <em>TopCoord</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&nbsp;</td>
          <td class="paramname"> <em>RightCoord</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&nbsp;</td>
          <td class="paramname"> <em>BottomCoord</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Construct the rectangle from its coordinates. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>LeftCoord</em>&nbsp;</td><td>: Left coordinate of the rectangle </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>TopCoord</em>&nbsp;</td><td>: Top coordinate of the rectangle </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>RightCoord</em>&nbsp;</td><td>: Right coordinate of the rectangle </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>BottomCoord</em>&nbsp;</td><td>: Bottom coordinate of the rectangle </td></tr>
  </table>
</dl>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="b56c71b17e5edfaf4e4c839b8b4dfcb7"></a><!-- doxytag: member="sf::Rect::Contains" ref="b56c71b17e5edfaf4e4c839b8b4dfcb7" args="(T X, T Y) const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsf_1_1Rect.htm">sf::Rect</a>&lt; T &gt;::Contains           </td>
          <td>(</td>
          <td class="paramtype">T&nbsp;</td>
          <td class="paramname"> <em>X</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&nbsp;</td>
          <td class="paramname"> <em>Y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Check if a point is inside the rectangle's area. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>X</em>&nbsp;</td><td>: X coordinate of the point to test </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Y</em>&nbsp;</td><td>: Y coordinate of the point to test</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if the point is inside </dd></dl>

</div>
</div><p>
<a class="anchor" name="a3c1ca9c959dae33d2eec290b2e48d75"></a><!-- doxytag: member="sf::Rect::GetHeight" ref="a3c1ca9c959dae33d2eec290b2e48d75" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classsf_1_1Rect.htm">sf::Rect</a>&lt; T &gt;::GetHeight           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the height of the rectangle. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Height of rectangle </dd></dl>

</div>
</div><p>
<a class="anchor" name="6a8c09ef44123228aa44aff8f0b09087"></a><!-- doxytag: member="sf::Rect::GetWidth" ref="6a8c09ef44123228aa44aff8f0b09087" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classsf_1_1Rect.htm">sf::Rect</a>&lt; T &gt;::GetWidth           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the width of the rectangle. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Width of rectangle </dd></dl>

</div>
</div><p>
<a class="anchor" name="703256dda71eb3a5e748f5b0265e9272"></a><!-- doxytag: member="sf::Rect::Intersects" ref="703256dda71eb3a5e748f5b0265e9272" args="(const Rect&lt; T &gt; &amp;Rectangle, Rect&lt; T &gt; *OverlappingRect=NULL) const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsf_1_1Rect.htm">sf::Rect</a>&lt; T &gt;::Intersects           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Rect.htm">Rect</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>Rectangle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1Rect.htm">Rect</a>&lt; T &gt; *&nbsp;</td>
          <td class="paramname"> <em>OverlappingRect</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Check intersection between two rectangles. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Rectangle</em>&nbsp;</td><td>: Rectangle to test </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>OverlappingRect</em>&nbsp;</td><td>: Rectangle to be filled with overlapping rect (NULL by default)</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if rectangles overlap </dd></dl>

</div>
</div><p>
<a class="anchor" name="bacc8c95dd784ad3e19d94474bee24cd"></a><!-- doxytag: member="sf::Rect::Offset" ref="bacc8c95dd784ad3e19d94474bee24cd" args="(T OffsetX, T OffsetY)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Rect.htm">sf::Rect</a>&lt; T &gt;::Offset           </td>
          <td>(</td>
          <td class="paramtype">T&nbsp;</td>
          <td class="paramname"> <em>OffsetX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&nbsp;</td>
          <td class="paramname"> <em>OffsetY</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Move the whole rectangle by the given offset. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>OffsetX</em>&nbsp;</td><td>: Horizontal offset </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>OffsetY</em>&nbsp;</td><td>: Vertical offset </td></tr>
  </table>
</dl>

</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="b234b311011892cfd8a3e831dec341a8"></a><!-- doxytag: member="sf::Rect::Bottom" ref="b234b311011892cfd8a3e831dec341a8" args="" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classsf_1_1Rect.htm">sf::Rect</a>&lt; T &gt;::<a class="el" href="classsf_1_1Rect.htm#b234b311011892cfd8a3e831dec341a8">Bottom</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Bottom coordinate of the rectangle. 
<p>

<p>Definition at line <a class="el" href="Rect_8hpp-source.htm#l00115">115</a> of file <a class="el" href="Rect_8hpp-source.htm">Rect.hpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="9619c6b9741163c86eea6a0b84b2f9b3"></a><!-- doxytag: member="sf::Rect::Left" ref="9619c6b9741163c86eea6a0b84b2f9b3" args="" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classsf_1_1Rect.htm">sf::Rect</a>&lt; T &gt;::<a class="el" href="classsf_1_1Rect.htm#9619c6b9741163c86eea6a0b84b2f9b3">Left</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Left coordinate of the rectangle. 
<p>

<p>Definition at line <a class="el" href="Rect_8hpp-source.htm#l00112">112</a> of file <a class="el" href="Rect_8hpp-source.htm">Rect.hpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="6ce87895496327187a20a46dc2479383"></a><!-- doxytag: member="sf::Rect::Right" ref="6ce87895496327187a20a46dc2479383" args="" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classsf_1_1Rect.htm">sf::Rect</a>&lt; T &gt;::<a class="el" href="classsf_1_1Rect.htm#6ce87895496327187a20a46dc2479383">Right</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Right coordinate of the rectangle. 
<p>

<p>Definition at line <a class="el" href="Rect_8hpp-source.htm#l00114">114</a> of file <a class="el" href="Rect_8hpp-source.htm">Rect.hpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="4addcc0bf656fb5f2f80d406cf90c047"></a><!-- doxytag: member="sf::Rect::Top" ref="4addcc0bf656fb5f2f80d406cf90c047" args="" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classsf_1_1Rect.htm">sf::Rect</a>&lt; T &gt;::<a class="el" href="classsf_1_1Rect.htm#4addcc0bf656fb5f2f80d406cf90c047">Top</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Top coordinate of the rectangle. 
<p>

<p>Definition at line <a class="el" href="Rect_8hpp-source.htm#l00113">113</a> of file <a class="el" href="Rect_8hpp-source.htm">Rect.hpp</a>.</p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Rect_8hpp-source.htm">Rect.hpp</a></ul>
</div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
