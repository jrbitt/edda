<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>String.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Graphics/String.hpp&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;SFML/Graphics/Image.hpp&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;SFML/Graphics/GraphicsContext.hpp&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;locale&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="keyword">namespace </span>sf
<a name="l00035"></a>00035 {
<a name="l00039"></a><a class="code" href="classsf_1_1String.htm#9563a4e93f692e0c8e8702b374ef8692">00039</a> <a class="code" href="classsf_1_1String.htm#9563a4e93f692e0c8e8702b374ef8692" title="Default constructor.">String::String</a>() :
<a name="l00040"></a>00040 myFont          (&amp;<a class="code" href="classsf_1_1Font.htm" title="Font is the low-level class for loading and manipulating character fonts.">Font</a>::GetDefaultFont()),
<a name="l00041"></a>00041 mySize          (30.f),
<a name="l00042"></a>00042 myStyle         (Regular),
<a name="l00043"></a>00043 myNeedRectUpdate(true)
<a name="l00044"></a>00044 {
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 }
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 
<a name="l00052"></a><a class="code" href="classsf_1_1String.htm#30f985ba0047a5fbe7f9aca68083212c">00052</a> <a class="code" href="classsf_1_1String.htm#9563a4e93f692e0c8e8702b374ef8692" title="Default constructor.">String::String</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1Unicode_1_1Text.htm" title="This class is an abstract definition of a unicode text, it can be converted from...">Unicode::Text</a>&amp; Text, <span class="keyword">const</span> <a class="code" href="classsf_1_1Font.htm" title="Font is the low-level class for loading and manipulating character fonts.">Font</a>&amp; CharFont, <span class="keywordtype">float</span> Size) :
<a name="l00053"></a>00053 myFont          (&amp;CharFont),
<a name="l00054"></a>00054 mySize          (Size),
<a name="l00055"></a>00055 myStyle         (Regular),
<a name="l00056"></a>00056 myNeedRectUpdate(true)
<a name="l00057"></a>00057 {
<a name="l00058"></a>00058     <a class="code" href="classsf_1_1String.htm#a4b56eae5ca5f6f42c6b1c53c0fa83a8" title="Set the text (from any kind of string).">SetText</a>(Text);
<a name="l00059"></a>00059 }
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 
<a name="l00065"></a><a class="code" href="classsf_1_1String.htm#a4b56eae5ca5f6f42c6b1c53c0fa83a8">00065</a> <span class="keywordtype">void</span> <a class="code" href="classsf_1_1String.htm#a4b56eae5ca5f6f42c6b1c53c0fa83a8" title="Set the text (from any kind of string).">String::SetText</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1Unicode_1_1Text.htm" title="This class is an abstract definition of a unicode text, it can be converted from...">Unicode::Text</a>&amp; Text)
<a name="l00066"></a>00066 {
<a name="l00067"></a>00067     myNeedRectUpdate = <span class="keyword">true</span>;
<a name="l00068"></a>00068     myText = Text;
<a name="l00069"></a>00069 }
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 
<a name="l00075"></a><a class="code" href="classsf_1_1String.htm#134ccb47176e51916bbe6b0708a21003">00075</a> <span class="keywordtype">void</span> <a class="code" href="classsf_1_1String.htm#134ccb47176e51916bbe6b0708a21003" title="Set the font of the string.">String::SetFont</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1Font.htm" title="Font is the low-level class for loading and manipulating character fonts.">Font</a>&amp; CharFont)
<a name="l00076"></a>00076 {
<a name="l00077"></a>00077     <span class="keywordflow">if</span> (myFont != &amp;CharFont)
<a name="l00078"></a>00078     {
<a name="l00079"></a>00079         myNeedRectUpdate = <span class="keyword">true</span>;
<a name="l00080"></a>00080         myFont = &amp;CharFont;
<a name="l00081"></a>00081     }
<a name="l00082"></a>00082 }
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 
<a name="l00088"></a><a class="code" href="classsf_1_1String.htm#20b0ca616784aa81c64d6af5a0cebafb">00088</a> <span class="keywordtype">void</span> <a class="code" href="classsf_1_1String.htm#20b0ca616784aa81c64d6af5a0cebafb" title="Set the size of the string The default size is 30.">String::SetSize</a>(<span class="keywordtype">float</span> Size)
<a name="l00089"></a>00089 {
<a name="l00090"></a>00090     <span class="keywordflow">if</span> (mySize != Size)
<a name="l00091"></a>00091     {
<a name="l00092"></a>00092         myNeedRectUpdate = <span class="keyword">true</span>;
<a name="l00093"></a>00093         mySize = Size;
<a name="l00094"></a>00094     }
<a name="l00095"></a>00095 }
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 
<a name="l00102"></a><a class="code" href="classsf_1_1String.htm#93846bbdb49ba0171fe4c53eb9a84a6c">00102</a> <span class="keywordtype">void</span> <a class="code" href="classsf_1_1String.htm#93846bbdb49ba0171fe4c53eb9a84a6c" title="Set the style of the text The default style is Regular.">String::SetStyle</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> TextStyle)
<a name="l00103"></a>00103 {
<a name="l00104"></a>00104     <span class="keywordflow">if</span> (myStyle != TextStyle)
<a name="l00105"></a>00105     {
<a name="l00106"></a>00106         myNeedRectUpdate = <span class="keyword">true</span>;
<a name="l00107"></a>00107         myStyle = TextStyle;
<a name="l00108"></a>00108     }
<a name="l00109"></a>00109 }
<a name="l00110"></a>00110 
<a name="l00111"></a>00111 
<a name="l00115"></a><a class="code" href="classsf_1_1String.htm#97246cca36ef4d5a978b71d9f6f94620">00115</a> <span class="keyword">const</span> <a class="code" href="classsf_1_1Unicode_1_1Text.htm" title="This class is an abstract definition of a unicode text, it can be converted from...">Unicode::Text</a>&amp; <a class="code" href="classsf_1_1String.htm#97246cca36ef4d5a978b71d9f6f94620" title="Get the text (the returned text can be converted implicitely to any kind of string)...">String::GetText</a>()<span class="keyword"> const</span>
<a name="l00116"></a>00116 <span class="keyword"></span>{
<a name="l00117"></a>00117     <span class="keywordflow">return</span> myText;
<a name="l00118"></a>00118 }
<a name="l00119"></a>00119 
<a name="l00120"></a>00120 
<a name="l00124"></a><a class="code" href="classsf_1_1String.htm#6018108988612822d2b3c1b1f57d2f11">00124</a> <span class="keyword">const</span> <a class="code" href="classsf_1_1Font.htm" title="Font is the low-level class for loading and manipulating character fonts.">Font</a>&amp; <a class="code" href="classsf_1_1String.htm#6018108988612822d2b3c1b1f57d2f11" title="Get the font used by the string.">String::GetFont</a>()<span class="keyword"> const</span>
<a name="l00125"></a>00125 <span class="keyword"></span>{
<a name="l00126"></a>00126     <span class="keywordflow">return</span> *myFont;
<a name="l00127"></a>00127 }
<a name="l00128"></a>00128 
<a name="l00129"></a>00129 
<a name="l00133"></a><a class="code" href="classsf_1_1String.htm#d1e689d0ff657da70de23b101b38d9ff">00133</a> <span class="keywordtype">float</span> <a class="code" href="classsf_1_1String.htm#d1e689d0ff657da70de23b101b38d9ff" title="Get the size of the characters.">String::GetSize</a>()<span class="keyword"> const</span>
<a name="l00134"></a>00134 <span class="keyword"></span>{
<a name="l00135"></a>00135     <span class="keywordflow">return</span> mySize;
<a name="l00136"></a>00136 }
<a name="l00137"></a>00137 
<a name="l00138"></a>00138 
<a name="l00142"></a><a class="code" href="classsf_1_1String.htm#61581f8e8a8c8d86debf9364380e33df">00142</a> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="classsf_1_1String.htm#61581f8e8a8c8d86debf9364380e33df" title="Get the style of the text.">String::GetStyle</a>()<span class="keyword"> const</span>
<a name="l00143"></a>00143 <span class="keyword"></span>{
<a name="l00144"></a>00144     <span class="keywordflow">return</span> myStyle;
<a name="l00145"></a>00145 }
<a name="l00146"></a>00146 
<a name="l00147"></a>00147 
<a name="l00153"></a><a class="code" href="classsf_1_1String.htm#d471fee3d4dda7fefb9ff610d049f210">00153</a> <a class="code" href="classsf_1_1Vector2.htm">sf::Vector2f</a> <a class="code" href="classsf_1_1String.htm#d471fee3d4dda7fefb9ff610d049f210" title="Return the visual position of the Index-th character of the string, in coordinates...">String::GetCharacterPos</a>(std::size_t Index)<span class="keyword"> const</span>
<a name="l00154"></a>00154 <span class="keyword"></span>{
<a name="l00155"></a>00155     <span class="comment">// First get the UTF32 representation of the text</span>
<a name="l00156"></a>00156     <span class="keyword">const</span> Unicode::UTF32String&amp; Text = myText;
<a name="l00157"></a>00157 
<a name="l00158"></a>00158     <span class="comment">// Adjust the index if it's out of range</span>
<a name="l00159"></a>00159     <span class="keywordflow">if</span> (Index &gt; Text.length())
<a name="l00160"></a>00160         Index = Text.length();
<a name="l00161"></a>00161 
<a name="l00162"></a>00162     <span class="comment">// The final size is based on the text size</span>
<a name="l00163"></a>00163     <span class="keywordtype">float</span> FactorX  = mySize / myFont-&gt;GetCharacterSize();
<a name="l00164"></a>00164     <span class="keywordtype">float</span> AdvanceY = mySize;
<a name="l00165"></a>00165 
<a name="l00166"></a>00166     <span class="comment">// Compute the position</span>
<a name="l00167"></a>00167     <a class="code" href="classsf_1_1Vector2.htm">sf::Vector2f</a> Position;
<a name="l00168"></a>00168     <span class="keywordflow">for</span> (std::size_t i = 0; i &lt; Index; ++i)
<a name="l00169"></a>00169     {
<a name="l00170"></a>00170         <span class="comment">// Get the current character and its corresponding glyph</span>
<a name="l00171"></a>00171         Uint32       CurChar  = Text[i];
<a name="l00172"></a>00172         <span class="keyword">const</span> <a class="code" href="classsf_1_1Glyph.htm" title="Structure describing a glyph (a visual character).">Glyph</a>&amp; CurGlyph = myFont-&gt;GetGlyph(CurChar);
<a name="l00173"></a>00173         <span class="keywordtype">float</span>        AdvanceX = CurGlyph.<a class="code" href="classsf_1_1Glyph.htm#72adc6b808a530da296581f11e26bcc6" title="Offset to move horizontically to the next character.">Advance</a> * FactorX;
<a name="l00174"></a>00174 
<a name="l00175"></a>00175         <span class="keywordflow">switch</span> (CurChar)
<a name="l00176"></a>00176         {
<a name="l00177"></a>00177             <span class="comment">// Handle special characters</span>
<a name="l00178"></a>00178             <span class="keywordflow">case</span> L<span class="charliteral">' '</span> :  Position.<a class="code" href="classsf_1_1Vector2.htm#1e6ad77fa155f3753bfb92699bd28141" title="X coordinate of the vector.">x</a> += AdvanceX;                 <span class="keywordflow">break</span>;
<a name="l00179"></a>00179             <span class="keywordflow">case</span> L<span class="charliteral">'\t'</span> : Position.<a class="code" href="classsf_1_1Vector2.htm#1e6ad77fa155f3753bfb92699bd28141" title="X coordinate of the vector.">x</a> += AdvanceX * 4;             <span class="keywordflow">break</span>;
<a name="l00180"></a>00180             <span class="keywordflow">case</span> L<span class="charliteral">'\v'</span> : Position.<a class="code" href="classsf_1_1Vector2.htm#420f2481b015f4eb929c75f2af564299" title="Y coordinate of the vector.">y</a> += AdvanceY * 4;             <span class="keywordflow">break</span>;
<a name="l00181"></a>00181             <span class="keywordflow">case</span> L<span class="charliteral">'\n'</span> : Position.<a class="code" href="classsf_1_1Vector2.htm#420f2481b015f4eb929c75f2af564299" title="Y coordinate of the vector.">y</a> += AdvanceY; Position.<a class="code" href="classsf_1_1Vector2.htm#1e6ad77fa155f3753bfb92699bd28141" title="X coordinate of the vector.">x</a> = 0; <span class="keywordflow">break</span>;
<a name="l00182"></a>00182 
<a name="l00183"></a>00183             <span class="comment">// Regular character : just add its advance value</span>
<a name="l00184"></a>00184             <span class="keywordflow">default</span> : Position.<a class="code" href="classsf_1_1Vector2.htm#1e6ad77fa155f3753bfb92699bd28141" title="X coordinate of the vector.">x</a> += AdvanceX; <span class="keywordflow">break</span>;
<a name="l00185"></a>00185         }
<a name="l00186"></a>00186     }
<a name="l00187"></a>00187 
<a name="l00188"></a>00188     <span class="keywordflow">return</span> Position;
<a name="l00189"></a>00189 }
<a name="l00190"></a>00190 
<a name="l00191"></a>00191 
<a name="l00195"></a><a class="code" href="classsf_1_1String.htm#1a5283b36b1cfba41d1dcd42ff33002d">00195</a> <a class="code" href="classsf_1_1Rect.htm">FloatRect</a> <a class="code" href="classsf_1_1String.htm#1a5283b36b1cfba41d1dcd42ff33002d" title="Get the string rectangle on screen.">String::GetRect</a>()<span class="keyword"> const</span>
<a name="l00196"></a>00196 <span class="keyword"></span>{
<a name="l00197"></a>00197     <span class="keywordflow">if</span> (myNeedRectUpdate)
<a name="l00198"></a>00198         <span class="keyword">const_cast&lt;</span><a class="code" href="classsf_1_1String.htm" title="String defines a graphical 2D text, that can be drawn on screen.">String</a>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;RecomputeRect();
<a name="l00199"></a>00199 
<a name="l00200"></a>00200     <a class="code" href="classsf_1_1Rect.htm">FloatRect</a> <a class="code" href="classsf_1_1Rect.htm" title="Rect is an utility class for manipulating rectangles.">Rect</a>;
<a name="l00201"></a>00201     Rect.<a class="code" href="classsf_1_1Rect.htm#9619c6b9741163c86eea6a0b84b2f9b3" title="Left coordinate of the rectangle.">Left</a>   = (myBaseRect.<a class="code" href="classsf_1_1Rect.htm#9619c6b9741163c86eea6a0b84b2f9b3" title="Left coordinate of the rectangle.">Left</a>   - <a class="code" href="classsf_1_1Drawable.htm#de634efe8d6264282acc564fa5ea77c0" title="Get the center of the object.">GetCenter</a>().<a class="code" href="classsf_1_1Vector2.htm#1e6ad77fa155f3753bfb92699bd28141" title="X coordinate of the vector.">x</a>) * <a class="code" href="classsf_1_1Drawable.htm#fa4d6b97e7c10a82430ff9ee56009c97" title="Get the current scale of the object.">GetScale</a>().<a class="code" href="classsf_1_1Vector2.htm#1e6ad77fa155f3753bfb92699bd28141" title="X coordinate of the vector.">x</a> + <a class="code" href="classsf_1_1Drawable.htm#9ad52594fd5e835cbd03b79098d70e0b" title="Get the position of the object.">GetPosition</a>().<a class="code" href="classsf_1_1Vector2.htm#1e6ad77fa155f3753bfb92699bd28141" title="X coordinate of the vector.">x</a>;
<a name="l00202"></a>00202     Rect.<a class="code" href="classsf_1_1Rect.htm#4addcc0bf656fb5f2f80d406cf90c047" title="Top coordinate of the rectangle.">Top</a>    = (myBaseRect.<a class="code" href="classsf_1_1Rect.htm#4addcc0bf656fb5f2f80d406cf90c047" title="Top coordinate of the rectangle.">Top</a>    - <a class="code" href="classsf_1_1Drawable.htm#de634efe8d6264282acc564fa5ea77c0" title="Get the center of the object.">GetCenter</a>().<a class="code" href="classsf_1_1Vector2.htm#420f2481b015f4eb929c75f2af564299" title="Y coordinate of the vector.">y</a>) * <a class="code" href="classsf_1_1Drawable.htm#fa4d6b97e7c10a82430ff9ee56009c97" title="Get the current scale of the object.">GetScale</a>().<a class="code" href="classsf_1_1Vector2.htm#420f2481b015f4eb929c75f2af564299" title="Y coordinate of the vector.">y</a> + <a class="code" href="classsf_1_1Drawable.htm#9ad52594fd5e835cbd03b79098d70e0b" title="Get the position of the object.">GetPosition</a>().<a class="code" href="classsf_1_1Vector2.htm#420f2481b015f4eb929c75f2af564299" title="Y coordinate of the vector.">y</a>;
<a name="l00203"></a>00203     Rect.<a class="code" href="classsf_1_1Rect.htm#6ce87895496327187a20a46dc2479383" title="Right coordinate of the rectangle.">Right</a>  = (myBaseRect.<a class="code" href="classsf_1_1Rect.htm#6ce87895496327187a20a46dc2479383" title="Right coordinate of the rectangle.">Right</a>  - <a class="code" href="classsf_1_1Drawable.htm#de634efe8d6264282acc564fa5ea77c0" title="Get the center of the object.">GetCenter</a>().<a class="code" href="classsf_1_1Vector2.htm#1e6ad77fa155f3753bfb92699bd28141" title="X coordinate of the vector.">x</a>) * <a class="code" href="classsf_1_1Drawable.htm#fa4d6b97e7c10a82430ff9ee56009c97" title="Get the current scale of the object.">GetScale</a>().<a class="code" href="classsf_1_1Vector2.htm#1e6ad77fa155f3753bfb92699bd28141" title="X coordinate of the vector.">x</a> + <a class="code" href="classsf_1_1Drawable.htm#9ad52594fd5e835cbd03b79098d70e0b" title="Get the position of the object.">GetPosition</a>().<a class="code" href="classsf_1_1Vector2.htm#1e6ad77fa155f3753bfb92699bd28141" title="X coordinate of the vector.">x</a>;
<a name="l00204"></a>00204     Rect.<a class="code" href="classsf_1_1Rect.htm#b234b311011892cfd8a3e831dec341a8" title="Bottom coordinate of the rectangle.">Bottom</a> = (myBaseRect.<a class="code" href="classsf_1_1Rect.htm#b234b311011892cfd8a3e831dec341a8" title="Bottom coordinate of the rectangle.">Bottom</a> - <a class="code" href="classsf_1_1Drawable.htm#de634efe8d6264282acc564fa5ea77c0" title="Get the center of the object.">GetCenter</a>().<a class="code" href="classsf_1_1Vector2.htm#420f2481b015f4eb929c75f2af564299" title="Y coordinate of the vector.">y</a>) * <a class="code" href="classsf_1_1Drawable.htm#fa4d6b97e7c10a82430ff9ee56009c97" title="Get the current scale of the object.">GetScale</a>().<a class="code" href="classsf_1_1Vector2.htm#420f2481b015f4eb929c75f2af564299" title="Y coordinate of the vector.">y</a> + <a class="code" href="classsf_1_1Drawable.htm#9ad52594fd5e835cbd03b79098d70e0b" title="Get the position of the object.">GetPosition</a>().<a class="code" href="classsf_1_1Vector2.htm#420f2481b015f4eb929c75f2af564299" title="Y coordinate of the vector.">y</a>;
<a name="l00205"></a>00205 
<a name="l00206"></a>00206     <span class="keywordflow">return</span> Rect;
<a name="l00207"></a>00207 }
<a name="l00208"></a>00208 
<a name="l00209"></a>00209 
<a name="l00213"></a><a class="code" href="classsf_1_1String.htm#f11de71bf9d73a75c468d1e161181908">00213</a> <span class="keywordtype">void</span> <a class="code" href="classsf_1_1String.htm#f11de71bf9d73a75c468d1e161181908" title="/see Drawable::Render">String::Render</a>(<a class="code" href="classsf_1_1RenderTarget.htm" title="Base class for all render targets (window, image, .">RenderTarget</a>&amp;)<span class="keyword"> const</span>
<a name="l00214"></a>00214 <span class="keyword"></span>{
<a name="l00215"></a>00215     <span class="comment">// First get the internal UTF-32 string of the text</span>
<a name="l00216"></a>00216     <span class="keyword">const</span> Unicode::UTF32String&amp; Text = myText;
<a name="l00217"></a>00217 
<a name="l00218"></a>00218     <span class="comment">// No text, no rendering :)</span>
<a name="l00219"></a>00219     <span class="keywordflow">if</span> (Text.empty())
<a name="l00220"></a>00220         <span class="keywordflow">return</span>;
<a name="l00221"></a>00221 
<a name="l00222"></a>00222     <span class="comment">// Set the scaling factor to get the actual size</span>
<a name="l00223"></a>00223     <span class="keywordtype">float</span> CharSize =  <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(myFont-&gt;GetCharacterSize());
<a name="l00224"></a>00224     <span class="keywordtype">float</span> Factor   = mySize / CharSize;
<a name="l00225"></a>00225     GLCheck(glScalef(Factor, Factor, 1.f));
<a name="l00226"></a>00226 
<a name="l00227"></a>00227     <span class="comment">// Bind the font texture</span>
<a name="l00228"></a>00228     myFont-&gt;GetImage().Bind();
<a name="l00229"></a>00229 
<a name="l00230"></a>00230     <span class="comment">// Initialize the rendering coordinates</span>
<a name="l00231"></a>00231     <span class="keywordtype">float</span> X = 0.f;
<a name="l00232"></a>00232     <span class="keywordtype">float</span> Y = CharSize;
<a name="l00233"></a>00233 
<a name="l00234"></a>00234     <span class="comment">// Holds the lines to draw later, for underlined style</span>
<a name="l00235"></a>00235     std::vector&lt;float&gt; UnderlineCoords;
<a name="l00236"></a>00236     UnderlineCoords.reserve(16);
<a name="l00237"></a>00237 
<a name="l00238"></a>00238     <span class="comment">// Compute the shearing to apply if we're using the italic style</span>
<a name="l00239"></a>00239     <span class="keywordtype">float</span> ItalicCoeff = (myStyle &amp; <a class="code" href="classsf_1_1String.htm#eedf6f2453ae7b88ddf0f7427968a6d860562ce6c8ba01f65aa0551b33c46234" title="Characters are in italic.">Italic</a>) ? 0.208f : 0.f; <span class="comment">// 12 degrees</span>
<a name="l00240"></a>00240 
<a name="l00241"></a>00241     <span class="comment">// Draw one quad for each character</span>
<a name="l00242"></a>00242     glBegin(GL_QUADS);
<a name="l00243"></a>00243     <span class="keywordflow">for</span> (std::size_t i = 0; i &lt; Text.size(); ++i)
<a name="l00244"></a>00244     {
<a name="l00245"></a>00245         <span class="comment">// Get the current character and its corresponding glyph</span>
<a name="l00246"></a>00246         Uint32           CurChar  = Text[i];
<a name="l00247"></a>00247         <span class="keyword">const</span> <a class="code" href="classsf_1_1Glyph.htm" title="Structure describing a glyph (a visual character).">Glyph</a>&amp;     CurGlyph = myFont-&gt;GetGlyph(CurChar);
<a name="l00248"></a>00248         <span class="keywordtype">int</span>              Advance  = CurGlyph.<a class="code" href="classsf_1_1Glyph.htm#72adc6b808a530da296581f11e26bcc6" title="Offset to move horizontically to the next character.">Advance</a>;
<a name="l00249"></a>00249         <span class="keyword">const</span> <a class="code" href="classsf_1_1Rect.htm">IntRect</a>&amp;   <a class="code" href="classsf_1_1Rect.htm" title="Rect is an utility class for manipulating rectangles.">Rect</a>     = CurGlyph.<a class="code" href="classsf_1_1Glyph.htm#3bf41b651a39c09ac8a7355167410f76" title="Bounding rectangle of the glyph, in relative coordinates.">Rectangle</a>;
<a name="l00250"></a>00250         <span class="keyword">const</span> <a class="code" href="classsf_1_1Rect.htm">FloatRect</a>&amp; Coord    = CurGlyph.<a class="code" href="classsf_1_1Glyph.htm#90bedab27a26b2b0cb7e661bdccf3370" title="Texture coordinates of the glyph inside the bitmap font.">TexCoords</a>;
<a name="l00251"></a>00251 
<a name="l00252"></a>00252         <span class="comment">// If we're using the underlined style and there's a new line,</span>
<a name="l00253"></a>00253         <span class="comment">// we keep track of the previous line to draw it later</span>
<a name="l00254"></a>00254         <span class="keywordflow">if</span> ((CurChar == L<span class="charliteral">'\n'</span>) &amp;&amp; (myStyle &amp; <a class="code" href="classsf_1_1String.htm#eedf6f2453ae7b88ddf0f7427968a6d80f4cd758cb0126a9df3307fe885bae3e" title="Characters are underlined.">Underlined</a>))
<a name="l00255"></a>00255         {
<a name="l00256"></a>00256             UnderlineCoords.push_back(X);
<a name="l00257"></a>00257             UnderlineCoords.push_back(Y + 2);
<a name="l00258"></a>00258         }
<a name="l00259"></a>00259 
<a name="l00260"></a>00260         <span class="comment">// Handle special characters</span>
<a name="l00261"></a>00261         <span class="keywordflow">switch</span> (CurChar)
<a name="l00262"></a>00262         {
<a name="l00263"></a>00263             <span class="keywordflow">case</span> L<span class="charliteral">' '</span> :  X += Advance;         <span class="keywordflow">continue</span>;
<a name="l00264"></a>00264             <span class="keywordflow">case</span> L<span class="charliteral">'\n'</span> : Y += CharSize; X = 0; <span class="keywordflow">continue</span>;
<a name="l00265"></a>00265             <span class="keywordflow">case</span> L<span class="charliteral">'\t'</span> : X += Advance  * 4;    <span class="keywordflow">continue</span>;
<a name="l00266"></a>00266             <span class="keywordflow">case</span> L<span class="charliteral">'\v'</span> : Y += CharSize * 4;    <span class="keywordflow">continue</span>;
<a name="l00267"></a>00267         }
<a name="l00268"></a>00268 
<a name="l00269"></a>00269         <span class="comment">// Draw a textured quad for the current character</span>
<a name="l00270"></a>00270         glTexCoord2f(Coord.<a class="code" href="classsf_1_1Rect.htm#9619c6b9741163c86eea6a0b84b2f9b3" title="Left coordinate of the rectangle.">Left</a>,  Coord.<a class="code" href="classsf_1_1Rect.htm#4addcc0bf656fb5f2f80d406cf90c047" title="Top coordinate of the rectangle.">Top</a>);    glVertex2f(X + Rect.<a class="code" href="classsf_1_1Rect.htm#9619c6b9741163c86eea6a0b84b2f9b3" title="Left coordinate of the rectangle.">Left</a>  - ItalicCoeff * Rect.<a class="code" href="classsf_1_1Rect.htm#4addcc0bf656fb5f2f80d406cf90c047" title="Top coordinate of the rectangle.">Top</a>,    Y + Rect.<a class="code" href="classsf_1_1Rect.htm#4addcc0bf656fb5f2f80d406cf90c047" title="Top coordinate of the rectangle.">Top</a>);
<a name="l00271"></a>00271         glTexCoord2f(Coord.<a class="code" href="classsf_1_1Rect.htm#9619c6b9741163c86eea6a0b84b2f9b3" title="Left coordinate of the rectangle.">Left</a>,  Coord.<a class="code" href="classsf_1_1Rect.htm#b234b311011892cfd8a3e831dec341a8" title="Bottom coordinate of the rectangle.">Bottom</a>); glVertex2f(X + Rect.<a class="code" href="classsf_1_1Rect.htm#9619c6b9741163c86eea6a0b84b2f9b3" title="Left coordinate of the rectangle.">Left</a>  - ItalicCoeff * Rect.<a class="code" href="classsf_1_1Rect.htm#b234b311011892cfd8a3e831dec341a8" title="Bottom coordinate of the rectangle.">Bottom</a>, Y + Rect.<a class="code" href="classsf_1_1Rect.htm#b234b311011892cfd8a3e831dec341a8" title="Bottom coordinate of the rectangle.">Bottom</a>);
<a name="l00272"></a>00272         glTexCoord2f(Coord.<a class="code" href="classsf_1_1Rect.htm#6ce87895496327187a20a46dc2479383" title="Right coordinate of the rectangle.">Right</a>, Coord.<a class="code" href="classsf_1_1Rect.htm#b234b311011892cfd8a3e831dec341a8" title="Bottom coordinate of the rectangle.">Bottom</a>); glVertex2f(X + Rect.<a class="code" href="classsf_1_1Rect.htm#6ce87895496327187a20a46dc2479383" title="Right coordinate of the rectangle.">Right</a> - ItalicCoeff * Rect.<a class="code" href="classsf_1_1Rect.htm#b234b311011892cfd8a3e831dec341a8" title="Bottom coordinate of the rectangle.">Bottom</a>, Y + Rect.<a class="code" href="classsf_1_1Rect.htm#b234b311011892cfd8a3e831dec341a8" title="Bottom coordinate of the rectangle.">Bottom</a>);
<a name="l00273"></a>00273         glTexCoord2f(Coord.<a class="code" href="classsf_1_1Rect.htm#6ce87895496327187a20a46dc2479383" title="Right coordinate of the rectangle.">Right</a>, Coord.<a class="code" href="classsf_1_1Rect.htm#4addcc0bf656fb5f2f80d406cf90c047" title="Top coordinate of the rectangle.">Top</a>);    glVertex2f(X + Rect.<a class="code" href="classsf_1_1Rect.htm#6ce87895496327187a20a46dc2479383" title="Right coordinate of the rectangle.">Right</a> - ItalicCoeff * Rect.<a class="code" href="classsf_1_1Rect.htm#4addcc0bf656fb5f2f80d406cf90c047" title="Top coordinate of the rectangle.">Top</a>,    Y + Rect.<a class="code" href="classsf_1_1Rect.htm#4addcc0bf656fb5f2f80d406cf90c047" title="Top coordinate of the rectangle.">Top</a>);
<a name="l00274"></a>00274 
<a name="l00275"></a>00275         <span class="comment">// If we're using the bold style, we must render the character 4 more times,</span>
<a name="l00276"></a>00276         <span class="comment">// slightly offseted, to simulate a higher weight</span>
<a name="l00277"></a>00277         <span class="keywordflow">if</span> (myStyle &amp; <a class="code" href="classsf_1_1String.htm#eedf6f2453ae7b88ddf0f7427968a6d80f26252a684f5947bb7fbd58452cb3f0" title="Characters are bold.">Bold</a>)
<a name="l00278"></a>00278         {
<a name="l00279"></a>00279             <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">float</span> OffsetsX[] = {-0.5f, 0.5f, 0.f, 0.f};
<a name="l00280"></a>00280             <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">float</span> OffsetsY[] = {0.f, 0.f, -0.5f, 0.5f};
<a name="l00281"></a>00281 
<a name="l00282"></a>00282             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; 4; ++j)
<a name="l00283"></a>00283             {
<a name="l00284"></a>00284                 glTexCoord2f(Coord.<a class="code" href="classsf_1_1Rect.htm#9619c6b9741163c86eea6a0b84b2f9b3" title="Left coordinate of the rectangle.">Left</a>,  Coord.<a class="code" href="classsf_1_1Rect.htm#4addcc0bf656fb5f2f80d406cf90c047" title="Top coordinate of the rectangle.">Top</a>);    glVertex2f(X + OffsetsX[j] + Rect.<a class="code" href="classsf_1_1Rect.htm#9619c6b9741163c86eea6a0b84b2f9b3" title="Left coordinate of the rectangle.">Left</a>  - ItalicCoeff * Rect.<a class="code" href="classsf_1_1Rect.htm#4addcc0bf656fb5f2f80d406cf90c047" title="Top coordinate of the rectangle.">Top</a>,    Y + OffsetsY[j] + Rect.<a class="code" href="classsf_1_1Rect.htm#4addcc0bf656fb5f2f80d406cf90c047" title="Top coordinate of the rectangle.">Top</a>);
<a name="l00285"></a>00285                 glTexCoord2f(Coord.<a class="code" href="classsf_1_1Rect.htm#9619c6b9741163c86eea6a0b84b2f9b3" title="Left coordinate of the rectangle.">Left</a>,  Coord.<a class="code" href="classsf_1_1Rect.htm#b234b311011892cfd8a3e831dec341a8" title="Bottom coordinate of the rectangle.">Bottom</a>); glVertex2f(X + OffsetsX[j] + Rect.<a class="code" href="classsf_1_1Rect.htm#9619c6b9741163c86eea6a0b84b2f9b3" title="Left coordinate of the rectangle.">Left</a>  - ItalicCoeff * Rect.<a class="code" href="classsf_1_1Rect.htm#b234b311011892cfd8a3e831dec341a8" title="Bottom coordinate of the rectangle.">Bottom</a>, Y + OffsetsY[j] + Rect.<a class="code" href="classsf_1_1Rect.htm#b234b311011892cfd8a3e831dec341a8" title="Bottom coordinate of the rectangle.">Bottom</a>);
<a name="l00286"></a>00286                 glTexCoord2f(Coord.<a class="code" href="classsf_1_1Rect.htm#6ce87895496327187a20a46dc2479383" title="Right coordinate of the rectangle.">Right</a>, Coord.<a class="code" href="classsf_1_1Rect.htm#b234b311011892cfd8a3e831dec341a8" title="Bottom coordinate of the rectangle.">Bottom</a>); glVertex2f(X + OffsetsX[j] + Rect.<a class="code" href="classsf_1_1Rect.htm#6ce87895496327187a20a46dc2479383" title="Right coordinate of the rectangle.">Right</a> - ItalicCoeff * Rect.<a class="code" href="classsf_1_1Rect.htm#b234b311011892cfd8a3e831dec341a8" title="Bottom coordinate of the rectangle.">Bottom</a>, Y + OffsetsY[j] + Rect.<a class="code" href="classsf_1_1Rect.htm#b234b311011892cfd8a3e831dec341a8" title="Bottom coordinate of the rectangle.">Bottom</a>);
<a name="l00287"></a>00287                 glTexCoord2f(Coord.<a class="code" href="classsf_1_1Rect.htm#6ce87895496327187a20a46dc2479383" title="Right coordinate of the rectangle.">Right</a>, Coord.<a class="code" href="classsf_1_1Rect.htm#4addcc0bf656fb5f2f80d406cf90c047" title="Top coordinate of the rectangle.">Top</a>);    glVertex2f(X + OffsetsX[j] + Rect.<a class="code" href="classsf_1_1Rect.htm#6ce87895496327187a20a46dc2479383" title="Right coordinate of the rectangle.">Right</a> - ItalicCoeff * Rect.<a class="code" href="classsf_1_1Rect.htm#4addcc0bf656fb5f2f80d406cf90c047" title="Top coordinate of the rectangle.">Top</a>,    Y + OffsetsY[j] + Rect.<a class="code" href="classsf_1_1Rect.htm#4addcc0bf656fb5f2f80d406cf90c047" title="Top coordinate of the rectangle.">Top</a>);
<a name="l00288"></a>00288             }
<a name="l00289"></a>00289         }
<a name="l00290"></a>00290 
<a name="l00291"></a>00291         <span class="comment">// Advance to the next character</span>
<a name="l00292"></a>00292         X += Advance;
<a name="l00293"></a>00293     }
<a name="l00294"></a>00294     glEnd();
<a name="l00295"></a>00295 
<a name="l00296"></a>00296     <span class="comment">// Draw the underlines if needed</span>
<a name="l00297"></a>00297     <span class="keywordflow">if</span> (myStyle &amp; <a class="code" href="classsf_1_1String.htm#eedf6f2453ae7b88ddf0f7427968a6d80f4cd758cb0126a9df3307fe885bae3e" title="Characters are underlined.">Underlined</a>)
<a name="l00298"></a>00298     {
<a name="l00299"></a>00299         <span class="comment">// Compute the line thickness</span>
<a name="l00300"></a>00300         <span class="keywordtype">float</span> Thickness = (myStyle &amp; <a class="code" href="classsf_1_1String.htm#eedf6f2453ae7b88ddf0f7427968a6d80f26252a684f5947bb7fbd58452cb3f0" title="Characters are bold.">Bold</a>) ? 3.f : 2.f;
<a name="l00301"></a>00301 
<a name="l00302"></a>00302         <span class="comment">// Add the last line (which was not finished with a \n)</span>
<a name="l00303"></a>00303         UnderlineCoords.push_back(X);
<a name="l00304"></a>00304         UnderlineCoords.push_back(Y + 2);
<a name="l00305"></a>00305 
<a name="l00306"></a>00306         <span class="comment">// Draw the underlines as quads</span>
<a name="l00307"></a>00307         GLCheck(glDisable(GL_TEXTURE_2D));
<a name="l00308"></a>00308         glBegin(GL_QUADS);
<a name="l00309"></a>00309         <span class="keywordflow">for</span> (std::size_t i = 0; i &lt; UnderlineCoords.size(); i += 2)
<a name="l00310"></a>00310         {
<a name="l00311"></a>00311             glVertex2f(0,                  UnderlineCoords[i + 1]);
<a name="l00312"></a>00312             glVertex2f(0,                  UnderlineCoords[i + 1] + Thickness);
<a name="l00313"></a>00313             glVertex2f(UnderlineCoords[i], UnderlineCoords[i + 1] + Thickness);
<a name="l00314"></a>00314             glVertex2f(UnderlineCoords[i], UnderlineCoords[i + 1]);
<a name="l00315"></a>00315         }
<a name="l00316"></a>00316         glEnd();
<a name="l00317"></a>00317     }
<a name="l00318"></a>00318 }
<a name="l00319"></a>00319 
<a name="l00320"></a>00320 
<a name="l00324"></a>00324 <span class="keywordtype">void</span> String::RecomputeRect()
<a name="l00325"></a>00325 {
<a name="l00326"></a>00326     <span class="comment">// First get the internal UTF-32 string of the text</span>
<a name="l00327"></a>00327     <span class="keyword">const</span> Unicode::UTF32String&amp; Text = myText;
<a name="l00328"></a>00328 
<a name="l00329"></a>00329     <span class="comment">// Reset the "need update" state</span>
<a name="l00330"></a>00330     myNeedRectUpdate = <span class="keyword">false</span>;
<a name="l00331"></a>00331 
<a name="l00332"></a>00332     <span class="comment">// No text, empty box :)</span>
<a name="l00333"></a>00333     <span class="keywordflow">if</span> (Text.empty())
<a name="l00334"></a>00334     {
<a name="l00335"></a>00335         myBaseRect = <a class="code" href="classsf_1_1Rect.htm">FloatRect</a>(0, 0, 0, 0);
<a name="l00336"></a>00336         <span class="keywordflow">return</span>;
<a name="l00337"></a>00337     }
<a name="l00338"></a>00338 
<a name="l00339"></a>00339     <span class="comment">// Initial values</span>
<a name="l00340"></a>00340     <span class="keywordtype">float</span> CurWidth  = 0;
<a name="l00341"></a>00341     <span class="keywordtype">float</span> CurHeight = 0;
<a name="l00342"></a>00342     <span class="keywordtype">float</span> Width     = 0;
<a name="l00343"></a>00343     <span class="keywordtype">float</span> Height    = 0;
<a name="l00344"></a>00344     <span class="keywordtype">float</span> Factor    = mySize / myFont-&gt;GetCharacterSize();
<a name="l00345"></a>00345 
<a name="l00346"></a>00346     <span class="comment">// Go through each character</span>
<a name="l00347"></a>00347     <span class="keywordflow">for</span> (std::size_t i = 0; i &lt; Text.size(); ++i)
<a name="l00348"></a>00348     {
<a name="l00349"></a>00349         <span class="comment">// Get the current character and its corresponding glyph</span>
<a name="l00350"></a>00350         Uint32         CurChar  = Text[i];
<a name="l00351"></a>00351         <span class="keyword">const</span> Glyph&amp;   CurGlyph = myFont-&gt;GetGlyph(CurChar);
<a name="l00352"></a>00352         <span class="keywordtype">float</span>          Advance  = CurGlyph.Advance * Factor;
<a name="l00353"></a>00353         <span class="keyword">const</span> IntRect&amp; Rect     = CurGlyph.Rectangle;
<a name="l00354"></a>00354 
<a name="l00355"></a>00355         <span class="comment">// Handle special characters</span>
<a name="l00356"></a>00356         <span class="keywordflow">switch</span> (CurChar)
<a name="l00357"></a>00357         {
<a name="l00358"></a>00358             <span class="keywordflow">case</span> L<span class="charliteral">' '</span> :  CurWidth += Advance;                    <span class="keywordflow">continue</span>;
<a name="l00359"></a>00359             <span class="keywordflow">case</span> L<span class="charliteral">'\t'</span> : CurWidth += Advance * 4;                <span class="keywordflow">continue</span>;
<a name="l00360"></a>00360             <span class="keywordflow">case</span> L<span class="charliteral">'\v'</span> : Height   += mySize  * 4; CurHeight = 0; <span class="keywordflow">continue</span>;
<a name="l00361"></a>00361 
<a name="l00362"></a>00362             <span class="keywordflow">case</span> L<span class="charliteral">'\n'</span> :
<a name="l00363"></a>00363                 Height += mySize;
<a name="l00364"></a>00364                 CurHeight = 0;
<a name="l00365"></a>00365                 <span class="keywordflow">if</span> (CurWidth &gt; Width)
<a name="l00366"></a>00366                     Width = CurWidth;
<a name="l00367"></a>00367                 CurWidth = 0;
<a name="l00368"></a>00368                 <span class="keywordflow">continue</span>;
<a name="l00369"></a>00369         }
<a name="l00370"></a>00370 
<a name="l00371"></a>00371         <span class="comment">// Advance to the next character</span>
<a name="l00372"></a>00372         CurWidth += Advance;
<a name="l00373"></a>00373 
<a name="l00374"></a>00374         <span class="comment">// Update the maximum height</span>
<a name="l00375"></a>00375         <span class="keywordtype">float</span> CharHeight = (myFont-&gt;GetCharacterSize() + Rect.Bottom) * Factor;
<a name="l00376"></a>00376         <span class="keywordflow">if</span> (CharHeight &gt; CurHeight)
<a name="l00377"></a>00377             CurHeight = CharHeight;
<a name="l00378"></a>00378     }
<a name="l00379"></a>00379 
<a name="l00380"></a>00380     <span class="comment">// Update the last line</span>
<a name="l00381"></a>00381     <span class="keywordflow">if</span> (CurWidth &gt; Width)
<a name="l00382"></a>00382         Width = CurWidth;
<a name="l00383"></a>00383     Height += CurHeight;
<a name="l00384"></a>00384 
<a name="l00385"></a>00385     <span class="comment">// Add a slight width / height if we're using the bold style</span>
<a name="l00386"></a>00386     <span class="keywordflow">if</span> (myStyle &amp; <a class="code" href="classsf_1_1String.htm#eedf6f2453ae7b88ddf0f7427968a6d80f26252a684f5947bb7fbd58452cb3f0" title="Characters are bold.">Bold</a>)
<a name="l00387"></a>00387     {
<a name="l00388"></a>00388         Width  += 1 * Factor;
<a name="l00389"></a>00389         Height += 1 * Factor;
<a name="l00390"></a>00390     }
<a name="l00391"></a>00391 
<a name="l00392"></a>00392     <span class="comment">// Add a slight width if we're using the italic style</span>
<a name="l00393"></a>00393     <span class="keywordflow">if</span> (myStyle &amp; <a class="code" href="classsf_1_1String.htm#eedf6f2453ae7b88ddf0f7427968a6d860562ce6c8ba01f65aa0551b33c46234" title="Characters are in italic.">Italic</a>)
<a name="l00394"></a>00394     {
<a name="l00395"></a>00395         Width += 0.208f * mySize;
<a name="l00396"></a>00396     }
<a name="l00397"></a>00397 
<a name="l00398"></a>00398     <span class="comment">// Add a slight height if we're using the underlined style</span>
<a name="l00399"></a>00399     <span class="keywordflow">if</span> (myStyle &amp; <a class="code" href="classsf_1_1String.htm#eedf6f2453ae7b88ddf0f7427968a6d80f4cd758cb0126a9df3307fe885bae3e" title="Characters are underlined.">Underlined</a>)
<a name="l00400"></a>00400     {
<a name="l00401"></a>00401         <span class="keywordflow">if</span> (CurHeight &lt; mySize + 4 * Factor)
<a name="l00402"></a>00402             Height += 4 * Factor;
<a name="l00403"></a>00403     }
<a name="l00404"></a>00404 
<a name="l00405"></a>00405     <span class="comment">// Finally update the rectangle</span>
<a name="l00406"></a>00406     myBaseRect.Left   = 0;
<a name="l00407"></a>00407     myBaseRect.Top    = 0;
<a name="l00408"></a>00408     myBaseRect.Right  = Width;
<a name="l00409"></a>00409     myBaseRect.Bottom = Height;
<a name="l00410"></a>00410 }
<a name="l00411"></a>00411 
<a name="l00412"></a>00412 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
