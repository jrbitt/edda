<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>Resource.hpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_RESOURCE_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_RESOURCE_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="keyword">namespace </span>sf
<a name="l00035"></a>00035 {
<a name="l00037"></a>00037 <span class="comment">// These two classes are defined in the same header because</span>
<a name="l00038"></a>00038 <span class="comment">// they depend on each other. And as they're template classes,</span>
<a name="l00039"></a>00039 <span class="comment">// they must be entirely defined in header files, which</span>
<a name="l00040"></a>00040 <span class="comment">// prevents from proper separate compiling</span>
<a name="l00042"></a>00042 <span class="comment"></span>
<a name="l00043"></a>00043 <span class="keyword">template</span> &lt;<span class="keyword">typename</span>&gt; <span class="keyword">class </span>ResourcePtr;
<a name="l00044"></a>00044 
<a name="l00049"></a>00049 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00050"></a><a class="code" href="classsf_1_1Resource.htm">00050</a> <span class="keyword">class </span><a class="code" href="classsf_1_1Resource.htm" title="Base class for every resource that needs to notify dependent classes about its destruction...">Resource</a>
<a name="l00051"></a>00051 {
<a name="l00052"></a>00052 <span class="keyword">protected</span> :
<a name="l00053"></a>00053 
<a name="l00058"></a>00058     <a class="code" href="classsf_1_1Resource.htm#a044d32edfcd9b6aebd50d03658e8130" title="Default constructor.">Resource</a>();
<a name="l00059"></a>00059 
<a name="l00066"></a>00066     <a class="code" href="classsf_1_1Resource.htm#a044d32edfcd9b6aebd50d03658e8130" title="Default constructor.">Resource</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1Resource.htm" title="Base class for every resource that needs to notify dependent classes about its destruction...">Resource&lt;T&gt;</a>&amp; Copy);
<a name="l00067"></a>00067 
<a name="l00072"></a>00072     <a class="code" href="classsf_1_1Resource.htm#0e83e83339851d7b3246939bde3fc1ac" title="Destructor.">~Resource</a>();
<a name="l00073"></a>00073 
<a name="l00082"></a>00082     <a class="code" href="classsf_1_1Resource.htm" title="Base class for every resource that needs to notify dependent classes about its destruction...">Resource&lt;T&gt;</a>&amp; <a class="code" href="classsf_1_1Resource.htm#772badbe4813a5b459f588698ac7ad60" title="Assignment operator.">operator =</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1Resource.htm" title="Base class for every resource that needs to notify dependent classes about its destruction...">Resource&lt;T&gt;</a>&amp; Other);
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 <span class="keyword">private</span> :
<a name="l00085"></a>00085 
<a name="l00086"></a>00086     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classsf_1_1ResourcePtr.htm" title="Safe pointer to a T resource (inheriting from sf::Resource&amp;lt;T&amp;gt;), its pointer...">ResourcePtr</a>&lt;T&gt;;
<a name="l00087"></a>00087 
<a name="l00094"></a>00094     <span class="keywordtype">void</span> Connect(<a class="code" href="classsf_1_1ResourcePtr.htm" title="Safe pointer to a T resource (inheriting from sf::Resource&amp;lt;T&amp;gt;), its pointer...">ResourcePtr&lt;T&gt;</a>&amp; Observer) <span class="keyword">const</span>;
<a name="l00095"></a>00095 
<a name="l00102"></a>00102     <span class="keywordtype">void</span> Disconnect(<a class="code" href="classsf_1_1ResourcePtr.htm" title="Safe pointer to a T resource (inheriting from sf::Resource&amp;lt;T&amp;gt;), its pointer...">ResourcePtr&lt;T&gt;</a>&amp; Observer) <span class="keyword">const</span>;
<a name="l00103"></a>00103 
<a name="l00105"></a>00105     <span class="comment">// Member data</span>
<a name="l00107"></a>00107 <span class="comment"></span>    <span class="keyword">mutable</span> std::set&lt;ResourcePtr&lt;T&gt;*&gt; myObservers;
<a name="l00108"></a>00108 };
<a name="l00109"></a>00109 
<a name="l00110"></a>00110 
<a name="l00115"></a>00115 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00116"></a><a class="code" href="classsf_1_1ResourcePtr.htm">00116</a> <span class="keyword">class </span><a class="code" href="classsf_1_1ResourcePtr.htm" title="Safe pointer to a T resource (inheriting from sf::Resource&amp;lt;T&amp;gt;), its pointer...">ResourcePtr</a>
<a name="l00117"></a>00117 {
<a name="l00118"></a>00118 <span class="keyword">public</span> :
<a name="l00119"></a>00119 
<a name="l00124"></a>00124     <a class="code" href="classsf_1_1ResourcePtr.htm#48ddcd15ed75e9ee3ea88e4d29402140" title="Default constructor.">ResourcePtr</a>();
<a name="l00125"></a>00125 
<a name="l00132"></a>00132     <a class="code" href="classsf_1_1ResourcePtr.htm#48ddcd15ed75e9ee3ea88e4d29402140" title="Default constructor.">ResourcePtr</a>(<span class="keyword">const</span> T* <a class="code" href="classsf_1_1Resource.htm" title="Base class for every resource that needs to notify dependent classes about its destruction...">Resource</a>);
<a name="l00133"></a>00133 
<a name="l00140"></a>00140     <a class="code" href="classsf_1_1ResourcePtr.htm#48ddcd15ed75e9ee3ea88e4d29402140" title="Default constructor.">ResourcePtr</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1ResourcePtr.htm" title="Safe pointer to a T resource (inheriting from sf::Resource&amp;lt;T&amp;gt;), its pointer...">ResourcePtr&lt;T&gt;</a>&amp; Copy);
<a name="l00141"></a>00141 
<a name="l00146"></a>00146     <a class="code" href="classsf_1_1ResourcePtr.htm#0ec69fdecccd1240030b24385f6884dd" title="Destructor.">~ResourcePtr</a>();
<a name="l00147"></a>00147 
<a name="l00156"></a>00156     <a class="code" href="classsf_1_1ResourcePtr.htm" title="Safe pointer to a T resource (inheriting from sf::Resource&amp;lt;T&amp;gt;), its pointer...">ResourcePtr&lt;T&gt;</a>&amp; <a class="code" href="classsf_1_1ResourcePtr.htm#efd17640cfe8d96934435fb8f2b40574" title="Assignment operator from another ResourcePtr.">operator =</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1ResourcePtr.htm" title="Safe pointer to a T resource (inheriting from sf::Resource&amp;lt;T&amp;gt;), its pointer...">ResourcePtr&lt;T&gt;</a>&amp; Other);
<a name="l00157"></a>00157 
<a name="l00166"></a>00166     <a class="code" href="classsf_1_1ResourcePtr.htm" title="Safe pointer to a T resource (inheriting from sf::Resource&amp;lt;T&amp;gt;), its pointer...">ResourcePtr&lt;T&gt;</a>&amp; <a class="code" href="classsf_1_1ResourcePtr.htm#efd17640cfe8d96934435fb8f2b40574" title="Assignment operator from another ResourcePtr.">operator =</a>(<span class="keyword">const</span> T* Resource);
<a name="l00167"></a>00167 
<a name="l00177"></a>00177     <a class="code" href="classsf_1_1ResourcePtr.htm#7af0f407f121bff6e4dcf71c7c7955de" title="Cast operator to implicitely convert the resource pointer to its raw pointer type...">operator const T*</a>() <span class="keyword">const</span>;
<a name="l00178"></a>00178 
<a name="l00185"></a>00185     <span class="keyword">const</span> T&amp; <a class="code" href="classsf_1_1ResourcePtr.htm#4e5401c5a07347a35cc3b9192e11b071" title="Operator * overload to return a reference to the actual resource.">operator *</a>() <span class="keyword">const</span>;
<a name="l00186"></a>00186 
<a name="l00193"></a>00193     <span class="keyword">const</span> T* <a class="code" href="classsf_1_1ResourcePtr.htm#e58ea517eee0a97a778c3c59e4c3fe3a" title="Operator -&amp;gt; overload to return a pointer to the actual resource.">operator -&gt;</a>() <span class="keyword">const</span>;
<a name="l00194"></a>00194 
<a name="l00200"></a>00200     <span class="keywordtype">void</span> <a class="code" href="classsf_1_1ResourcePtr.htm#e7e9d9ed819db0f541a7c22f5a28abf9" title="Function called when the observed resource is about to be destroyed.">OnResourceDestroyed</a>();
<a name="l00201"></a>00201 
<a name="l00202"></a>00202 <span class="keyword">private</span> :
<a name="l00203"></a>00203 
<a name="l00205"></a>00205     <span class="comment">// Member data</span>
<a name="l00207"></a>00207 <span class="comment"></span>    <span class="keyword">const</span> T* myResource; 
<a name="l00208"></a>00208 };
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 <span class="preprocessor">#include &lt;SFML/System/Resource.inl&gt;</span>
<a name="l00211"></a>00211 <span class="preprocessor">#include &lt;SFML/System/ResourcePtr.inl&gt;</span>
<a name="l00212"></a>00212 
<a name="l00213"></a>00213 } <span class="comment">// namespace sf</span>
<a name="l00214"></a>00214 
<a name="l00215"></a>00215 
<a name="l00216"></a>00216 <span class="preprocessor">#endif // SFML_RESOURCE_HPP</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
