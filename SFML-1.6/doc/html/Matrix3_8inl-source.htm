<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>Matrix3.inl</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFGE - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 
<a name="l00029"></a>00029 <span class="keyword">inline</span> Matrix3::Matrix3()
<a name="l00030"></a>00030 {
<a name="l00031"></a>00031     myData[0] = 1.f; myData[4] = 0.f; myData[8]  = 0.f; myData[12] = 0.f;
<a name="l00032"></a>00032     myData[1] = 0.f; myData[5] = 1.f; myData[9]  = 0.f; myData[13] = 0.f;
<a name="l00033"></a>00033     myData[2] = 0.f; myData[6] = 0.f; myData[10] = 1.f; myData[14] = 0.f;
<a name="l00034"></a>00034     myData[3] = 0.f; myData[7] = 0.f; myData[11] = 0.f; myData[15] = 1.f;
<a name="l00035"></a>00035 }
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 
<a name="l00041"></a>00041 <span class="keyword">inline</span> <a class="code" href="classsf_1_1Matrix3.htm#c91b75704a916deb3febe39e06962b4c" title="Default constructor (builds an identity matrix).">Matrix3::Matrix3</a>(<span class="keywordtype">float</span> a00, <span class="keywordtype">float</span> a01, <span class="keywordtype">float</span> a02,
<a name="l00042"></a>00042                         <span class="keywordtype">float</span> a10, <span class="keywordtype">float</span> a11, <span class="keywordtype">float</span> a12,
<a name="l00043"></a>00043                         <span class="keywordtype">float</span> a20, <span class="keywordtype">float</span> a21, <span class="keywordtype">float</span> a22)
<a name="l00044"></a>00044 {
<a name="l00045"></a>00045     myData[0] = a00; myData[4] = a01; myData[8]  = 0.f; myData[12] = a02;
<a name="l00046"></a>00046     myData[1] = a10; myData[5] = a11; myData[9]  = 0.f; myData[13] = a12;
<a name="l00047"></a>00047     myData[2] = 0.f; myData[6] = 0.f; myData[10] = 1.f; myData[14] = 0.f;
<a name="l00048"></a>00048     myData[3] = a20; myData[7] = a21; myData[11] = 0.f; myData[15] = a22;
<a name="l00049"></a>00049 }
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 
<a name="l00055"></a>00055 <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classsf_1_1Matrix3.htm#beb18b51c51229e809725e4cd5741b2d" title="Build a matrix from a set of transformations.">Matrix3::SetFromTransformations</a>(<span class="keyword">const</span> Vector2f&amp; Center, <span class="keyword">const</span> Vector2f&amp; Translation, <span class="keywordtype">float</span> Rotation, <span class="keyword">const</span> Vector2f&amp; Scale)
<a name="l00056"></a>00056 {
<a name="l00057"></a>00057     <span class="keywordtype">float</span> Angle = Rotation * 3.141592654f / 180.f;
<a name="l00058"></a>00058     <span class="keywordtype">float</span> Cos   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(cos(Angle));
<a name="l00059"></a>00059     <span class="keywordtype">float</span> Sin   = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(sin(Angle));
<a name="l00060"></a>00060     <span class="keywordtype">float</span> SxCos = Scale.x * Cos;
<a name="l00061"></a>00061     <span class="keywordtype">float</span> SyCos = Scale.y * Cos;
<a name="l00062"></a>00062     <span class="keywordtype">float</span> SxSin = Scale.x * Sin;
<a name="l00063"></a>00063     <span class="keywordtype">float</span> SySin = Scale.y * Sin;
<a name="l00064"></a>00064     <span class="keywordtype">float</span> Tx    = -Center.x * SxCos - Center.y * SySin + Translation.x;
<a name="l00065"></a>00065     <span class="keywordtype">float</span> Ty    =  Center.x * SxSin - Center.y * SyCos + Translation.y;
<a name="l00066"></a>00066 
<a name="l00067"></a>00067     myData[0] =  SxCos; myData[4] = SySin; myData[8]  = 0.f; myData[12] = Tx;
<a name="l00068"></a>00068     myData[1] = -SxSin; myData[5] = SyCos; myData[9]  = 0.f; myData[13] = Ty;
<a name="l00069"></a>00069     myData[2] =  0.f;   myData[6] = 0.f;   myData[10] = 1.f; myData[14] = 0.f;
<a name="l00070"></a>00070     myData[3] =  0.f;   myData[7] = 0.f;   myData[11] = 0.f; myData[15] = 1.f;
<a name="l00071"></a>00071 }
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 
<a name="l00077"></a>00077 <span class="keyword">inline</span> Vector2f <a class="code" href="classsf_1_1Matrix3.htm#8cb1106305307a8fbf8450f4aa6f4151" title="Transform a point by the matrix.">Matrix3::Transform</a>(<span class="keyword">const</span> Vector2f&amp; Point)<span class="keyword"> const</span>
<a name="l00078"></a>00078 <span class="keyword"></span>{
<a name="l00079"></a>00079     <span class="keywordflow">return</span> Vector2f(myData[0] * Point.x + myData[4] * Point.y + myData[12],
<a name="l00080"></a>00080                     myData[1] * Point.x + myData[5] * Point.y + myData[13]);
<a name="l00081"></a>00081 }
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 
<a name="l00087"></a>00087 <span class="keyword">inline</span> Matrix3 <a class="code" href="classsf_1_1Matrix3.htm#fa7b544f401812b55ace055043385e8e" title="Return the inverse of the matrix.">Matrix3::GetInverse</a>()<span class="keyword"> const</span>
<a name="l00088"></a>00088 <span class="keyword"></span>{
<a name="l00089"></a>00089     <span class="comment">// Compute the determinant</span>
<a name="l00090"></a>00090     <span class="keywordtype">float</span> Det = myData[0] * (myData[15] * myData[5] - myData[7] * myData[13]) -
<a name="l00091"></a>00091                 myData[1] * (myData[15] * myData[4] - myData[7] * myData[12]) +
<a name="l00092"></a>00092                 myData[3] * (myData[13] * myData[4] - myData[5] * myData[12]);
<a name="l00093"></a>00093 
<a name="l00094"></a>00094     <span class="comment">// Compute the inverse if determinant is not zero</span>
<a name="l00095"></a>00095     <span class="keywordflow">if</span> ((Det &lt; -1E-7f) || (Det &gt; 1E-7f))
<a name="l00096"></a>00096     {
<a name="l00097"></a>00097         <span class="keywordflow">return</span> <a class="code" href="classsf_1_1Matrix3.htm#c91b75704a916deb3febe39e06962b4c" title="Default constructor (builds an identity matrix).">Matrix3</a>( (myData[15] * myData[5] - myData[7] * myData[13]) / Det,
<a name="l00098"></a>00098                        -(myData[15] * myData[4] - myData[7] * myData[12]) / Det,
<a name="l00099"></a>00099                         (myData[13] * myData[4] - myData[5] * myData[12]) / Det,
<a name="l00100"></a>00100                        -(myData[15] * myData[1] - myData[3] * myData[13]) / Det,
<a name="l00101"></a>00101                         (myData[15] * myData[0] - myData[3] * myData[12]) / Det,
<a name="l00102"></a>00102                        -(myData[13] * myData[0] - myData[1] * myData[12]) / Det,
<a name="l00103"></a>00103                         (myData[7]  * myData[1] - myData[3] * myData[5])  / Det,
<a name="l00104"></a>00104                        -(myData[7]  * myData[0] - myData[3] * myData[4])  / Det,
<a name="l00105"></a>00105                         (myData[5]  * myData[0] - myData[1] * myData[4])  / Det);
<a name="l00106"></a>00106     }
<a name="l00107"></a>00107     <span class="keywordflow">else</span>
<a name="l00108"></a>00108     {
<a name="l00109"></a>00109         <span class="keywordflow">return</span> <a class="code" href="classsf_1_1Matrix3.htm#fa5a43545e529d8b8628ca42289ef40a" title="Identity matrix.">Identity</a>;
<a name="l00110"></a>00110     }
<a name="l00111"></a>00111 }
<a name="l00112"></a>00112 
<a name="l00113"></a>00113 
<a name="l00118"></a>00118 <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">float</span>* <a class="code" href="classsf_1_1Matrix3.htm#ff23cbd3d056d404a566a62dea4c98c1" title="Return the elements of the matrix as a 4x4, in an array of 16 floats.">Matrix3::Get4x4Elements</a>()<span class="keyword"> const</span>
<a name="l00119"></a>00119 <span class="keyword"></span>{
<a name="l00120"></a>00120     <span class="keywordflow">return</span> myData;
<a name="l00121"></a>00121 }
<a name="l00122"></a>00122 
<a name="l00123"></a>00123 
<a name="l00127"></a>00127 <span class="keyword">inline</span> <span class="keywordtype">float</span> <a class="code" href="classsf_1_1Matrix3.htm#fffc96664df9bfc7aff4b95a6b11aea8" title="Operator () overloads to access the matrix elements.">Matrix3::operator ()</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Row, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Col)<span class="keyword"> const</span>
<a name="l00128"></a>00128 <span class="keyword"></span>{
<a name="l00129"></a>00129     <span class="keywordflow">switch</span> (Row + Col * 3)
<a name="l00130"></a>00130     {
<a name="l00131"></a>00131         <span class="keywordflow">case</span> 0 : <span class="keywordflow">return</span> myData[0];
<a name="l00132"></a>00132         <span class="keywordflow">case</span> 1 : <span class="keywordflow">return</span> myData[1];
<a name="l00133"></a>00133         <span class="keywordflow">case</span> 2 : <span class="keywordflow">return</span> myData[3];
<a name="l00134"></a>00134         <span class="keywordflow">case</span> 3 : <span class="keywordflow">return</span> myData[4];
<a name="l00135"></a>00135         <span class="keywordflow">case</span> 4 : <span class="keywordflow">return</span> myData[5];
<a name="l00136"></a>00136         <span class="keywordflow">case</span> 5 : <span class="keywordflow">return</span> myData[7];
<a name="l00137"></a>00137         <span class="keywordflow">case</span> 6 : <span class="keywordflow">return</span> myData[12];
<a name="l00138"></a>00138         <span class="keywordflow">case</span> 7 : <span class="keywordflow">return</span> myData[13];
<a name="l00139"></a>00139         <span class="keywordflow">case</span> 8 : <span class="keywordflow">return</span> myData[15];
<a name="l00140"></a>00140 
<a name="l00141"></a>00141         <span class="keywordflow">default</span> : <span class="keywordflow">return</span> myData[0];
<a name="l00142"></a>00142     }
<a name="l00143"></a>00143 }
<a name="l00144"></a>00144 <span class="keyword">inline</span> <span class="keywordtype">float</span>&amp; <a class="code" href="classsf_1_1Matrix3.htm#fffc96664df9bfc7aff4b95a6b11aea8" title="Operator () overloads to access the matrix elements.">Matrix3::operator ()</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Row, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Col)
<a name="l00145"></a>00145 {
<a name="l00146"></a>00146     <span class="keywordflow">switch</span> (Row + Col * 3)
<a name="l00147"></a>00147     {
<a name="l00148"></a>00148         <span class="keywordflow">case</span> 0 : <span class="keywordflow">return</span> myData[0];
<a name="l00149"></a>00149         <span class="keywordflow">case</span> 1 : <span class="keywordflow">return</span> myData[1];
<a name="l00150"></a>00150         <span class="keywordflow">case</span> 2 : <span class="keywordflow">return</span> myData[3];
<a name="l00151"></a>00151         <span class="keywordflow">case</span> 3 : <span class="keywordflow">return</span> myData[4];
<a name="l00152"></a>00152         <span class="keywordflow">case</span> 4 : <span class="keywordflow">return</span> myData[5];
<a name="l00153"></a>00153         <span class="keywordflow">case</span> 5 : <span class="keywordflow">return</span> myData[7];
<a name="l00154"></a>00154         <span class="keywordflow">case</span> 6 : <span class="keywordflow">return</span> myData[12];
<a name="l00155"></a>00155         <span class="keywordflow">case</span> 7 : <span class="keywordflow">return</span> myData[13];
<a name="l00156"></a>00156         <span class="keywordflow">case</span> 8 : <span class="keywordflow">return</span> myData[15];
<a name="l00157"></a>00157 
<a name="l00158"></a>00158         <span class="keywordflow">default</span> : <span class="keywordflow">return</span> myData[0];
<a name="l00159"></a>00159     }
<a name="l00160"></a>00160 }
<a name="l00161"></a>00161 
<a name="l00162"></a>00162 
<a name="l00166"></a>00166 <span class="keyword">inline</span> Matrix3 <a class="code" href="classsf_1_1Matrix3.htm#695f753f4aa2cd617c1cecdfa0212e28" title="Operator * overload to multiply two matrices.">Matrix3::operator *</a>(<span class="keyword">const</span> Matrix3&amp; Mat)<span class="keyword"> const</span>
<a name="l00167"></a>00167 <span class="keyword"></span>{
<a name="l00168"></a>00168     <span class="keywordflow">return</span> <a class="code" href="classsf_1_1Matrix3.htm#c91b75704a916deb3febe39e06962b4c" title="Default constructor (builds an identity matrix).">Matrix3</a>(myData[0] * Mat.myData[0]  + myData[4] * Mat.myData[1]  + myData[12] * Mat.myData[3],
<a name="l00169"></a>00169                    myData[0] * Mat.myData[4]  + myData[4] * Mat.myData[5]  + myData[12] * Mat.myData[7],
<a name="l00170"></a>00170                    myData[0] * Mat.myData[12] + myData[4] * Mat.myData[13] + myData[12] * Mat.myData[15],
<a name="l00171"></a>00171                    myData[1] * Mat.myData[0]  + myData[5] * Mat.myData[1]  + myData[13] * Mat.myData[3],
<a name="l00172"></a>00172                    myData[1] * Mat.myData[4]  + myData[5] * Mat.myData[5]  + myData[13] * Mat.myData[7],
<a name="l00173"></a>00173                    myData[1] * Mat.myData[12] + myData[5] * Mat.myData[13] + myData[13] * Mat.myData[15],
<a name="l00174"></a>00174                    myData[3] * Mat.myData[0]  + myData[7] * Mat.myData[1]  + myData[15] * Mat.myData[3],
<a name="l00175"></a>00175                    myData[3] * Mat.myData[4]  + myData[7] * Mat.myData[5]  + myData[15] * Mat.myData[7],
<a name="l00176"></a>00176                    myData[3] * Mat.myData[12] + myData[7] * Mat.myData[13] + myData[15] * Mat.myData[15]);
<a name="l00177"></a>00177 }
<a name="l00178"></a>00178 
<a name="l00179"></a>00179 
<a name="l00183"></a>00183 <span class="keyword">inline</span> Matrix3&amp; <a class="code" href="classsf_1_1Matrix3.htm#ac08a84563176fb77613c43adf402966" title="Operator *= overload to multiply-assign two matrices.">Matrix3::operator *=</a>(<span class="keyword">const</span> Matrix3&amp; Mat)
<a name="l00184"></a>00184 {
<a name="l00185"></a>00185     <span class="keywordflow">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span> * Mat;
<a name="l00186"></a>00186 }
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
