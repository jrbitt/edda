<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>Color.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Graphics/Color.hpp&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="keyword">namespace </span>sf
<a name="l00033"></a>00033 {
<a name="l00035"></a>00035 <span class="comment">// Static member data</span>
<a name="l00037"></a>00037 <span class="comment"></span><span class="keyword">const</span> Color <a class="code" href="classsf_1_1Color.htm#77c688197b981338f0b19dc58bd2facd" title="Black predefined color.">Color::Black</a>(0, 0, 0);
<a name="l00038"></a>00038 <span class="keyword">const</span> Color <a class="code" href="classsf_1_1Color.htm#4fd874712178d9e206f53226002aa4ca" title="White predefined color.">Color::White</a>(255, 255, 255);
<a name="l00039"></a>00039 <span class="keyword">const</span> Color <a class="code" href="classsf_1_1Color.htm#127dbf55db9c07d0fa8f4bfcbb97594a" title="Red predefined color.">Color::Red</a>(255, 0, 0);
<a name="l00040"></a>00040 <span class="keyword">const</span> Color <a class="code" href="classsf_1_1Color.htm#95629b30de8c6856aa7d3afed12eb865" title="Green predefined color.">Color::Green</a>(0, 255, 0);
<a name="l00041"></a>00041 <span class="keyword">const</span> Color <a class="code" href="classsf_1_1Color.htm#b03770d4817426b2614cfc33cf0e245c" title="Blue predefined color.">Color::Blue</a>(0, 0, 255);
<a name="l00042"></a>00042 <span class="keyword">const</span> Color <a class="code" href="classsf_1_1Color.htm#f8896b5f56650935f5b9d72d528802c7" title="Yellow predefined color.">Color::Yellow</a>(255, 255, 0);
<a name="l00043"></a>00043 <span class="keyword">const</span> Color <a class="code" href="classsf_1_1Color.htm#6fe70d90b65b2163dd066a84ac00426c" title="Magenta predefined color.">Color::Magenta</a>(255, 0, 255);
<a name="l00044"></a>00044 <span class="keyword">const</span> Color <a class="code" href="classsf_1_1Color.htm#64ae9beb0b9a5865dd811cda4bb18340" title="Cyan predefined color.">Color::Cyan</a>(0, 255, 255);
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 
<a name="l00050"></a><a class="code" href="classsf_1_1Color.htm#c2eb4393fb11ad3fa3ccf34e92fe08e4">00050</a> <a class="code" href="classsf_1_1Color.htm#c2eb4393fb11ad3fa3ccf34e92fe08e4" title="Default constructor.">Color::Color</a>() :
<a name="l00051"></a>00051 r(0),
<a name="l00052"></a>00052 g(0),
<a name="l00053"></a>00053 b(0),
<a name="l00054"></a>00054 a(255)
<a name="l00055"></a>00055 {
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 }
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 
<a name="l00063"></a><a class="code" href="classsf_1_1Color.htm#35b792f22f04696b82a93e36530ca32c">00063</a> <a class="code" href="classsf_1_1Color.htm#c2eb4393fb11ad3fa3ccf34e92fe08e4" title="Default constructor.">Color::Color</a>(Uint8 R, Uint8 G, Uint8 B, Uint8 A) :
<a name="l00064"></a>00064 r(R),
<a name="l00065"></a>00065 g(G),
<a name="l00066"></a>00066 b(B),
<a name="l00067"></a>00067 a(A)
<a name="l00068"></a>00068 {
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 }
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 
<a name="l00076"></a><a class="code" href="classsf_1_1Color.htm#bad27a2aa8db0ee9322955e69a842ddf">00076</a> <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a>&amp; <a class="code" href="classsf_1_1Color.htm#bad27a2aa8db0ee9322955e69a842ddf" title="Operator += overload to add a color.">Color::operator +=</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a>&amp; Other)
<a name="l00077"></a>00077 {
<a name="l00078"></a>00078     <a class="code" href="classsf_1_1Color.htm#6a5256ca24a4f9f0e0808f6fc23e01e1" title="Red component.">r</a> = <span class="keyword">static_cast&lt;</span>Uint8<span class="keyword">&gt;</span>(std::min(<a class="code" href="classsf_1_1Color.htm#6a5256ca24a4f9f0e0808f6fc23e01e1" title="Red component.">r</a> + Other.<a class="code" href="classsf_1_1Color.htm#6a5256ca24a4f9f0e0808f6fc23e01e1" title="Red component.">r</a>, 255));
<a name="l00079"></a>00079     <a class="code" href="classsf_1_1Color.htm#591daf9c3c55dea830c76c962d6ba1a5" title="Green component.">g</a> = <span class="keyword">static_cast&lt;</span>Uint8<span class="keyword">&gt;</span>(std::min(<a class="code" href="classsf_1_1Color.htm#591daf9c3c55dea830c76c962d6ba1a5" title="Green component.">g</a> + Other.<a class="code" href="classsf_1_1Color.htm#591daf9c3c55dea830c76c962d6ba1a5" title="Green component.">g</a>, 255));
<a name="l00080"></a>00080     <a class="code" href="classsf_1_1Color.htm#6707aedd0609c8920e12df5d7abc53cb" title="Blue component.">b</a> = <span class="keyword">static_cast&lt;</span>Uint8<span class="keyword">&gt;</span>(std::min(<a class="code" href="classsf_1_1Color.htm#6707aedd0609c8920e12df5d7abc53cb" title="Blue component.">b</a> + Other.<a class="code" href="classsf_1_1Color.htm#6707aedd0609c8920e12df5d7abc53cb" title="Blue component.">b</a>, 255));
<a name="l00081"></a>00081     <a class="code" href="classsf_1_1Color.htm#56dbdb47d5f040d9b78ac6a0b8b3a831" title="Alpha (transparency) component.">a</a> = <span class="keyword">static_cast&lt;</span>Uint8<span class="keyword">&gt;</span>(std::min(<a class="code" href="classsf_1_1Color.htm#56dbdb47d5f040d9b78ac6a0b8b3a831" title="Alpha (transparency) component.">a</a> + Other.<a class="code" href="classsf_1_1Color.htm#56dbdb47d5f040d9b78ac6a0b8b3a831" title="Alpha (transparency) component.">a</a>, 255));
<a name="l00082"></a>00082 
<a name="l00083"></a>00083     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00084"></a>00084 }
<a name="l00085"></a>00085 
<a name="l00086"></a>00086 
<a name="l00090"></a><a class="code" href="classsf_1_1Color.htm#0b85298f8e6cfe53a8365e1924f6a386">00090</a> <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a>&amp; <a class="code" href="classsf_1_1Color.htm#0b85298f8e6cfe53a8365e1924f6a386" title="Operator *= overload to modulate a color.">Color::operator *=</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a>&amp; Other)
<a name="l00091"></a>00091 {
<a name="l00092"></a>00092     <a class="code" href="classsf_1_1Color.htm#6a5256ca24a4f9f0e0808f6fc23e01e1" title="Red component.">r</a> = <span class="keyword">static_cast&lt;</span>Uint8<span class="keyword">&gt;</span>(<a class="code" href="classsf_1_1Color.htm#6a5256ca24a4f9f0e0808f6fc23e01e1" title="Red component.">r</a> * Other.<a class="code" href="classsf_1_1Color.htm#6a5256ca24a4f9f0e0808f6fc23e01e1" title="Red component.">r</a> / 255);
<a name="l00093"></a>00093     <a class="code" href="classsf_1_1Color.htm#591daf9c3c55dea830c76c962d6ba1a5" title="Green component.">g</a> = <span class="keyword">static_cast&lt;</span>Uint8<span class="keyword">&gt;</span>(<a class="code" href="classsf_1_1Color.htm#591daf9c3c55dea830c76c962d6ba1a5" title="Green component.">g</a> * Other.<a class="code" href="classsf_1_1Color.htm#591daf9c3c55dea830c76c962d6ba1a5" title="Green component.">g</a> / 255);
<a name="l00094"></a>00094     <a class="code" href="classsf_1_1Color.htm#6707aedd0609c8920e12df5d7abc53cb" title="Blue component.">b</a> = <span class="keyword">static_cast&lt;</span>Uint8<span class="keyword">&gt;</span>(<a class="code" href="classsf_1_1Color.htm#6707aedd0609c8920e12df5d7abc53cb" title="Blue component.">b</a> * Other.<a class="code" href="classsf_1_1Color.htm#6707aedd0609c8920e12df5d7abc53cb" title="Blue component.">b</a> / 255);
<a name="l00095"></a>00095     <a class="code" href="classsf_1_1Color.htm#56dbdb47d5f040d9b78ac6a0b8b3a831" title="Alpha (transparency) component.">a</a> = <span class="keyword">static_cast&lt;</span>Uint8<span class="keyword">&gt;</span>(<a class="code" href="classsf_1_1Color.htm#56dbdb47d5f040d9b78ac6a0b8b3a831" title="Alpha (transparency) component.">a</a> * Other.<a class="code" href="classsf_1_1Color.htm#56dbdb47d5f040d9b78ac6a0b8b3a831" title="Alpha (transparency) component.">a</a> / 255);
<a name="l00096"></a>00096 
<a name="l00097"></a>00097     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00098"></a>00098 }
<a name="l00099"></a>00099 
<a name="l00100"></a>00100 
<a name="l00104"></a><a class="code" href="classsf_1_1Color.htm#67a77ba62d5ce56aa618b5117f26e955">00104</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1Color.htm#67a77ba62d5ce56aa618b5117f26e955" title="Compare two colors (for equality).">Color::operator ==</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a>&amp; Other)<span class="keyword"> const</span>
<a name="l00105"></a>00105 <span class="keyword"></span>{
<a name="l00106"></a>00106     <span class="keywordflow">return</span> (<a class="code" href="classsf_1_1Color.htm#6a5256ca24a4f9f0e0808f6fc23e01e1" title="Red component.">r</a> == Other.<a class="code" href="classsf_1_1Color.htm#6a5256ca24a4f9f0e0808f6fc23e01e1" title="Red component.">r</a>) &amp;&amp; (<a class="code" href="classsf_1_1Color.htm#591daf9c3c55dea830c76c962d6ba1a5" title="Green component.">g</a> == Other.<a class="code" href="classsf_1_1Color.htm#591daf9c3c55dea830c76c962d6ba1a5" title="Green component.">g</a>) &amp;&amp; (<a class="code" href="classsf_1_1Color.htm#6707aedd0609c8920e12df5d7abc53cb" title="Blue component.">b</a> == Other.<a class="code" href="classsf_1_1Color.htm#6707aedd0609c8920e12df5d7abc53cb" title="Blue component.">b</a>) &amp;&amp; (<a class="code" href="classsf_1_1Color.htm#56dbdb47d5f040d9b78ac6a0b8b3a831" title="Alpha (transparency) component.">a</a> == Other.<a class="code" href="classsf_1_1Color.htm#56dbdb47d5f040d9b78ac6a0b8b3a831" title="Alpha (transparency) component.">a</a>);
<a name="l00107"></a>00107 }
<a name="l00108"></a>00108 
<a name="l00109"></a>00109 
<a name="l00113"></a><a class="code" href="classsf_1_1Color.htm#058388f4f0cd47b93c08c545d6ac39c5">00113</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1Color.htm#058388f4f0cd47b93c08c545d6ac39c5" title="Compare two colors (for difference).">Color::operator !=</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a>&amp; Other)<span class="keyword"> const</span>
<a name="l00114"></a>00114 <span class="keyword"></span>{
<a name="l00115"></a>00115     <span class="keywordflow">return</span> (<a class="code" href="classsf_1_1Color.htm#6a5256ca24a4f9f0e0808f6fc23e01e1" title="Red component.">r</a> != Other.<a class="code" href="classsf_1_1Color.htm#6a5256ca24a4f9f0e0808f6fc23e01e1" title="Red component.">r</a>) || (<a class="code" href="classsf_1_1Color.htm#591daf9c3c55dea830c76c962d6ba1a5" title="Green component.">g</a> != Other.<a class="code" href="classsf_1_1Color.htm#591daf9c3c55dea830c76c962d6ba1a5" title="Green component.">g</a>) || (<a class="code" href="classsf_1_1Color.htm#6707aedd0609c8920e12df5d7abc53cb" title="Blue component.">b</a> != Other.<a class="code" href="classsf_1_1Color.htm#6707aedd0609c8920e12df5d7abc53cb" title="Blue component.">b</a>) || (<a class="code" href="classsf_1_1Color.htm#56dbdb47d5f040d9b78ac6a0b8b3a831" title="Alpha (transparency) component.">a</a> != Other.<a class="code" href="classsf_1_1Color.htm#56dbdb47d5f040d9b78ac6a0b8b3a831" title="Alpha (transparency) component.">a</a>);
<a name="l00116"></a>00116 }
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 
<a name="l00122"></a>00122 <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> operator +(<span class="keyword">const</span> <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a>&amp; Color1, <span class="keyword">const</span> <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a>&amp; Color2)
<a name="l00123"></a>00123 {
<a name="l00124"></a>00124     <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> c = Color1;
<a name="l00125"></a>00125     c += Color2;
<a name="l00126"></a>00126 
<a name="l00127"></a>00127     <span class="keywordflow">return</span> c;
<a name="l00128"></a>00128 }
<a name="l00129"></a>00129 
<a name="l00130"></a>00130 
<a name="l00134"></a>00134 Color operator *(<span class="keyword">const</span> Color&amp; Color1, <span class="keyword">const</span> Color&amp; Color2)
<a name="l00135"></a>00135 {
<a name="l00136"></a>00136     Color c = Color1;
<a name="l00137"></a>00137     c *= Color2;
<a name="l00138"></a>00138 
<a name="l00139"></a>00139     <span class="keywordflow">return</span> c;
<a name="l00140"></a>00140 }
<a name="l00141"></a>00141 
<a name="l00142"></a>00142 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
