<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>Unicode.hpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_UNICODE_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_UNICODE_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Config.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;iterator&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;locale&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="keyword">namespace </span>sf
<a name="l00039"></a>00039 {
<a name="l00044"></a><a class="code" href="classsf_1_1Unicode.htm">00044</a> <span class="keyword">class </span>SFML_API <a class="code" href="classsf_1_1Unicode.htm" title="Provides utility functions to convert from and to any unicode and ASCII encoding...">Unicode</a>
<a name="l00045"></a>00045 {
<a name="l00046"></a>00046 <span class="keyword">public</span> :
<a name="l00047"></a>00047 
<a name="l00054"></a><a class="code" href="classsf_1_1Unicode.htm#3c6081f88e93693ff8e713053982a9f9">00054</a>     <span class="keyword">typedef</span> std::basic_string&lt;Uint8&gt;  UTF8String;
<a name="l00055"></a>00055     <span class="keyword">typedef</span> std::basic_string&lt;Uint16&gt; UTF16String;
<a name="l00056"></a>00056     <span class="keyword">typedef</span> std::basic_string&lt;Uint32&gt; UTF32String;
<a name="l00057"></a>00057 
<a name="l00063"></a><a class="code" href="classsf_1_1Unicode_1_1Text.htm">00063</a>     <span class="keyword">class </span>SFML_API <a class="code" href="classsf_1_1Unicode_1_1Text.htm" title="This class is an abstract definition of a unicode text, it can be converted from...">Text</a>
<a name="l00064"></a>00064     {
<a name="l00065"></a>00065     <span class="keyword">public</span> :
<a name="l00066"></a>00066 
<a name="l00071"></a>00071         <a class="code" href="classsf_1_1Unicode_1_1Text.htm" title="This class is an abstract definition of a unicode text, it can be converted from...">Text</a>();
<a name="l00072"></a>00072 
<a name="l00079"></a>00079         <a class="code" href="classsf_1_1Unicode_1_1Text.htm" title="This class is an abstract definition of a unicode text, it can be converted from...">Text</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>*                 Str);
<a name="l00080"></a>00080         <a class="code" href="classsf_1_1Unicode_1_1Text.htm" title="This class is an abstract definition of a unicode text, it can be converted from...">Text</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>*              Str);
<a name="l00081"></a>00081         <a class="code" href="classsf_1_1Unicode_1_1Text.htm" title="This class is an abstract definition of a unicode text, it can be converted from...">Text</a>(<span class="keyword">const</span> Uint8*                Str);
<a name="l00082"></a>00082         <a class="code" href="classsf_1_1Unicode_1_1Text.htm" title="This class is an abstract definition of a unicode text, it can be converted from...">Text</a>(<span class="keyword">const</span> Uint16*               Str);
<a name="l00083"></a>00083         <a class="code" href="classsf_1_1Unicode_1_1Text.htm" title="This class is an abstract definition of a unicode text, it can be converted from...">Text</a>(<span class="keyword">const</span> Uint32*               Str);
<a name="l00084"></a>00084         <a class="code" href="classsf_1_1Unicode_1_1Text.htm" title="This class is an abstract definition of a unicode text, it can be converted from...">Text</a>(<span class="keyword">const</span> std::string&amp;          Str);
<a name="l00085"></a>00085         <a class="code" href="classsf_1_1Unicode_1_1Text.htm" title="This class is an abstract definition of a unicode text, it can be converted from...">Text</a>(<span class="keyword">const</span> std::wstring&amp;         Str);
<a name="l00086"></a>00086         <a class="code" href="classsf_1_1Unicode_1_1Text.htm" title="This class is an abstract definition of a unicode text, it can be converted from...">Text</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1Unicode.htm#3c6081f88e93693ff8e713053982a9f9" title="Define a string type for each encoding Warning : in UTF8 and UTF16 strings, one element...">Unicode::UTF8String</a>&amp;  Str);
<a name="l00087"></a>00087         <a class="code" href="classsf_1_1Unicode_1_1Text.htm" title="This class is an abstract definition of a unicode text, it can be converted from...">Text</a>(<span class="keyword">const</span> Unicode::UTF16String&amp; Str);
<a name="l00088"></a>00088         <a class="code" href="classsf_1_1Unicode_1_1Text.htm" title="This class is an abstract definition of a unicode text, it can be converted from...">Text</a>(<span class="keyword">const</span> Unicode::UTF32String&amp; Str);
<a name="l00089"></a>00089 
<a name="l00096"></a>00096         operator       std::string          () <span class="keyword">const</span>;
<a name="l00097"></a>00097         operator       std::wstring         () <span class="keyword">const</span>;
<a name="l00098"></a>00098         operator       Unicode::UTF8String  () <span class="keyword">const</span>;
<a name="l00099"></a>00099         operator       Unicode::UTF16String () <span class="keyword">const</span>;
<a name="l00100"></a>00100         operator const Unicode::UTF32String&amp;() <span class="keyword">const</span>;
<a name="l00101"></a>00101 
<a name="l00102"></a>00102     <span class="keyword">private</span> :
<a name="l00103"></a>00103 
<a name="l00105"></a>00105         <span class="comment">// Data member</span>
<a name="l00107"></a>00107 <span class="comment"></span>        sf::Unicode::UTF32String myUTF32String; 
<a name="l00108"></a>00108     };
<a name="l00109"></a>00109 
<a name="l00123"></a>00123     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00124"></a>00124     <span class="keyword">static</span> Out UTF32ToANSI(In Begin, In End, Out Output, <span class="keywordtype">char</span> Replacement = <span class="charliteral">'?'</span>, <span class="keyword">const</span> std::locale&amp; Locale = GetDefaultLocale());
<a name="l00125"></a>00125 
<a name="l00138"></a>00138     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00139"></a>00139     <span class="keyword">static</span> Out ANSIToUTF32(In Begin, In End, Out Output, <span class="keyword">const</span> std::locale&amp; Locale = GetDefaultLocale());
<a name="l00140"></a>00140 
<a name="l00153"></a>00153     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00154"></a>00154     <span class="keyword">static</span> Out UTF8ToUTF16(In Begin, In End, Out Output, Uint16 Replacement = <span class="charliteral">'?'</span>);
<a name="l00155"></a>00155 
<a name="l00168"></a>00168     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00169"></a>00169     <span class="keyword">static</span> Out UTF8ToUTF32(In Begin, In End, Out Output, Uint32 Replacement = <span class="charliteral">'?'</span>);
<a name="l00170"></a>00170 
<a name="l00183"></a>00183     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00184"></a>00184     <span class="keyword">static</span> Out UTF16ToUTF8(In Begin, In End, Out Output, Uint8 Replacement = <span class="charliteral">'?'</span>);
<a name="l00185"></a>00185 
<a name="l00198"></a>00198     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00199"></a>00199     <span class="keyword">static</span> Out UTF16ToUTF32(In Begin, In End, Out Output, Uint32 Replacement = <span class="charliteral">'?'</span>);
<a name="l00200"></a>00200 
<a name="l00213"></a>00213     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00214"></a>00214     <span class="keyword">static</span> Out UTF32ToUTF8(In Begin, In End, Out Output, Uint8 Replacement = <span class="charliteral">'?'</span>);
<a name="l00215"></a>00215 
<a name="l00228"></a>00228     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00229"></a>00229     <span class="keyword">static</span> Out UTF32ToUTF16(In Begin, In End, Out Output, Uint16 Replacement = <span class="charliteral">'?'</span>);
<a name="l00230"></a>00230 
<a name="l00240"></a>00240     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In&gt;
<a name="l00241"></a>00241     <span class="keyword">static</span> std::size_t GetUTF8Length(In Begin, In End);
<a name="l00242"></a>00242 
<a name="l00252"></a>00252     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In&gt;
<a name="l00253"></a>00253     <span class="keyword">static</span> std::size_t GetUTF16Length(In Begin, In End);
<a name="l00254"></a>00254 
<a name="l00264"></a>00264     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In&gt;
<a name="l00265"></a>00265     <span class="keyword">static</span> std::size_t GetUTF32Length(In Begin, In End);
<a name="l00266"></a>00266 
<a name="l00267"></a>00267 <span class="keyword">private</span> :
<a name="l00268"></a>00268 
<a name="l00275"></a>00275     <span class="keyword">static</span> <span class="keyword">const</span> std::locale&amp; GetDefaultLocale();
<a name="l00276"></a>00276 
<a name="l00278"></a>00278     <span class="comment">// Static member data</span>
<a name="l00280"></a>00280 <span class="comment"></span>    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span>    UTF8TrailingBytes[256]; 
<a name="l00281"></a>00281     <span class="keyword">static</span> <span class="keyword">const</span> Uint32 UTF8Offsets[6];         
<a name="l00282"></a>00282     <span class="keyword">static</span> <span class="keyword">const</span> Uint8  UTF8FirstBytes[7];      
<a name="l00283"></a>00283 };
<a name="l00284"></a>00284 
<a name="l00285"></a>00285 <span class="preprocessor">#include &lt;SFML/System/Unicode.inl&gt;</span>
<a name="l00286"></a>00286 
<a name="l00287"></a>00287 } <span class="comment">// namespace sf</span>
<a name="l00288"></a>00288 
<a name="l00289"></a>00289 
<a name="l00290"></a>00290 <span class="preprocessor">#endif // SFML_UNICODE_HPP</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
