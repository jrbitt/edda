<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>SocketTCP.hpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_SOCKETTCP_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_SOCKETTCP_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Network/SocketHelper.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="keyword">namespace </span>sf
<a name="l00036"></a>00036 {
<a name="l00037"></a>00037 <span class="keyword">class </span>Packet;
<a name="l00038"></a>00038 <span class="keyword">class </span>IPAddress;
<a name="l00039"></a>00039 <span class="keyword">template</span> &lt;<span class="keyword">typename</span>&gt; <span class="keyword">class </span>Selector;
<a name="l00040"></a>00040 
<a name="l00045"></a><a class="code" href="classsf_1_1SocketTCP.htm">00045</a> <span class="keyword">class </span>SFML_API <a class="code" href="classsf_1_1SocketTCP.htm" title="SocketTCP wraps a socket using TCP protocol to send data safely (but a bit slower)...">SocketTCP</a>
<a name="l00046"></a>00046 {
<a name="l00047"></a>00047 <span class="keyword">public</span> :
<a name="l00048"></a>00048 
<a name="l00053"></a>00053     <a class="code" href="classsf_1_1SocketTCP.htm" title="SocketTCP wraps a socket using TCP protocol to send data safely (but a bit slower)...">SocketTCP</a>();
<a name="l00054"></a>00054 
<a name="l00062"></a>00062     <span class="keywordtype">void</span> SetBlocking(<span class="keywordtype">bool</span> Blocking);
<a name="l00063"></a>00063 
<a name="l00074"></a>00074     Socket::Status Connect(<span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> Port, <span class="keyword">const</span> <a class="code" href="classsf_1_1IPAddress.htm" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a>&amp; HostAddress, <span class="keywordtype">float</span> Timeout = 0.f);
<a name="l00075"></a>00075 
<a name="l00084"></a>00084     <span class="keywordtype">bool</span> Listen(<span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> Port);
<a name="l00085"></a>00085 
<a name="l00096"></a>00096     Socket::Status Accept(<a class="code" href="classsf_1_1SocketTCP.htm" title="SocketTCP wraps a socket using TCP protocol to send data safely (but a bit slower)...">SocketTCP</a>&amp; Connected, <a class="code" href="classsf_1_1IPAddress.htm" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a>* Address = NULL);
<a name="l00097"></a>00097 
<a name="l00107"></a>00107     Socket::Status Send(<span class="keyword">const</span> <span class="keywordtype">char</span>* Data, std::size_t Size);
<a name="l00108"></a>00108 
<a name="l00120"></a>00120     Socket::Status Receive(<span class="keywordtype">char</span>* Data, std::size_t MaxSize, std::size_t&amp; SizeReceived);
<a name="l00121"></a>00121 
<a name="l00130"></a>00130     Socket::Status Send(<a class="code" href="classsf_1_1Packet.htm" title="Packet wraps data to send / to receive through the network.">Packet</a>&amp; PacketToSend);
<a name="l00131"></a>00131 
<a name="l00141"></a>00141     Socket::Status Receive(<a class="code" href="classsf_1_1Packet.htm" title="Packet wraps data to send / to receive through the network.">Packet</a>&amp; PacketToReceive);
<a name="l00142"></a>00142 
<a name="l00149"></a>00149     <span class="keywordtype">bool</span> Close();
<a name="l00150"></a>00150 
<a name="l00158"></a>00158     <span class="keywordtype">bool</span> IsValid() <span class="keyword">const</span>;
<a name="l00159"></a>00159 
<a name="l00168"></a>00168     <span class="keywordtype">bool</span> operator ==(<span class="keyword">const</span> <a class="code" href="classsf_1_1SocketTCP.htm" title="SocketTCP wraps a socket using TCP protocol to send data safely (but a bit slower)...">SocketTCP</a>&amp; Other) <span class="keyword">const</span>;
<a name="l00169"></a>00169 
<a name="l00178"></a>00178     <span class="keywordtype">bool</span> operator !=(<span class="keyword">const</span> <a class="code" href="classsf_1_1SocketTCP.htm" title="SocketTCP wraps a socket using TCP protocol to send data safely (but a bit slower)...">SocketTCP</a>&amp; Other) <span class="keyword">const</span>;
<a name="l00179"></a>00179 
<a name="l00190"></a>00190     <span class="keywordtype">bool</span> operator &lt;(<span class="keyword">const</span> <a class="code" href="classsf_1_1SocketTCP.htm" title="SocketTCP wraps a socket using TCP protocol to send data safely (but a bit slower)...">SocketTCP</a>&amp; Other) <span class="keyword">const</span>;
<a name="l00191"></a>00191 
<a name="l00192"></a>00192 <span class="keyword">private</span> :
<a name="l00193"></a>00193 
<a name="l00194"></a>00194     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classsf_1_1Selector.htm" title="Selector allow reading from multiple sockets without blocking.">Selector</a>&lt;SocketTCP&gt;;
<a name="l00195"></a>00195 
<a name="l00203"></a>00203     SocketTCP(SocketHelper::SocketType Descriptor);
<a name="l00204"></a>00204 
<a name="l00211"></a>00211     <span class="keywordtype">void</span> Create(SocketHelper::SocketType Descriptor = 0);
<a name="l00212"></a>00212 
<a name="l00214"></a>00214     <span class="comment">// Member data</span>
<a name="l00216"></a>00216 <span class="comment"></span>    SocketHelper::SocketType mySocket;            
<a name="l00217"></a>00217     Uint32                   myPendingHeader;     
<a name="l00218"></a>00218     Uint32                   myPendingHeaderSize; 
<a name="l00219"></a>00219     std::vector&lt;char&gt;        myPendingPacket;     
<a name="l00220"></a>00220     Int32                    myPendingPacketSize; 
<a name="l00221"></a>00221     <span class="keywordtype">bool</span>                     myIsBlocking;        
<a name="l00222"></a>00222 };
<a name="l00223"></a>00223 
<a name="l00224"></a>00224 } <span class="comment">// namespace sf</span>
<a name="l00225"></a>00225 
<a name="l00226"></a>00226 
<a name="l00227"></a>00227 <span class="preprocessor">#endif // SFML_SOCKETTCP_HPP</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
