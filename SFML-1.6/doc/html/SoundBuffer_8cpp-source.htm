<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>SoundBuffer.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Audio/SoundBuffer.hpp&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;SFML/Audio/SoundFile.hpp&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;SFML/Audio/Sound.hpp&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;SFML/Audio/AudioDevice.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;SFML/Audio/OpenAL.hpp&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;memory&gt;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="keyword">namespace </span>sf
<a name="l00038"></a>00038 {
<a name="l00042"></a><a class="code" href="classsf_1_1SoundBuffer.htm#0cabfbfe19b831bf7d5c9592d92ef233">00042</a> <a class="code" href="classsf_1_1SoundBuffer.htm#0cabfbfe19b831bf7d5c9592d92ef233" title="Default constructor.">SoundBuffer::SoundBuffer</a>() :
<a name="l00043"></a>00043 myBuffer  (0),
<a name="l00044"></a>00044 myDuration(0.f)
<a name="l00045"></a>00045 {
<a name="l00046"></a>00046     <span class="comment">// Create the buffer</span>
<a name="l00047"></a>00047     ALCheck(alGenBuffers(1, &amp;myBuffer));
<a name="l00048"></a>00048 }
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 
<a name="l00054"></a><a class="code" href="classsf_1_1SoundBuffer.htm#deb60002d4c4a4d8511fb5aa7225224b">00054</a> <a class="code" href="classsf_1_1SoundBuffer.htm#0cabfbfe19b831bf7d5c9592d92ef233" title="Default constructor.">SoundBuffer::SoundBuffer</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1SoundBuffer.htm" title="SoundBuffer is the low-level for loading and manipulating sound buffers.">SoundBuffer</a>&amp; Copy) :
<a name="l00055"></a>00055 <a class="code" href="classsf_1_1AudioResource.htm" title="Abstract base class for every class that owns a device-dependant resource -- allow...">AudioResource</a>        (Copy),
<a name="l00056"></a>00056 <a class="code" href="classsf_1_1Resource.htm" title="Base class for every resource that needs to notify dependent classes about its destruction...">Resource</a>&lt;<a class="code" href="classsf_1_1SoundBuffer.htm" title="SoundBuffer is the low-level for loading and manipulating sound buffers.">SoundBuffer</a>&gt;(Copy),
<a name="l00057"></a>00057 myBuffer             (0),
<a name="l00058"></a>00058 mySamples            (Copy.mySamples),
<a name="l00059"></a>00059 myDuration           (Copy.myDuration),
<a name="l00060"></a>00060 mySounds             () <span class="comment">// don't copy the attached sounds</span>
<a name="l00061"></a>00061 {
<a name="l00062"></a>00062     <span class="comment">// Create the buffer</span>
<a name="l00063"></a>00063     ALCheck(alGenBuffers(1, &amp;myBuffer));
<a name="l00064"></a>00064 
<a name="l00065"></a>00065     <span class="comment">// Update the internal buffer with the new samples</span>
<a name="l00066"></a>00066     Update(Copy.<a class="code" href="classsf_1_1SoundBuffer.htm#cfea4667cb8a5e72b1061fa2647af30f" title="Return the number of channels (1 = mono, 2 = stereo, .">GetChannelsCount</a>(), Copy.<a class="code" href="classsf_1_1SoundBuffer.htm#c4b1b885e3720689c6cbc22ff6cbe571" title="Get the sample rate.">GetSampleRate</a>());
<a name="l00067"></a>00067 }
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 
<a name="l00073"></a><a class="code" href="classsf_1_1SoundBuffer.htm#ea240161724ffba74a0d6a9e277d3cd5">00073</a> <a class="code" href="classsf_1_1SoundBuffer.htm#ea240161724ffba74a0d6a9e277d3cd5" title="Destructor.">SoundBuffer::~SoundBuffer</a>()
<a name="l00074"></a>00074 {
<a name="l00075"></a>00075     <span class="comment">// First detach the buffer from the sounds that use it (to avoid OpenAL errors)</span>
<a name="l00076"></a>00076     <span class="keywordflow">for</span> (SoundList::const_iterator it = mySounds.begin(); it != mySounds.end(); ++it)
<a name="l00077"></a>00077         (*it)-&gt;ResetBuffer();
<a name="l00078"></a>00078 
<a name="l00079"></a>00079     <span class="comment">// Destroy the buffer</span>
<a name="l00080"></a>00080     <span class="keywordflow">if</span> (myBuffer)
<a name="l00081"></a>00081         ALCheck(alDeleteBuffers(1, &amp;myBuffer));
<a name="l00082"></a>00082 }
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 
<a name="l00088"></a><a class="code" href="classsf_1_1SoundBuffer.htm#232bb58d0910729a542cc2af473c8aa4">00088</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1SoundBuffer.htm#232bb58d0910729a542cc2af473c8aa4" title="Load the sound buffer from a file.">SoundBuffer::LoadFromFile</a>(<span class="keyword">const</span> std::string&amp; Filename)
<a name="l00089"></a>00089 {
<a name="l00090"></a>00090     <span class="comment">// Create the sound file</span>
<a name="l00091"></a>00091     std::auto_ptr&lt;priv::SoundFile&gt; File(priv::SoundFile::CreateRead(Filename));
<a name="l00092"></a>00092 
<a name="l00093"></a>00093     <span class="comment">// Open the sound file</span>
<a name="l00094"></a>00094     <span class="keywordflow">if</span> (File.get())
<a name="l00095"></a>00095     {
<a name="l00096"></a>00096         <span class="comment">// Get the sound parameters</span>
<a name="l00097"></a>00097         std::size_t  NbSamples     = File-&gt;GetSamplesCount();
<a name="l00098"></a>00098         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ChannelsCount = File-&gt;GetChannelsCount();
<a name="l00099"></a>00099         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> SampleRate    = File-&gt;GetSampleRate();
<a name="l00100"></a>00100 
<a name="l00101"></a>00101         <span class="comment">// Read the samples from the opened file</span>
<a name="l00102"></a>00102         mySamples.resize(NbSamples);
<a name="l00103"></a>00103         <span class="keywordflow">if</span> (File-&gt;Read(&amp;mySamples[0], NbSamples) == NbSamples)
<a name="l00104"></a>00104         {
<a name="l00105"></a>00105             <span class="comment">// Update the internal buffer with the new samples</span>
<a name="l00106"></a>00106             <span class="keywordflow">return</span> Update(ChannelsCount, SampleRate);
<a name="l00107"></a>00107         }
<a name="l00108"></a>00108         <span class="keywordflow">else</span>
<a name="l00109"></a>00109         {
<a name="l00110"></a>00110             <span class="comment">// Error...</span>
<a name="l00111"></a>00111             std::cerr &lt;&lt; <span class="stringliteral">"Failed to read audio data from file \""</span> &lt;&lt; Filename &lt;&lt; <span class="stringliteral">"\""</span> &lt;&lt; std::endl;
<a name="l00112"></a>00112 
<a name="l00113"></a>00113             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00114"></a>00114         }
<a name="l00115"></a>00115     }
<a name="l00116"></a>00116     <span class="keywordflow">else</span>
<a name="l00117"></a>00117     {
<a name="l00118"></a>00118         <span class="comment">// Error...</span>
<a name="l00119"></a>00119         std::cerr &lt;&lt; <span class="stringliteral">"Failed to load sound buffer from file \""</span> &lt;&lt; Filename &lt;&lt; <span class="stringliteral">"\""</span> &lt;&lt; std::endl;
<a name="l00120"></a>00120 
<a name="l00121"></a>00121         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00122"></a>00122     }
<a name="l00123"></a>00123 }
<a name="l00124"></a>00124 
<a name="l00125"></a>00125 
<a name="l00129"></a><a class="code" href="classsf_1_1SoundBuffer.htm#694c43f4ee7b2c6277c1ead496d266f3">00129</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1SoundBuffer.htm#694c43f4ee7b2c6277c1ead496d266f3" title="Load the sound buffer from a file in memory.">SoundBuffer::LoadFromMemory</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* Data, std::size_t SizeInBytes)
<a name="l00130"></a>00130 {
<a name="l00131"></a>00131     <span class="comment">// Create the sound file</span>
<a name="l00132"></a>00132     std::auto_ptr&lt;priv::SoundFile&gt; File(priv::SoundFile::CreateRead(Data, SizeInBytes));
<a name="l00133"></a>00133 
<a name="l00134"></a>00134     <span class="comment">// Open the sound file</span>
<a name="l00135"></a>00135     <span class="keywordflow">if</span> (File.get())
<a name="l00136"></a>00136     {
<a name="l00137"></a>00137         <span class="comment">// Get the sound parameters</span>
<a name="l00138"></a>00138         std::size_t  NbSamples     = File-&gt;GetSamplesCount();
<a name="l00139"></a>00139         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ChannelsCount = File-&gt;GetChannelsCount();
<a name="l00140"></a>00140         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> SampleRate    = File-&gt;GetSampleRate();
<a name="l00141"></a>00141 
<a name="l00142"></a>00142         <span class="comment">// Read the samples from the opened file</span>
<a name="l00143"></a>00143         mySamples.resize(NbSamples);
<a name="l00144"></a>00144         <span class="keywordflow">if</span> (File-&gt;Read(&amp;mySamples[0], NbSamples) == NbSamples)
<a name="l00145"></a>00145         {
<a name="l00146"></a>00146             <span class="comment">// Update the internal buffer with the new samples</span>
<a name="l00147"></a>00147             <span class="keywordflow">return</span> Update(ChannelsCount, SampleRate);
<a name="l00148"></a>00148         }
<a name="l00149"></a>00149         <span class="keywordflow">else</span>
<a name="l00150"></a>00150         {
<a name="l00151"></a>00151             <span class="comment">// Error...</span>
<a name="l00152"></a>00152             std::cerr &lt;&lt; <span class="stringliteral">"Failed to read audio data from file in memory"</span> &lt;&lt; std::endl;
<a name="l00153"></a>00153 
<a name="l00154"></a>00154             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00155"></a>00155         }
<a name="l00156"></a>00156     }
<a name="l00157"></a>00157     <span class="keywordflow">else</span>
<a name="l00158"></a>00158     {
<a name="l00159"></a>00159         <span class="comment">// Error...</span>
<a name="l00160"></a>00160         std::cerr &lt;&lt; <span class="stringliteral">"Failed to load sound buffer from file in memory"</span> &lt;&lt; std::endl;
<a name="l00161"></a>00161 
<a name="l00162"></a>00162         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00163"></a>00163     }
<a name="l00164"></a>00164 }
<a name="l00165"></a>00165 
<a name="l00166"></a>00166 
<a name="l00171"></a><a class="code" href="classsf_1_1SoundBuffer.htm#5efd0d42e07a4c7841b6d4f30849d7dc">00171</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1SoundBuffer.htm#5efd0d42e07a4c7841b6d4f30849d7dc" title="Load the sound buffer from an array of samples - assumed format for samples is 16...">SoundBuffer::LoadFromSamples</a>(<span class="keyword">const</span> Int16* Samples, std::size_t SamplesCount, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ChannelsCount, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> SampleRate)
<a name="l00172"></a>00172 {
<a name="l00173"></a>00173     <span class="keywordflow">if</span> (Samples &amp;&amp; SamplesCount &amp;&amp; ChannelsCount &amp;&amp; SampleRate)
<a name="l00174"></a>00174     {
<a name="l00175"></a>00175         <span class="comment">// Copy the new audio samples</span>
<a name="l00176"></a>00176         mySamples.assign(Samples, Samples + SamplesCount);
<a name="l00177"></a>00177 
<a name="l00178"></a>00178         <span class="comment">// Update the internal buffer with the new samples</span>
<a name="l00179"></a>00179         <span class="keywordflow">return</span> Update(ChannelsCount, SampleRate);
<a name="l00180"></a>00180     }
<a name="l00181"></a>00181     <span class="keywordflow">else</span>
<a name="l00182"></a>00182     {
<a name="l00183"></a>00183         <span class="comment">// Error...</span>
<a name="l00184"></a>00184         std::cerr &lt;&lt; <span class="stringliteral">"Failed to load sound buffer from memory ("</span>
<a name="l00185"></a>00185                   &lt;&lt; <span class="stringliteral">"Samples : "</span>        &lt;&lt; Samples       &lt;&lt; <span class="stringliteral">", "</span>
<a name="l00186"></a>00186                   &lt;&lt; <span class="stringliteral">"Samples count : "</span>  &lt;&lt; SamplesCount  &lt;&lt; <span class="stringliteral">", "</span>
<a name="l00187"></a>00187                   &lt;&lt; <span class="stringliteral">"Channels count : "</span> &lt;&lt; ChannelsCount &lt;&lt; <span class="stringliteral">", "</span>
<a name="l00188"></a>00188                   &lt;&lt; <span class="stringliteral">"Sample rate : "</span>    &lt;&lt; SampleRate    &lt;&lt; <span class="stringliteral">")"</span>
<a name="l00189"></a>00189                   &lt;&lt; std::endl;
<a name="l00190"></a>00190 
<a name="l00191"></a>00191         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00192"></a>00192     }
<a name="l00193"></a>00193 }
<a name="l00194"></a>00194 
<a name="l00195"></a>00195 
<a name="l00199"></a><a class="code" href="classsf_1_1SoundBuffer.htm#f4515a797138382cf98a4d9cd5047239">00199</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1SoundBuffer.htm#f4515a797138382cf98a4d9cd5047239" title="Save the sound buffer to a file.">SoundBuffer::SaveToFile</a>(<span class="keyword">const</span> std::string&amp; Filename)<span class="keyword"> const</span>
<a name="l00200"></a>00200 <span class="keyword"></span>{
<a name="l00201"></a>00201     <span class="comment">// Create the sound file in write mode</span>
<a name="l00202"></a>00202     std::auto_ptr&lt;priv::SoundFile&gt; File(priv::SoundFile::CreateWrite(Filename, <a class="code" href="classsf_1_1SoundBuffer.htm#cfea4667cb8a5e72b1061fa2647af30f" title="Return the number of channels (1 = mono, 2 = stereo, .">GetChannelsCount</a>(), <a class="code" href="classsf_1_1SoundBuffer.htm#c4b1b885e3720689c6cbc22ff6cbe571" title="Get the sample rate.">GetSampleRate</a>()));
<a name="l00203"></a>00203     <span class="keywordflow">if</span> (File.get())
<a name="l00204"></a>00204     {
<a name="l00205"></a>00205         <span class="comment">// Write the samples to the opened file</span>
<a name="l00206"></a>00206         File-&gt;Write(&amp;mySamples[0], mySamples.size());
<a name="l00207"></a>00207 
<a name="l00208"></a>00208         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00209"></a>00209     }
<a name="l00210"></a>00210     <span class="keywordflow">else</span>
<a name="l00211"></a>00211     {
<a name="l00212"></a>00212         <span class="comment">// Error...</span>
<a name="l00213"></a>00213         std::cerr &lt;&lt; <span class="stringliteral">"Failed to save sound buffer to file \""</span> &lt;&lt; Filename &lt;&lt; <span class="stringliteral">"\""</span> &lt;&lt; std::endl;
<a name="l00214"></a>00214 
<a name="l00215"></a>00215         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00216"></a>00216     }
<a name="l00217"></a>00217 }
<a name="l00218"></a>00218 
<a name="l00219"></a>00219 
<a name="l00223"></a><a class="code" href="classsf_1_1SoundBuffer.htm#26b7f93c9d02c34545ff3f1b37206fe0">00223</a> <span class="keyword">const</span> Int16* <a class="code" href="classsf_1_1SoundBuffer.htm#26b7f93c9d02c34545ff3f1b37206fe0" title="Return the sound samples.">SoundBuffer::GetSamples</a>()<span class="keyword"> const</span>
<a name="l00224"></a>00224 <span class="keyword"></span>{
<a name="l00225"></a>00225     <span class="keywordflow">return</span> mySamples.empty() ? NULL : &amp;mySamples[0];
<a name="l00226"></a>00226 }
<a name="l00227"></a>00227 
<a name="l00228"></a>00228 
<a name="l00232"></a><a class="code" href="classsf_1_1SoundBuffer.htm#5da93e162669ec8c03b902f622261789">00232</a> std::size_t <a class="code" href="classsf_1_1SoundBuffer.htm#5da93e162669ec8c03b902f622261789" title="Return the samples count.">SoundBuffer::GetSamplesCount</a>()<span class="keyword"> const</span>
<a name="l00233"></a>00233 <span class="keyword"></span>{
<a name="l00234"></a>00234     <span class="keywordflow">return</span> mySamples.size();
<a name="l00235"></a>00235 }
<a name="l00236"></a>00236 
<a name="l00237"></a>00237 
<a name="l00241"></a><a class="code" href="classsf_1_1SoundBuffer.htm#c4b1b885e3720689c6cbc22ff6cbe571">00241</a> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classsf_1_1SoundBuffer.htm#c4b1b885e3720689c6cbc22ff6cbe571" title="Get the sample rate.">SoundBuffer::GetSampleRate</a>()<span class="keyword"> const</span>
<a name="l00242"></a>00242 <span class="keyword"></span>{
<a name="l00243"></a>00243     ALint SampleRate;
<a name="l00244"></a>00244     ALCheck(alGetBufferi(myBuffer, AL_FREQUENCY, &amp;SampleRate));
<a name="l00245"></a>00245 
<a name="l00246"></a>00246     <span class="keywordflow">return</span> SampleRate;
<a name="l00247"></a>00247 }
<a name="l00248"></a>00248 
<a name="l00249"></a>00249 
<a name="l00253"></a><a class="code" href="classsf_1_1SoundBuffer.htm#cfea4667cb8a5e72b1061fa2647af30f">00253</a> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classsf_1_1SoundBuffer.htm#cfea4667cb8a5e72b1061fa2647af30f" title="Return the number of channels (1 = mono, 2 = stereo, .">SoundBuffer::GetChannelsCount</a>()<span class="keyword"> const</span>
<a name="l00254"></a>00254 <span class="keyword"></span>{
<a name="l00255"></a>00255     ALint ChannelsCount;
<a name="l00256"></a>00256     ALCheck(alGetBufferi(myBuffer, AL_CHANNELS, &amp;ChannelsCount));
<a name="l00257"></a>00257 
<a name="l00258"></a>00258     <span class="keywordflow">return</span> ChannelsCount;
<a name="l00259"></a>00259 }
<a name="l00260"></a>00260 
<a name="l00261"></a>00261 
<a name="l00265"></a><a class="code" href="classsf_1_1SoundBuffer.htm#525731db309fb7d5b9781e65bc4e0984">00265</a> <span class="keywordtype">float</span> <a class="code" href="classsf_1_1SoundBuffer.htm#525731db309fb7d5b9781e65bc4e0984" title="Get the sound duration.">SoundBuffer::GetDuration</a>()<span class="keyword"> const</span>
<a name="l00266"></a>00266 <span class="keyword"></span>{
<a name="l00267"></a>00267     <span class="keywordflow">return</span> myDuration;
<a name="l00268"></a>00268 }
<a name="l00269"></a>00269 
<a name="l00270"></a>00270 
<a name="l00274"></a><a class="code" href="classsf_1_1SoundBuffer.htm#cfdc7a2357c06e2e15c408a4fa21bd49">00274</a> <a class="code" href="classsf_1_1SoundBuffer.htm" title="SoundBuffer is the low-level for loading and manipulating sound buffers.">SoundBuffer</a>&amp; <a class="code" href="classsf_1_1SoundBuffer.htm#cfdc7a2357c06e2e15c408a4fa21bd49" title="Assignment operator.">SoundBuffer::operator =</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1SoundBuffer.htm" title="SoundBuffer is the low-level for loading and manipulating sound buffers.">SoundBuffer</a>&amp; Other)
<a name="l00275"></a>00275 {
<a name="l00276"></a>00276     <a class="code" href="classsf_1_1SoundBuffer.htm" title="SoundBuffer is the low-level for loading and manipulating sound buffers.">SoundBuffer</a> Temp(Other);
<a name="l00277"></a>00277 
<a name="l00278"></a>00278     std::swap(mySamples,  Temp.<a class="code" href="classsf_1_1SoundBuffer.htm#b0d890ac6d5aff0e3b8835c2fb30c79a" title="Samples buffer.">mySamples</a>);
<a name="l00279"></a>00279     std::swap(myBuffer,   Temp.<a class="code" href="classsf_1_1SoundBuffer.htm#b9d31c90ee4febbd075b9c64c3072a65" title="OpenAL buffer identifier.">myBuffer</a>);
<a name="l00280"></a>00280     std::swap(myDuration, Temp.<a class="code" href="classsf_1_1SoundBuffer.htm#79018d0cf609a509e857d7c7102fdda2" title="Sound duration, in seconds.">myDuration</a>);
<a name="l00281"></a>00281     std::swap(mySounds,   Temp.<a class="code" href="classsf_1_1SoundBuffer.htm#09a94aaf12403194a6f8a61761272a89" title="List of sounds that are using this buffer.">mySounds</a>); <span class="comment">// swap sounds too, so that they are detached when Temp is destroyed</span>
<a name="l00282"></a>00282 
<a name="l00283"></a>00283     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00284"></a>00284 }
<a name="l00285"></a>00285 
<a name="l00286"></a>00286 
<a name="l00290"></a>00290 <span class="keywordtype">bool</span> SoundBuffer::Update(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ChannelsCount, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> SampleRate)
<a name="l00291"></a>00291 {
<a name="l00292"></a>00292     <span class="comment">// Check parameters</span>
<a name="l00293"></a>00293     <span class="keywordflow">if</span> (!SampleRate || !ChannelsCount || mySamples.empty())
<a name="l00294"></a>00294         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00295"></a>00295 
<a name="l00296"></a>00296     <span class="comment">// Find the good format according to the number of channels</span>
<a name="l00297"></a>00297     ALenum Format = priv::AudioDevice::GetInstance().GetFormatFromChannelsCount(ChannelsCount);
<a name="l00298"></a>00298 
<a name="l00299"></a>00299     <span class="comment">// Check if the format is valid</span>
<a name="l00300"></a>00300     <span class="keywordflow">if</span> (Format == 0)
<a name="l00301"></a>00301     {
<a name="l00302"></a>00302         std::cerr &lt;&lt; <span class="stringliteral">"Unsupported number of channels ("</span> &lt;&lt; ChannelsCount &lt;&lt; <span class="stringliteral">")"</span> &lt;&lt; std::endl;
<a name="l00303"></a>00303         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00304"></a>00304     }
<a name="l00305"></a>00305 
<a name="l00306"></a>00306     <span class="comment">// Fill the buffer</span>
<a name="l00307"></a>00307     ALsizei Size = <span class="keyword">static_cast&lt;</span>ALsizei<span class="keyword">&gt;</span>(mySamples.size()) * <span class="keyword">sizeof</span>(Int16);
<a name="l00308"></a>00308     ALCheck(alBufferData(myBuffer, Format, &amp;mySamples[0], Size, SampleRate));
<a name="l00309"></a>00309 
<a name="l00310"></a>00310     <span class="comment">// Compute the duration</span>
<a name="l00311"></a>00311     myDuration = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(mySamples.size()) / SampleRate / ChannelsCount;
<a name="l00312"></a>00312 
<a name="l00313"></a>00313     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00314"></a>00314 }
<a name="l00315"></a>00315 
<a name="l00316"></a>00316 
<a name="l00320"></a>00320 <span class="keywordtype">void</span> SoundBuffer::AttachSound(Sound* Instance)<span class="keyword"> const</span>
<a name="l00321"></a>00321 <span class="keyword"></span>{
<a name="l00322"></a>00322     mySounds.insert(Instance);
<a name="l00323"></a>00323 }
<a name="l00324"></a>00324 
<a name="l00325"></a>00325 
<a name="l00329"></a>00329 <span class="keywordtype">void</span> SoundBuffer::DetachSound(Sound* Instance)<span class="keyword"> const</span>
<a name="l00330"></a>00330 <span class="keyword"></span>{
<a name="l00331"></a>00331     mySounds.erase(Instance);
<a name="l00332"></a>00332 }
<a name="l00333"></a>00333 
<a name="l00334"></a>00334 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
