<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><b>sf</b>::<a class="el" href="classsf_1_1ResourcePtr.htm">ResourcePtr</a>
  </div>
</div>
<div class="contents">
<h1>sf::ResourcePtr&lt; T &gt; Class Template Reference</h1><!-- doxytag: class="sf::ResourcePtr" -->Safe pointer to a T resource (inheriting from sf::Resource&lt;T&gt;), its pointer is automatically reseted when the resource is destroyed.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="Resource_8hpp-source.htm">Resource.hpp</a>&gt;</code>
<p>

<p>
<a href="classsf_1_1ResourcePtr-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ResourcePtr.htm#48ddcd15ed75e9ee3ea88e4d29402140">ResourcePtr</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Default constructor.  <a href="#48ddcd15ed75e9ee3ea88e4d29402140"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ResourcePtr.htm#86ce8beb23f6c4d32e79192a39207c1e">ResourcePtr</a> (const T *<a class="el" href="classsf_1_1Resource.htm">Resource</a>)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct from a raw resource.  <a href="#86ce8beb23f6c4d32e79192a39207c1e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ResourcePtr.htm#d773b258e867b27f654673fa2147728b">ResourcePtr</a> (const <a class="el" href="classsf_1_1ResourcePtr.htm">ResourcePtr</a>&lt; T &gt; &amp;Copy)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Copy constructor.  <a href="#d773b258e867b27f654673fa2147728b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ResourcePtr.htm#0ec69fdecccd1240030b24385f6884dd">~ResourcePtr</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Destructor.  <a href="#0ec69fdecccd1240030b24385f6884dd"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classsf_1_1ResourcePtr.htm">ResourcePtr</a>&lt; T &gt; &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ResourcePtr.htm#efd17640cfe8d96934435fb8f2b40574">operator=</a> (const <a class="el" href="classsf_1_1ResourcePtr.htm">ResourcePtr</a>&lt; T &gt; &amp;Other)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Assignment operator from another <a class="el" href="classsf_1_1ResourcePtr.htm" title="Safe pointer to a T resource (inheriting from sf::Resource&lt;T&gt;), its pointer...">ResourcePtr</a>.  <a href="#efd17640cfe8d96934435fb8f2b40574"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classsf_1_1ResourcePtr.htm">ResourcePtr</a>&lt; T &gt; &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ResourcePtr.htm#23a9350a7565a26f0cc1bbadb917248d">operator=</a> (const T *<a class="el" href="classsf_1_1Resource.htm">Resource</a>)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Assignment operator from a raw resource.  <a href="#23a9350a7565a26f0cc1bbadb917248d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ResourcePtr.htm#7af0f407f121bff6e4dcf71c7c7955de">operator const T *</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Cast operator to implicitely convert the resource pointer to its raw pointer type.  <a href="#7af0f407f121bff6e4dcf71c7c7955de"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const T &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ResourcePtr.htm#4e5401c5a07347a35cc3b9192e11b071">operator*</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Operator * overload to return a reference to the actual resource.  <a href="#4e5401c5a07347a35cc3b9192e11b071"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const T *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ResourcePtr.htm#e58ea517eee0a97a778c3c59e4c3fe3a">operator-&gt;</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Operator -&gt; overload to return a pointer to the actual resource.  <a href="#e58ea517eee0a97a778c3c59e4c3fe3a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ResourcePtr.htm#e7e9d9ed819db0f541a7c22f5a28abf9">OnResourceDestroyed</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Function called when the observed resource is about to be destroyed.  <a href="#e7e9d9ed819db0f541a7c22f5a28abf9"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
<h3>template&lt;typename T&gt;<br>
 class sf::ResourcePtr&lt; T &gt;</h3>

Safe pointer to a T resource (inheriting from sf::Resource&lt;T&gt;), its pointer is automatically reseted when the resource is destroyed. 
<p>Definition at line <a class="el" href="Resource_8hpp-source.htm#l00116">116</a> of file <a class="el" href="Resource_8hpp-source.htm">Resource.hpp</a>.</p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="48ddcd15ed75e9ee3ea88e4d29402140"></a><!-- doxytag: member="sf::ResourcePtr::ResourcePtr" ref="48ddcd15ed75e9ee3ea88e4d29402140" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1ResourcePtr.htm">sf::ResourcePtr</a>&lt; T &gt;::<a class="el" href="classsf_1_1ResourcePtr.htm">ResourcePtr</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Default constructor. 
<p>

</div>
</div><p>
<a class="anchor" name="86ce8beb23f6c4d32e79192a39207c1e"></a><!-- doxytag: member="sf::ResourcePtr::ResourcePtr" ref="86ce8beb23f6c4d32e79192a39207c1e" args="(const T *Resource)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1ResourcePtr.htm">sf::ResourcePtr</a>&lt; T &gt;::<a class="el" href="classsf_1_1ResourcePtr.htm">ResourcePtr</a>           </td>
          <td>(</td>
          <td class="paramtype">const T *&nbsp;</td>
          <td class="paramname"> <em>Resource</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Construct from a raw resource. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="classsf_1_1Resource.htm" title="Base class for every resource that needs to notify dependent classes about its destruction...">Resource</a></em>&nbsp;</td><td>: Internal resource </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="d773b258e867b27f654673fa2147728b"></a><!-- doxytag: member="sf::ResourcePtr::ResourcePtr" ref="d773b258e867b27f654673fa2147728b" args="(const ResourcePtr&lt; T &gt; &amp;Copy)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1ResourcePtr.htm">sf::ResourcePtr</a>&lt; T &gt;::<a class="el" href="classsf_1_1ResourcePtr.htm">ResourcePtr</a>           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1ResourcePtr.htm">ResourcePtr</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>Copy</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Copy constructor. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Copy</em>&nbsp;</td><td>: Instance to copy </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="0ec69fdecccd1240030b24385f6884dd"></a><!-- doxytag: member="sf::ResourcePtr::~ResourcePtr" ref="0ec69fdecccd1240030b24385f6884dd" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1ResourcePtr.htm">sf::ResourcePtr</a>&lt; T &gt;::~<a class="el" href="classsf_1_1ResourcePtr.htm">ResourcePtr</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Destructor. 
<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="e7e9d9ed819db0f541a7c22f5a28abf9"></a><!-- doxytag: member="sf::ResourcePtr::OnResourceDestroyed" ref="e7e9d9ed819db0f541a7c22f5a28abf9" args="()" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1ResourcePtr.htm">sf::ResourcePtr</a>&lt; T &gt;::OnResourceDestroyed           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Function called when the observed resource is about to be destroyed. 
<p>

</div>
</div><p>
<a class="anchor" name="7af0f407f121bff6e4dcf71c7c7955de"></a><!-- doxytag: member="sf::ResourcePtr::operator const T *" ref="7af0f407f121bff6e4dcf71c7c7955de" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1ResourcePtr.htm">sf::ResourcePtr</a>&lt; T &gt;::operator const T *           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Cast operator to implicitely convert the resource pointer to its raw pointer type. 
<p>
This might be dangerous in the general case, but in this context it is safe enough to define this operator<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Pointer to the actual resource </dd></dl>

</div>
</div><p>
<a class="anchor" name="4e5401c5a07347a35cc3b9192e11b071"></a><!-- doxytag: member="sf::ResourcePtr::operator*" ref="4e5401c5a07347a35cc3b9192e11b071" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const T&amp; <a class="el" href="classsf_1_1ResourcePtr.htm">sf::ResourcePtr</a>&lt; T &gt;::operator*           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Operator * overload to return a reference to the actual resource. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Reference to the internal resource </dd></dl>

</div>
</div><p>
<a class="anchor" name="e58ea517eee0a97a778c3c59e4c3fe3a"></a><!-- doxytag: member="sf::ResourcePtr::operator&#45;&gt;" ref="e58ea517eee0a97a778c3c59e4c3fe3a" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const T* <a class="el" href="classsf_1_1ResourcePtr.htm">sf::ResourcePtr</a>&lt; T &gt;::operator-&gt;           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Operator -&gt; overload to return a pointer to the actual resource. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Pointer to the internal resource </dd></dl>

</div>
</div><p>
<a class="anchor" name="23a9350a7565a26f0cc1bbadb917248d"></a><!-- doxytag: member="sf::ResourcePtr::operator=" ref="23a9350a7565a26f0cc1bbadb917248d" args="(const T *Resource)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1ResourcePtr.htm">ResourcePtr</a>&lt;T&gt;&amp; <a class="el" href="classsf_1_1ResourcePtr.htm">sf::ResourcePtr</a>&lt; T &gt;::operator=           </td>
          <td>(</td>
          <td class="paramtype">const T *&nbsp;</td>
          <td class="paramname"> <em>Resource</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Assignment operator from a raw resource. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="classsf_1_1Resource.htm" title="Base class for every resource that needs to notify dependent classes about its destruction...">Resource</a></em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Resource.htm" title="Base class for every resource that needs to notify dependent classes about its destruction...">Resource</a> to assign</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Reference to this </dd></dl>

</div>
</div><p>
<a class="anchor" name="efd17640cfe8d96934435fb8f2b40574"></a><!-- doxytag: member="sf::ResourcePtr::operator=" ref="efd17640cfe8d96934435fb8f2b40574" args="(const ResourcePtr&lt; T &gt; &amp;Other)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1ResourcePtr.htm">ResourcePtr</a>&lt;T&gt;&amp; <a class="el" href="classsf_1_1ResourcePtr.htm">sf::ResourcePtr</a>&lt; T &gt;::operator=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1ResourcePtr.htm">ResourcePtr</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>Other</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Assignment operator from another <a class="el" href="classsf_1_1ResourcePtr.htm" title="Safe pointer to a T resource (inheriting from sf::Resource&lt;T&gt;), its pointer...">ResourcePtr</a>. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Other</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Resource.htm" title="Base class for every resource that needs to notify dependent classes about its destruction...">Resource</a> pointer to assign</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Reference to this </dd></dl>

</div>
</div><p>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Resource_8hpp-source.htm">Resource.hpp</a></ul>
</div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
