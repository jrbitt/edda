<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>Input.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Window/Input.hpp&gt;</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="keyword">namespace </span>sf
<a name="l00032"></a>00032 {
<a name="l00036"></a><a class="code" href="classsf_1_1Input.htm#35393e09fc92f7523e52af1c203b958f">00036</a> <a class="code" href="classsf_1_1Input.htm#35393e09fc92f7523e52af1c203b958f" title="Default constructor.">Input::Input</a>() :
<a name="l00037"></a>00037 myMouseX(0),
<a name="l00038"></a>00038 myMouseY(0)
<a name="l00039"></a>00039 {
<a name="l00040"></a>00040     ResetStates();
<a name="l00041"></a>00041 }
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 
<a name="l00047"></a><a class="code" href="classsf_1_1Input.htm#5312ed524e1f2837aa4597978553876a">00047</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1Input.htm#5312ed524e1f2837aa4597978553876a" title="Get the state of a key.">Input::IsKeyDown</a>(<a class="code" href="namespacesf_1_1Key.htm#d32ed01d3448273340bd25af5cdd9c81">Key::Code</a> KeyCode)<span class="keyword"> const</span>
<a name="l00048"></a>00048 <span class="keyword"></span>{
<a name="l00049"></a>00049     <span class="keywordflow">return</span> myKeys[KeyCode];
<a name="l00050"></a>00050 }
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 
<a name="l00056"></a><a class="code" href="classsf_1_1Input.htm#28c36d05d76f2263faf803e29ffa9dea">00056</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1Input.htm#28c36d05d76f2263faf803e29ffa9dea" title="Get the state of a mouse button.">Input::IsMouseButtonDown</a>(Mouse::Button Button)<span class="keyword"> const</span>
<a name="l00057"></a>00057 <span class="keyword"></span>{
<a name="l00058"></a>00058     <span class="keywordflow">return</span> myMouseButtons[Button];
<a name="l00059"></a>00059 }
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 
<a name="l00065"></a><a class="code" href="classsf_1_1Input.htm#715d9533617ef9fc25152ebd6b7ece08">00065</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1Input.htm#715d9533617ef9fc25152ebd6b7ece08" title="Get the state of a joystick button.">Input::IsJoystickButtonDown</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> JoyId, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Button)<span class="keyword"> const</span>
<a name="l00066"></a>00066 <span class="keyword"></span>{
<a name="l00067"></a>00067     <span class="keywordflow">if</span> ((JoyId &lt; <a class="code" href="namespacesf_1_1Joy.htm#bb37a72f42b3ef9841fcf8270d0ac881668554c121c39f79eceb15f8b6631a9f" title="Total number of supported joysticks.">Joy::Count</a>) &amp;&amp; (Button &lt; <a class="code" href="namespacesf_1_1Joy.htm#bb37a72f42b3ef9841fcf8270d0ac881a555e27e351d2052df5f4b7b6e6953bf" title="Total number of supported joystick buttons.">Joy::ButtonCount</a>))
<a name="l00068"></a>00068         <span class="keywordflow">return</span> myJoystickButtons[JoyId][Button];
<a name="l00069"></a>00069     <span class="keywordflow">else</span>
<a name="l00070"></a>00070         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00071"></a>00071 }
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 
<a name="l00077"></a><a class="code" href="classsf_1_1Input.htm#2100db642800d4d3e21579c72bed99b3">00077</a> <span class="keywordtype">int</span> <a class="code" href="classsf_1_1Input.htm#2100db642800d4d3e21579c72bed99b3" title="Get the mouse X position.">Input::GetMouseX</a>()<span class="keyword"> const</span>
<a name="l00078"></a>00078 <span class="keyword"></span>{
<a name="l00079"></a>00079     <span class="keywordflow">return</span> myMouseX;
<a name="l00080"></a>00080 }
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 
<a name="l00086"></a><a class="code" href="classsf_1_1Input.htm#fe8a8e65be0a5840de9865054aaa5796">00086</a> <span class="keywordtype">int</span> <a class="code" href="classsf_1_1Input.htm#fe8a8e65be0a5840de9865054aaa5796" title="Get the mouse Y position.">Input::GetMouseY</a>()<span class="keyword"> const</span>
<a name="l00087"></a>00087 <span class="keyword"></span>{
<a name="l00088"></a>00088     <span class="keywordflow">return</span> myMouseY;
<a name="l00089"></a>00089 }
<a name="l00090"></a>00090 
<a name="l00091"></a>00091 
<a name="l00095"></a><a class="code" href="classsf_1_1Input.htm#4edf71238ae3d311c4b6e5e6895c6896">00095</a> <span class="keywordtype">float</span> <a class="code" href="classsf_1_1Input.htm#4edf71238ae3d311c4b6e5e6895c6896" title="Get a joystick axis position.">Input::GetJoystickAxis</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> JoyId, Joy::Axis Axis)<span class="keyword"> const</span>
<a name="l00096"></a>00096 <span class="keyword"></span>{
<a name="l00097"></a>00097     <span class="keywordflow">if</span> (JoyId &lt; <a class="code" href="namespacesf_1_1Joy.htm#bb37a72f42b3ef9841fcf8270d0ac881668554c121c39f79eceb15f8b6631a9f" title="Total number of supported joysticks.">Joy::Count</a>)
<a name="l00098"></a>00098         <span class="keywordflow">return</span> myJoystickAxis[JoyId][Axis];
<a name="l00099"></a>00099     <span class="keywordflow">else</span>
<a name="l00100"></a>00100         <span class="keywordflow">return</span> 0.f;
<a name="l00101"></a>00101 }
<a name="l00102"></a>00102 
<a name="l00103"></a>00103 
<a name="l00107"></a>00107 <span class="keywordtype">void</span> Input::OnEvent(<span class="keyword">const</span> <a class="code" href="classsf_1_1Event.htm" title="Event defines a system event and its parameters.">Event</a>&amp; EventReceived)
<a name="l00108"></a>00108 {
<a name="l00109"></a>00109     <span class="keywordflow">switch</span> (EventReceived.<a class="code" href="classsf_1_1Event.htm#90d5da29dd2f49d13dc10e7a402c0b65" title="Type of the event.">Type</a>)
<a name="l00110"></a>00110     {
<a name="l00111"></a>00111         <span class="comment">// Key events</span>
<a name="l00112"></a>00112         <span class="keywordflow">case</span> Event::KeyPressed :  myKeys[EventReceived.<a class="code" href="classsf_1_1Event.htm#529227c18c1530068dafd241da7b0af9">Key</a>.Code] = <span class="keyword">true</span>;  <span class="keywordflow">break</span>;
<a name="l00113"></a>00113         <span class="keywordflow">case</span> Event::KeyReleased : myKeys[EventReceived.<a class="code" href="classsf_1_1Event.htm#529227c18c1530068dafd241da7b0af9">Key</a>.Code] = <span class="keyword">false</span>; <span class="keywordflow">break</span>;
<a name="l00114"></a>00114 
<a name="l00115"></a>00115         <span class="comment">// Mouse event</span>
<a name="l00116"></a>00116         <span class="keywordflow">case</span> Event::MouseButtonPressed :  myMouseButtons[EventReceived.<a class="code" href="classsf_1_1Event.htm#bcd104440e0e43647d8f0ba49a593210">MouseButton</a>.Button] = <span class="keyword">true</span>;  <span class="keywordflow">break</span>;
<a name="l00117"></a>00117         <span class="keywordflow">case</span> Event::MouseButtonReleased : myMouseButtons[EventReceived.<a class="code" href="classsf_1_1Event.htm#bcd104440e0e43647d8f0ba49a593210">MouseButton</a>.Button] = <span class="keyword">false</span>; <span class="keywordflow">break</span>;
<a name="l00118"></a>00118 
<a name="l00119"></a>00119         <span class="comment">// Mouse move event</span>
<a name="l00120"></a>00120         <span class="keywordflow">case</span> Event::MouseMoved :
<a name="l00121"></a>00121             myMouseX = EventReceived.<a class="code" href="classsf_1_1Event.htm#0ac5a0cd79bea16e374023f18b8d39db">MouseMove</a>.X;
<a name="l00122"></a>00122             myMouseY = EventReceived.<a class="code" href="classsf_1_1Event.htm#0ac5a0cd79bea16e374023f18b8d39db">MouseMove</a>.Y;
<a name="l00123"></a>00123             <span class="keywordflow">break</span>;
<a name="l00124"></a>00124 
<a name="l00125"></a>00125         <span class="comment">// Joystick button events</span>
<a name="l00126"></a>00126         <span class="keywordflow">case</span> Event::JoyButtonPressed :  myJoystickButtons[EventReceived.<a class="code" href="classsf_1_1Event.htm#d39651df3634e2bcdc4c567933055464">JoyButton</a>.JoystickId][EventReceived.<a class="code" href="classsf_1_1Event.htm#d39651df3634e2bcdc4c567933055464">JoyButton</a>.Button] = <span class="keyword">true</span>;  <span class="keywordflow">break</span>;
<a name="l00127"></a>00127         <span class="keywordflow">case</span> Event::JoyButtonReleased : myJoystickButtons[EventReceived.<a class="code" href="classsf_1_1Event.htm#d39651df3634e2bcdc4c567933055464">JoyButton</a>.JoystickId][EventReceived.<a class="code" href="classsf_1_1Event.htm#d39651df3634e2bcdc4c567933055464">JoyButton</a>.Button] = <span class="keyword">false</span>; <span class="keywordflow">break</span>;
<a name="l00128"></a>00128 
<a name="l00129"></a>00129         <span class="comment">// Joystick move event</span>
<a name="l00130"></a>00130         <span class="keywordflow">case</span> Event::JoyMoved :
<a name="l00131"></a>00131             myJoystickAxis[EventReceived.<a class="code" href="classsf_1_1Event.htm#7225b7733f73845dc8d07af7c8ecfb22">JoyMove</a>.JoystickId][EventReceived.<a class="code" href="classsf_1_1Event.htm#7225b7733f73845dc8d07af7c8ecfb22">JoyMove</a>.Axis] = EventReceived.<a class="code" href="classsf_1_1Event.htm#7225b7733f73845dc8d07af7c8ecfb22">JoyMove</a>.Position;
<a name="l00132"></a>00132             <span class="keywordflow">break</span>;
<a name="l00133"></a>00133 
<a name="l00134"></a>00134         <span class="comment">// Lost focus event : we must reset all persistent states</span>
<a name="l00135"></a>00135         <span class="keywordflow">case</span> Event::LostFocus :
<a name="l00136"></a>00136         {
<a name="l00137"></a>00137             ResetStates();
<a name="l00138"></a>00138             <span class="keywordflow">break</span>;
<a name="l00139"></a>00139         }
<a name="l00140"></a>00140 
<a name="l00141"></a>00141         <span class="keywordflow">default</span> :
<a name="l00142"></a>00142             <span class="keywordflow">break</span>;
<a name="l00143"></a>00143     }
<a name="l00144"></a>00144 }
<a name="l00145"></a>00145 
<a name="l00146"></a>00146 
<a name="l00150"></a>00150 <span class="keywordtype">void</span> Input::ResetStates()
<a name="l00151"></a>00151 {
<a name="l00152"></a>00152     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; Key::Count; ++i)
<a name="l00153"></a>00153         myKeys[i] = <span class="keyword">false</span>;
<a name="l00154"></a>00154 
<a name="l00155"></a>00155     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; Mouse::ButtonCount; ++i)
<a name="l00156"></a>00156         myMouseButtons[i] = <span class="keyword">false</span>;
<a name="l00157"></a>00157 
<a name="l00158"></a>00158     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="namespacesf_1_1Joy.htm#bb37a72f42b3ef9841fcf8270d0ac881668554c121c39f79eceb15f8b6631a9f" title="Total number of supported joysticks.">Joy::Count</a>; ++i)
<a name="l00159"></a>00159     {
<a name="l00160"></a>00160         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; <a class="code" href="namespacesf_1_1Joy.htm#bb37a72f42b3ef9841fcf8270d0ac881a555e27e351d2052df5f4b7b6e6953bf" title="Total number of supported joystick buttons.">Joy::ButtonCount</a>; ++j)
<a name="l00161"></a>00161             myJoystickButtons[i][j] = <span class="keyword">false</span>;
<a name="l00162"></a>00162 
<a name="l00163"></a>00163         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; Joy::AxisCount; ++j)
<a name="l00164"></a>00164             myJoystickAxis[i][j] = 0.f;
<a name="l00165"></a>00165         myJoystickAxis[i][Joy::AxisPOV] = -1.f;
<a name="l00166"></a>00166     }
<a name="l00167"></a>00167 }
<a name="l00168"></a>00168 
<a name="l00169"></a>00169 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
