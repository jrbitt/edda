<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>SoundFile.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Audio/SoundFile.hpp&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;SFML/Audio/SoundFileDefault.hpp&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;SFML/Audio/SoundFileOgg.hpp&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="keyword">namespace </span>sf
<a name="l00035"></a>00035 {
<a name="l00036"></a>00036 <span class="keyword">namespace </span>priv
<a name="l00037"></a>00037 {
<a name="l00041"></a>00041 SoundFile* SoundFile::CreateRead(<span class="keyword">const</span> std::string&amp; Filename)
<a name="l00042"></a>00042 {
<a name="l00043"></a>00043     <span class="comment">// Create the file according to its type</span>
<a name="l00044"></a>00044     SoundFile* File = NULL;
<a name="l00045"></a>00045     <span class="keywordflow">if</span>      (SoundFileOgg::IsFileSupported(Filename, <span class="keyword">true</span>))     File = <span class="keyword">new</span> SoundFileOgg;
<a name="l00046"></a>00046     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (SoundFileDefault::IsFileSupported(Filename, <span class="keyword">true</span>)) File = <span class="keyword">new</span> SoundFileDefault;
<a name="l00047"></a>00047 
<a name="l00048"></a>00048     <span class="comment">// Open it for reading</span>
<a name="l00049"></a>00049     <span class="keywordflow">if</span> (File)
<a name="l00050"></a>00050     {
<a name="l00051"></a>00051         std::size_t  SamplesCount;
<a name="l00052"></a>00052         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ChannelsCount;
<a name="l00053"></a>00053         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> SampleRate;
<a name="l00054"></a>00054 
<a name="l00055"></a>00055         <span class="keywordflow">if</span> (File-&gt;OpenRead(Filename, SamplesCount, ChannelsCount, SampleRate))
<a name="l00056"></a>00056         {
<a name="l00057"></a>00057             File-&gt;myFilename      = Filename;
<a name="l00058"></a>00058             File-&gt;myData          = NULL;
<a name="l00059"></a>00059             File-&gt;mySize          = 0;
<a name="l00060"></a>00060             File-&gt;myNbSamples     = SamplesCount;
<a name="l00061"></a>00061             File-&gt;myChannelsCount = ChannelsCount;
<a name="l00062"></a>00062             File-&gt;mySampleRate    = SampleRate;
<a name="l00063"></a>00063         }
<a name="l00064"></a>00064         <span class="keywordflow">else</span>
<a name="l00065"></a>00065         {
<a name="l00066"></a>00066             <span class="keyword">delete</span> File;
<a name="l00067"></a>00067             File = NULL;
<a name="l00068"></a>00068         }
<a name="l00069"></a>00069     }
<a name="l00070"></a>00070 
<a name="l00071"></a>00071     <span class="keywordflow">return</span> File;
<a name="l00072"></a>00072 }
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 
<a name="l00078"></a>00078 SoundFile* SoundFile::CreateRead(<span class="keyword">const</span> <span class="keywordtype">char</span>* Data, std::size_t SizeInMemory)
<a name="l00079"></a>00079 {
<a name="l00080"></a>00080     <span class="comment">// Create the file according to its type</span>
<a name="l00081"></a>00081     SoundFile* File = NULL;
<a name="l00082"></a>00082     <span class="keywordflow">if</span>      (SoundFileOgg::IsFileSupported(Data, SizeInMemory))     File = <span class="keyword">new</span> SoundFileOgg;
<a name="l00083"></a>00083     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (SoundFileDefault::IsFileSupported(Data, SizeInMemory)) File = <span class="keyword">new</span> SoundFileDefault;
<a name="l00084"></a>00084 
<a name="l00085"></a>00085     <span class="comment">// Open it for reading</span>
<a name="l00086"></a>00086     <span class="keywordflow">if</span> (File)
<a name="l00087"></a>00087     {
<a name="l00088"></a>00088         std::size_t  SamplesCount;
<a name="l00089"></a>00089         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ChannelsCount;
<a name="l00090"></a>00090         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> SampleRate;
<a name="l00091"></a>00091 
<a name="l00092"></a>00092         <span class="keywordflow">if</span> (File-&gt;OpenRead(Data, SizeInMemory, SamplesCount, ChannelsCount, SampleRate))
<a name="l00093"></a>00093         {
<a name="l00094"></a>00094             File-&gt;myFilename      = <span class="stringliteral">""</span>;
<a name="l00095"></a>00095             File-&gt;myData          = Data;
<a name="l00096"></a>00096             File-&gt;mySize          = SizeInMemory;
<a name="l00097"></a>00097             File-&gt;myNbSamples     = SamplesCount;
<a name="l00098"></a>00098             File-&gt;myChannelsCount = ChannelsCount;
<a name="l00099"></a>00099             File-&gt;mySampleRate    = SampleRate;
<a name="l00100"></a>00100         }
<a name="l00101"></a>00101         <span class="keywordflow">else</span>
<a name="l00102"></a>00102         {
<a name="l00103"></a>00103             <span class="keyword">delete</span> File;
<a name="l00104"></a>00104             File = NULL;
<a name="l00105"></a>00105         }
<a name="l00106"></a>00106     }
<a name="l00107"></a>00107 
<a name="l00108"></a>00108     <span class="keywordflow">return</span> File;
<a name="l00109"></a>00109 }
<a name="l00110"></a>00110 
<a name="l00111"></a>00111 
<a name="l00115"></a>00115 SoundFile* SoundFile::CreateWrite(<span class="keyword">const</span> std::string&amp; Filename, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ChannelsCount, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> SampleRate)
<a name="l00116"></a>00116 {
<a name="l00117"></a>00117     <span class="comment">// Create the file according to its type</span>
<a name="l00118"></a>00118     SoundFile* File = NULL;
<a name="l00119"></a>00119     <span class="keywordflow">if</span>      (SoundFileOgg::IsFileSupported(Filename, <span class="keyword">false</span>))     File = <span class="keyword">new</span> SoundFileOgg;
<a name="l00120"></a>00120     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (SoundFileDefault::IsFileSupported(Filename, <span class="keyword">false</span>)) File = <span class="keyword">new</span> SoundFileDefault;
<a name="l00121"></a>00121 
<a name="l00122"></a>00122     <span class="comment">// Open it for writing</span>
<a name="l00123"></a>00123     <span class="keywordflow">if</span> (File)
<a name="l00124"></a>00124     {
<a name="l00125"></a>00125         <span class="keywordflow">if</span> (File-&gt;OpenWrite(Filename, ChannelsCount, SampleRate))
<a name="l00126"></a>00126         {
<a name="l00127"></a>00127             File-&gt;myFilename      = <span class="stringliteral">""</span>;
<a name="l00128"></a>00128             File-&gt;myData          = NULL;
<a name="l00129"></a>00129             File-&gt;mySize          = 0;
<a name="l00130"></a>00130             File-&gt;myNbSamples     = 0;
<a name="l00131"></a>00131             File-&gt;myChannelsCount = ChannelsCount;
<a name="l00132"></a>00132             File-&gt;mySampleRate    = SampleRate;
<a name="l00133"></a>00133         }
<a name="l00134"></a>00134         <span class="keywordflow">else</span>
<a name="l00135"></a>00135         {
<a name="l00136"></a>00136             <span class="keyword">delete</span> File;
<a name="l00137"></a>00137             File = NULL;
<a name="l00138"></a>00138         }
<a name="l00139"></a>00139     }
<a name="l00140"></a>00140 
<a name="l00141"></a>00141     <span class="keywordflow">return</span> File;
<a name="l00142"></a>00142 }
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 
<a name="l00148"></a>00148 SoundFile::SoundFile() :
<a name="l00149"></a>00149 myNbSamples    (0),
<a name="l00150"></a>00150 myChannelsCount(0),
<a name="l00151"></a>00151 mySampleRate   (0)
<a name="l00152"></a>00152 {
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 }
<a name="l00155"></a>00155 
<a name="l00156"></a>00156 
<a name="l00160"></a>00160 SoundFile::~SoundFile()
<a name="l00161"></a>00161 {
<a name="l00162"></a>00162     <span class="comment">// Nothing to do</span>
<a name="l00163"></a>00163 }
<a name="l00164"></a>00164 
<a name="l00165"></a>00165 
<a name="l00169"></a>00169 std::size_t SoundFile::GetSamplesCount()<span class="keyword"> const</span>
<a name="l00170"></a>00170 <span class="keyword"></span>{
<a name="l00171"></a>00171     <span class="keywordflow">return</span> myNbSamples;
<a name="l00172"></a>00172 }
<a name="l00173"></a>00173 
<a name="l00174"></a>00174 
<a name="l00178"></a>00178 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> SoundFile::GetChannelsCount()<span class="keyword"> const</span>
<a name="l00179"></a>00179 <span class="keyword"></span>{
<a name="l00180"></a>00180     <span class="keywordflow">return</span> myChannelsCount;
<a name="l00181"></a>00181 }
<a name="l00182"></a>00182 
<a name="l00183"></a>00183 
<a name="l00187"></a>00187 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> SoundFile::GetSampleRate()<span class="keyword"> const</span>
<a name="l00188"></a>00188 <span class="keyword"></span>{
<a name="l00189"></a>00189     <span class="keywordflow">return</span> mySampleRate;
<a name="l00190"></a>00190 }
<a name="l00191"></a>00191 
<a name="l00192"></a>00192 
<a name="l00196"></a>00196 <span class="keywordtype">bool</span> SoundFile::Restart()
<a name="l00197"></a>00197 {
<a name="l00198"></a>00198     <span class="keywordflow">if</span> (myData)
<a name="l00199"></a>00199     {
<a name="l00200"></a>00200         <span class="comment">// Reopen from memory</span>
<a name="l00201"></a>00201         <span class="keywordflow">return</span> OpenRead(myData, mySize, myNbSamples, myChannelsCount, mySampleRate);
<a name="l00202"></a>00202     }
<a name="l00203"></a>00203     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (myFilename != <span class="stringliteral">""</span>)
<a name="l00204"></a>00204     {
<a name="l00205"></a>00205         <span class="comment">// Reopen from file</span>
<a name="l00206"></a>00206         <span class="keywordflow">return</span> OpenRead(myFilename, myNbSamples, myChannelsCount, mySampleRate);
<a name="l00207"></a>00207     }
<a name="l00208"></a>00208     <span class="keywordflow">else</span>
<a name="l00209"></a>00209     {
<a name="l00210"></a>00210         <span class="comment">// Trying to reopen a file opened in write mode... error</span>
<a name="l00211"></a>00211         std::cerr &lt;&lt; <span class="stringliteral">"Warning : trying to restart a sound opened in write mode, which is not allowed"</span> &lt;&lt; std::endl;
<a name="l00212"></a>00212         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00213"></a>00213     }
<a name="l00214"></a>00214 }
<a name="l00215"></a>00215 
<a name="l00216"></a>00216 
<a name="l00220"></a>00220 <span class="keywordtype">bool</span> SoundFile::OpenRead(<span class="keyword">const</span> std::string&amp; Filename, std::size_t&amp;, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&amp;, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&amp;)
<a name="l00221"></a>00221 {
<a name="l00222"></a>00222     std::cerr &lt;&lt; <span class="stringliteral">"Failed to open sound file \""</span> &lt;&lt; Filename &lt;&lt; <span class="stringliteral">"\", format is not supported by SFML"</span> &lt;&lt; std::endl;
<a name="l00223"></a>00223 
<a name="l00224"></a>00224     <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00225"></a>00225 }
<a name="l00226"></a>00226 
<a name="l00227"></a>00227 
<a name="l00231"></a>00231 <span class="keywordtype">bool</span> SoundFile::OpenRead(<span class="keyword">const</span> <span class="keywordtype">char</span>*, std::size_t, std::size_t&amp;, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&amp;, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&amp;)
<a name="l00232"></a>00232 {
<a name="l00233"></a>00233     std::cerr &lt;&lt; <span class="stringliteral">"Failed to open sound file from memory, format is not supported by SFML"</span> &lt;&lt; std::endl;
<a name="l00234"></a>00234 
<a name="l00235"></a>00235     <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00236"></a>00236 }
<a name="l00237"></a>00237 
<a name="l00238"></a>00238 
<a name="l00242"></a>00242 <span class="keywordtype">bool</span> SoundFile::OpenWrite(<span class="keyword">const</span> std::string&amp; Filename, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)
<a name="l00243"></a>00243 {
<a name="l00244"></a>00244     std::cerr &lt;&lt; <span class="stringliteral">"Failed to open sound file \""</span> &lt;&lt; Filename &lt;&lt; <span class="stringliteral">"\", format is not supported by SFML"</span> &lt;&lt; std::endl;
<a name="l00245"></a>00245 
<a name="l00246"></a>00246     <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00247"></a>00247 }
<a name="l00248"></a>00248 
<a name="l00249"></a>00249 
<a name="l00253"></a>00253 std::size_t SoundFile::Read(Int16*, std::size_t)
<a name="l00254"></a>00254 {
<a name="l00255"></a>00255     std::cerr &lt;&lt; <span class="stringliteral">"Failed to read from sound file (not supported)"</span> &lt;&lt; std::endl;
<a name="l00256"></a>00256 
<a name="l00257"></a>00257     <span class="keywordflow">return</span> 0;
<a name="l00258"></a>00258 }
<a name="l00259"></a>00259 
<a name="l00260"></a>00260 
<a name="l00264"></a>00264 <span class="keywordtype">void</span> SoundFile::Write(<span class="keyword">const</span> Int16*, std::size_t)
<a name="l00265"></a>00265 {
<a name="l00266"></a>00266     std::cerr &lt;&lt; <span class="stringliteral">"Failed to write to sound file (not supported)"</span> &lt;&lt; std::endl;
<a name="l00267"></a>00267 }
<a name="l00268"></a>00268 
<a name="l00269"></a>00269 } <span class="comment">// namespace priv</span>
<a name="l00270"></a>00270 
<a name="l00271"></a>00271 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
