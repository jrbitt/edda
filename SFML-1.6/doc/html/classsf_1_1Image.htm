<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><b>sf</b>::<a class="el" href="classsf_1_1Image.htm">Image</a>
  </div>
</div>
<div class="contents">
<h1>sf::Image Class Reference</h1><!-- doxytag: class="sf::Image" --><!-- doxytag: inherits="Resource&lt; Image &gt;" --><a class="el" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a> is the low-level class for loading and manipulating images.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="Image_8hpp-source.htm">Image.hpp</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for sf::Image:</div>
<div class="dynsection">

<p><center><img src="classsf_1_1Image.png" usemap="#sf::Image_map" border="0" alt=""></center>
<map name="sf::Image_map">
<area href="classsf_1_1Resource.htm" alt="sf::Resource< Image >" shape="rect" coords="0,0,139,24">
</map>
</div>

<p>
<a href="classsf_1_1Image-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#bb4caf3cb167b613345ebe36fc883f12">Image</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Default constructor.  <a href="#bb4caf3cb167b613345ebe36fc883f12"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#a38cae7c1c704aa0175b9e73645cb210">Image</a> (const <a class="el" href="classsf_1_1Image.htm">Image</a> &amp;Copy)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Copy constructor.  <a href="#a38cae7c1c704aa0175b9e73645cb210"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#2a4c0ec448863784f83e9931d25dada2">Image</a> (unsigned int Width, unsigned int Height, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;Col=<a class="el" href="classsf_1_1Color.htm">Color</a>(0, 0, 0, 255))</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct an empty image.  <a href="#2a4c0ec448863784f83e9931d25dada2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#7092ba80cc19c053bf356e98a4743acb">Image</a> (unsigned int Width, unsigned int Height, const Uint8 *Data)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Construct the image from pixels in memory.  <a href="#7092ba80cc19c053bf356e98a4743acb"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#0ba22a38e6c96e3b37dd88198046de83">~Image</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Destructor.  <a href="#0ba22a38e6c96e3b37dd88198046de83"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#7cf6316aa5d022e0bdd95f1e79c9f50b">LoadFromFile</a> (const std::string &amp;Filename)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Load the image from a file.  <a href="#7cf6316aa5d022e0bdd95f1e79c9f50b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#72565ffabe12dfb2602e209c2e6f0486">LoadFromMemory</a> (const char *Data, std::size_t SizeInBytes)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Load the image from a file in memory.  <a href="#72565ffabe12dfb2602e209c2e6f0486"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#67d65c552c9bcba989a061e9c5b5d10c">LoadFromPixels</a> (unsigned int Width, unsigned int Height, const Uint8 *Data)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Load the image directly from an array of pixels.  <a href="#67d65c552c9bcba989a061e9c5b5d10c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#50eed54ef8e9f3aeef5bb7f19144aa08">SaveToFile</a> (const std::string &amp;Filename) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Save the content of the image to a file.  <a href="#50eed54ef8e9f3aeef5bb7f19144aa08"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#4e2ce8821e8de36462604bbf99f39cde">Create</a> (unsigned int Width, unsigned int Height, <a class="el" href="classsf_1_1Color.htm">Color</a> Col=<a class="el" href="classsf_1_1Color.htm">Color</a>(0, 0, 0, 255))</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create an empty image.  <a href="#4e2ce8821e8de36462604bbf99f39cde"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#e9a15fe9a4750295845b5ae081c2ec50">CreateMaskFromColor</a> (<a class="el" href="classsf_1_1Color.htm">Color</a> ColorKey, Uint8 Alpha=0)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create transparency mask from a specified colorkey.  <a href="#e9a15fe9a4750295845b5ae081c2ec50"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#408c40c8675363adfa96a8b9a9576bc2">Copy</a> (const <a class="el" href="classsf_1_1Image.htm">Image</a> &amp;Source, unsigned int DestX, unsigned int DestY, const <a class="el" href="classsf_1_1Rect.htm">IntRect</a> &amp;SourceRect=<a class="el" href="classsf_1_1Rect.htm">IntRect</a>(0, 0, 0, 0), bool ApplyAlpha=false)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Copy pixels from another image onto this one.  <a href="#408c40c8675363adfa96a8b9a9576bc2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#96597746f70ce1925ec82d2df8ae6974">CopyScreen</a> (<a class="el" href="classsf_1_1RenderWindow.htm">RenderWindow</a> &amp;<a class="el" href="classsf_1_1Window.htm">Window</a>, const <a class="el" href="classsf_1_1Rect.htm">IntRect</a> &amp;SourceRect=<a class="el" href="classsf_1_1Rect.htm">IntRect</a>(0, 0, 0, 0))</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create the image from the current contents of the given window.  <a href="#96597746f70ce1925ec82d2df8ae6974"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#623f2379b30307b4ee4eb08d517d9584">SetPixel</a> (unsigned int X, unsigned int Y, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;Col)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the color of a pixel.  <a href="#623f2379b30307b4ee4eb08d517d9584"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#b7590e372a153ace848cf8a6081c8bc4">GetPixel</a> (unsigned int X, unsigned int Y) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get a pixel from the image.  <a href="#b7590e372a153ace848cf8a6081c8bc4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const Uint8 *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#85355b09f946aa4b985f9d2a1d620022">GetPixelsPtr</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get a read-only pointer to the array of pixels (RGBA 8 bits integers components) Array size is <a class="el" href="classsf_1_1Image.htm#896f09a4eb769b5b866b6dde9c1a25e7" title="Return the width of the image.">GetWidth()</a> x <a class="el" href="classsf_1_1Image.htm#f2131512b6290fd96fd10c539723fe89" title="Return the height of the image.">GetHeight()</a> x 4 This pointer becomes invalid if you reload or resize the image.  <a href="#85355b09f946aa4b985f9d2a1d620022"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#74bda6dc927849ff25f8fce5143918e7">Bind</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Bind the image for rendering.  <a href="#74bda6dc927849ff25f8fce5143918e7"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#d167422fd331cd069674391fb16e8452">SetSmooth</a> (bool Smooth)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable or disable image smooth filter.  <a href="#d167422fd331cd069674391fb16e8452"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#896f09a4eb769b5b866b6dde9c1a25e7">GetWidth</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Return the width of the image.  <a href="#896f09a4eb769b5b866b6dde9c1a25e7"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#f2131512b6290fd96fd10c539723fe89">GetHeight</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Return the height of the image.  <a href="#f2131512b6290fd96fd10c539723fe89"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#d175b4c9110549c5df324ba61c580ce3">IsSmooth</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Tells whether the smooth filtering is enabled or not.  <a href="#d175b4c9110549c5df324ba61c580ce3"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classsf_1_1Rect.htm">FloatRect</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#066704507bcaabe27db17170bf02bd56">GetTexCoords</a> (const <a class="el" href="classsf_1_1Rect.htm">IntRect</a> &amp;<a class="el" href="classsf_1_1Rect.htm">Rect</a>) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Convert a subrect expressed in pixels, into float texture coordinates.  <a href="#066704507bcaabe27db17170bf02bd56"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classsf_1_1Image.htm">Image</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#5f9927e407bbe34172553ecfff2f54f3">operator=</a> (const <a class="el" href="classsf_1_1Image.htm">Image</a> &amp;Other)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Assignment operator.  <a href="#5f9927e407bbe34172553ecfff2f54f3"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#b41056600a1a4848833cc8b5239a9488">GetValidTextureSize</a> (unsigned int Size)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get a valid texture size according to hardware support.  <a href="#b41056600a1a4848833cc8b5239a9488"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
<a class="el" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a> is the low-level class for loading and manipulating images. 
<p>Definition at line <a class="el" href="Image_8hpp-source.htm#l00046">46</a> of file <a class="el" href="Image_8hpp-source.htm">Image.hpp</a>.</p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="bb4caf3cb167b613345ebe36fc883f12"></a><!-- doxytag: member="sf::Image::Image" ref="bb4caf3cb167b613345ebe36fc883f12" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Image::Image           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Default constructor. 
<p>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00043">43</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="a38cae7c1c704aa0175b9e73645cb210"></a><!-- doxytag: member="sf::Image::Image" ref="a38cae7c1c704aa0175b9e73645cb210" args="(const Image &amp;Copy)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Image::Image           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Image.htm">Image</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Copy</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Copy constructor. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Copy</em>&nbsp;</td><td>: instance to copy </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00060">60</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="2a4c0ec448863784f83e9931d25dada2"></a><!-- doxytag: member="sf::Image::Image" ref="2a4c0ec448863784f83e9931d25dada2" args="(unsigned int Width, unsigned int Height, const Color &amp;Col=Color(0, 0, 0, 255))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Image::Image           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Col</em> = <code><a class="el" href="classsf_1_1Color.htm">Color</a>(0,&nbsp;0,&nbsp;0,&nbsp;255)</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Construct an empty image. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Width</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a> width </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Height</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a> height </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Col</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a> color (black by default) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00079">79</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="7092ba80cc19c053bf356e98a4743acb"></a><!-- doxytag: member="sf::Image::Image" ref="7092ba80cc19c053bf356e98a4743acb" args="(unsigned int Width, unsigned int Height, const Uint8 *Data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Image::Image           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Uint8 *&nbsp;</td>
          <td class="paramname"> <em>Data</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Construct the image from pixels in memory. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Width</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a> width </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Height</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a> height </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Data</em>&nbsp;</td><td>: Pointer to the pixels in memory (assumed format is RGBA) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00096">96</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="0ba22a38e6c96e3b37dd88198046de83"></a><!-- doxytag: member="sf::Image::~Image" ref="0ba22a38e6c96e3b37dd88198046de83" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Image::~Image           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Destructor. 
<p>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00113">113</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="74bda6dc927849ff25f8fce5143918e7"></a><!-- doxytag: member="sf::Image::Bind" ref="74bda6dc927849ff25f8fce5143918e7" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Image::Bind           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Bind the image for rendering. 
<p>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00473">473</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="408c40c8675363adfa96a8b9a9576bc2"></a><!-- doxytag: member="sf::Image::Copy" ref="408c40c8675363adfa96a8b9a9576bc2" args="(const Image &amp;Source, unsigned int DestX, unsigned int DestY, const IntRect &amp;SourceRect=IntRect(0, 0, 0, 0), bool ApplyAlpha=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Image::Copy           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Image.htm">Image</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>DestX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>DestY</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Rect.htm">IntRect</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>SourceRect</em> = <code><a class="el" href="classsf_1_1Rect.htm">IntRect</a>(0,&nbsp;0,&nbsp;0,&nbsp;0)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>ApplyAlpha</em> = <code>false</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Copy pixels from another image onto this one. 
<p>
This function does a slow pixel copy and should only be used at initialization time<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Source</em>&nbsp;</td><td>: Source image to copy </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>DestX</em>&nbsp;</td><td>: X coordinate of the destination position </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>DestY</em>&nbsp;</td><td>: Y coordinate of the destination position </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>SourceRect</em>&nbsp;</td><td>: Sub-rectangle of the source image to copy (empty by default - entire image) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>ApplyAlpha</em>&nbsp;</td><td>: Should the copy take in account the source transparency? (false by default)</td></tr>
  </table>
</dl>
This function does a slow pixel copy and should only be used at initialization time 
<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00270">270</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="96597746f70ce1925ec82d2df8ae6974"></a><!-- doxytag: member="sf::Image::CopyScreen" ref="96597746f70ce1925ec82d2df8ae6974" args="(RenderWindow &amp;Window, const IntRect &amp;SourceRect=IntRect(0, 0, 0, 0))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Image::CopyScreen           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1RenderWindow.htm">RenderWindow</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Rect.htm">IntRect</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>SourceRect</em> = <code><a class="el" href="classsf_1_1Rect.htm">IntRect</a>(0,&nbsp;0,&nbsp;0,&nbsp;0)</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Create the image from the current contents of the given window. 
<p>
Create the image from the current contents of the given window.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="classsf_1_1Window.htm" title="Window is a rendering window ; it can create a new window or connect to an existing...">Window</a></em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Window.htm" title="Window is a rendering window ; it can create a new window or connect to an existing...">Window</a> to capture </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>SourceRect</em>&nbsp;</td><td>: Sub-rectangle of the screen to copy (empty by default - entire image)</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if copy was successful </dd></dl>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00358">358</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="4e2ce8821e8de36462604bbf99f39cde"></a><!-- doxytag: member="sf::Image::Create" ref="4e2ce8821e8de36462604bbf99f39cde" args="(unsigned int Width, unsigned int Height, Color Col=Color(0, 0, 0, 255))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Image::Create           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1Color.htm">Color</a>&nbsp;</td>
          <td class="paramname"> <em>Col</em> = <code><a class="el" href="classsf_1_1Color.htm">Color</a>(0,&nbsp;0,&nbsp;0,&nbsp;255)</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Create an empty image. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Width</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a> width </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Height</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a> height </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Col</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a> color (black by default)</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if creation was successful </dd></dl>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00222">222</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="e9a15fe9a4750295845b5ae081c2ec50"></a><!-- doxytag: member="sf::Image::CreateMaskFromColor" ref="e9a15fe9a4750295845b5ae081c2ec50" args="(Color ColorKey, Uint8 Alpha=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Image::CreateMaskFromColor           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Color.htm">Color</a>&nbsp;</td>
          <td class="paramname"> <em>ColorKey</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint8&nbsp;</td>
          <td class="paramname"> <em>Alpha</em> = <code>0</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Create transparency mask from a specified colorkey. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ColorKey</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> to become transparent </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Alpha</em>&nbsp;</td><td>: Alpha value to use for transparent pixels (0 by default) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00249">249</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="f2131512b6290fd96fd10c539723fe89"></a><!-- doxytag: member="sf::Image::GetHeight" ref="f2131512b6290fd96fd10c539723fe89" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int sf::Image::GetHeight           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return the height of the image. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Height in pixels </dd></dl>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00526">526</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="b7590e372a153ace848cf8a6081c8bc4"></a><!-- doxytag: member="sf::Image::GetPixel" ref="b7590e372a153ace848cf8a6081c8bc4" args="(unsigned int X, unsigned int Y) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp; sf::Image::GetPixel           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>X</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get a pixel from the image. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>X</em>&nbsp;</td><td>: X coordinate of pixel in the image </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Y</em>&nbsp;</td><td>: Y coordinate of pixel in the image</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd><a class="el" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> of pixel (X, Y) </dd></dl>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00431">431</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="85355b09f946aa4b985f9d2a1d620022"></a><!-- doxytag: member="sf::Image::GetPixelsPtr" ref="85355b09f946aa4b985f9d2a1d620022" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const Uint8 * sf::Image::GetPixelsPtr           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get a read-only pointer to the array of pixels (RGBA 8 bits integers components) Array size is <a class="el" href="classsf_1_1Image.htm#896f09a4eb769b5b866b6dde9c1a25e7" title="Return the width of the image.">GetWidth()</a> x <a class="el" href="classsf_1_1Image.htm#f2131512b6290fd96fd10c539723fe89" title="Return the height of the image.">GetHeight()</a> x 4 This pointer becomes invalid if you reload or resize the image. 
<p>
Get a read-only pointer to the array of pixels (RGBA 8 bits integers components) Array size is <a class="el" href="classsf_1_1Image.htm#896f09a4eb769b5b866b6dde9c1a25e7" title="Return the width of the image.">GetWidth()</a> x <a class="el" href="classsf_1_1Image.htm#f2131512b6290fd96fd10c539723fe89" title="Return the height of the image.">GetHeight()</a> x 4 This pointer becomes invalid if you reload or resize the image.<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Const pointer to the array of pixels </dd></dl>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00453">453</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="066704507bcaabe27db17170bf02bd56"></a><!-- doxytag: member="sf::Image::GetTexCoords" ref="066704507bcaabe27db17170bf02bd56" args="(const IntRect &amp;Rect) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Rect.htm">FloatRect</a> sf::Image::GetTexCoords           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Rect.htm">IntRect</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Rect</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Convert a subrect expressed in pixels, into float texture coordinates. 
<p>
Convert a subrect expressed in pixels, into float texture coordinates.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="classsf_1_1Rect.htm" title="Rect is an utility class for manipulating rectangles.">Rect</a></em>&nbsp;</td><td>: Sub-rectangle of image to convert</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Texture coordinates corresponding to the sub-rectangle </dd></dl>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00545">545</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="b41056600a1a4848833cc8b5239a9488"></a><!-- doxytag: member="sf::Image::GetValidTextureSize" ref="b41056600a1a4848833cc8b5239a9488" args="(unsigned int Size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int sf::Image::GetValidTextureSize           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Size</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get a valid texture size according to hardware support. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Size</em>&nbsp;</td><td>: Size to convert</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Valid nearest size (greater than or equal to specified size) </dd></dl>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00560">560</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="896f09a4eb769b5b866b6dde9c1a25e7"></a><!-- doxytag: member="sf::Image::GetWidth" ref="896f09a4eb769b5b866b6dde9c1a25e7" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int sf::Image::GetWidth           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return the width of the image. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Width in pixels </dd></dl>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00517">517</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="d175b4c9110549c5df324ba61c580ce3"></a><!-- doxytag: member="sf::Image::IsSmooth" ref="d175b4c9110549c5df324ba61c580ce3" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Image::IsSmooth           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Tells whether the smooth filtering is enabled or not. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if image smoothing is enabled </dd></dl>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00535">535</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="7cf6316aa5d022e0bdd95f1e79c9f50b"></a><!-- doxytag: member="sf::Image::LoadFromFile" ref="7cf6316aa5d022e0bdd95f1e79c9f50b" args="(const std::string &amp;Filename)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Image::LoadFromFile           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>Filename</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Load the image from a file. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Filename</em>&nbsp;</td><td>: Path of the image file to load</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if loading was successful </dd></dl>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00123">123</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="72565ffabe12dfb2602e209c2e6f0486"></a><!-- doxytag: member="sf::Image::LoadFromMemory" ref="72565ffabe12dfb2602e209c2e6f0486" args="(const char *Data, std::size_t SizeInBytes)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Image::LoadFromMemory           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>Data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&nbsp;</td>
          <td class="paramname"> <em>SizeInBytes</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Load the image from a file in memory. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Data</em>&nbsp;</td><td>: Pointer to the file data in memory </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>SizeInBytes</em>&nbsp;</td><td>: Size of the data to load, in bytes</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if loading was successful </dd></dl>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00145">145</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="67d65c552c9bcba989a061e9c5b5d10c"></a><!-- doxytag: member="sf::Image::LoadFromPixels" ref="67d65c552c9bcba989a061e9c5b5d10c" args="(unsigned int Width, unsigned int Height, const Uint8 *Data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Image::LoadFromPixels           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Uint8 *&nbsp;</td>
          <td class="paramname"> <em>Data</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Load the image directly from an array of pixels. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Width</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a> width </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Height</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a> height </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Data</em>&nbsp;</td><td>: Pointer to the pixels in memory (assumed format is RGBA)</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if loading was successful </dd></dl>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00174">174</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="5f9927e407bbe34172553ecfff2f54f3"></a><!-- doxytag: member="sf::Image::operator=" ref="5f9927e407bbe34172553ecfff2f54f3" args="(const Image &amp;Other)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Image.htm">Image</a> &amp; sf::Image::operator=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Image.htm">Image</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Other</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Assignment operator. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Other</em>&nbsp;</td><td>: instance to assign</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Reference to the image </dd></dl>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00585">585</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="50eed54ef8e9f3aeef5bb7f19144aa08"></a><!-- doxytag: member="sf::Image::SaveToFile" ref="50eed54ef8e9f3aeef5bb7f19144aa08" args="(const std::string &amp;Filename) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Image::SaveToFile           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>Filename</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Save the content of the image to a file. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Filename</em>&nbsp;</td><td>: Path of the file to save (overwritten if already exist)</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if saving was successful </dd></dl>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00209">209</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="623f2379b30307b4ee4eb08d517d9584"></a><!-- doxytag: member="sf::Image::SetPixel" ref="623f2379b30307b4ee4eb08d517d9584" args="(unsigned int X, unsigned int Y, const Color &amp;Col)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Image::SetPixel           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>X</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Col</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Change the color of a pixel. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>X</em>&nbsp;</td><td>: X coordinate of pixel in the image </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Y</em>&nbsp;</td><td>: Y coordinate of pixel in the image </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Col</em>&nbsp;</td><td>: New color for pixel (X, Y) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00408">408</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="d167422fd331cd069674391fb16e8452"></a><!-- doxytag: member="sf::Image::SetSmooth" ref="d167422fd331cd069674391fb16e8452" args="(bool Smooth)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Image::SetSmooth           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>Smooth</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Enable or disable image smooth filter. 
<p>
Enable or disable image smoothing filter.<p>
This parameter is enabled by default<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Smooth</em>&nbsp;</td><td>: True to enable smoothing filter, false to disable it </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Image_8cpp-source.htm#l00490">490</a> of file <a class="el" href="Image_8cpp-source.htm">Image.cpp</a>.</p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="Image_8hpp-source.htm">Image.hpp</a><li><a class="el" href="Image_8cpp-source.htm">Image.cpp</a></ul>
</div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
