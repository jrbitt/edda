<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><b>sf</b>::<a class="el" href="classsf_1_1Shape.htm">Shape</a>
  </div>
</div>
<div class="contents">
<h1>sf::Shape Class Reference</h1><!-- doxytag: class="sf::Shape" --><!-- doxytag: inherits="sf::Drawable" --><a class="el" href="classsf_1_1Shape.htm" title="Shape defines a drawable convex shape ; it also defines helper functions to draw...">Shape</a> defines a drawable convex shape ; it also defines helper functions to draw simple shapes like lines, rectangles, circles, etc.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="Shape_8hpp-source.htm">Shape.hpp</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for sf::Shape:</div>
<div class="dynsection">

<p><center><img src="classsf_1_1Shape.png" usemap="#sf::Shape_map" border="0" alt=""></center>
<map name="sf::Shape_map">
<area href="classsf_1_1Drawable.htm" alt="sf::Drawable" shape="rect" coords="0,0,82,24">
</map>
</div>

<p>
<a href="classsf_1_1Shape-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Classes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><b>Point</b></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Defines a simple 2D point. <br></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#413a457f720835b9f5d8e97ca8b80960">Shape</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Default constructor.  <a href="#413a457f720835b9f5d8e97ca8b80960"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#b28fab6a7d2b596f15ef5c0611341c92">AddPoint</a> (float X, float Y, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;Col=<a class="el" href="classsf_1_1Color.htm">Color</a>(255, 255, 255), const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;OutlineCol=<a class="el" href="classsf_1_1Color.htm">Color</a>(0, 0, 0))</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Add a point to the shape.  <a href="#b28fab6a7d2b596f15ef5c0611341c92"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#212f5b1d630e820989a53dcbf46d33e4">AddPoint</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;Position, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;Col=<a class="el" href="classsf_1_1Color.htm">Color</a>(255, 255, 255), const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;OutlineCol=<a class="el" href="classsf_1_1Color.htm">Color</a>(0, 0, 0))</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Add a point to the shape.  <a href="#212f5b1d630e820989a53dcbf46d33e4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#8bafa82b4f42937d897c5c5aecd22350">GetNbPoints</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the number of points composing the shape.  <a href="#8bafa82b4f42937d897c5c5aecd22350"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#6370770e5f1d1c1b1abfeef80d6296ae">EnableFill</a> (bool Enable)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable or disable filling the shape.  <a href="#6370770e5f1d1c1b1abfeef80d6296ae"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#f65abf11c7faa1a78c6d203e68a35a26">EnableOutline</a> (bool Enable)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable or disable drawing the shape outline.  <a href="#f65abf11c7faa1a78c6d203e68a35a26"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#f3eaee50b3af95d9884b41fc3996567e">SetPointPosition</a> (unsigned int Index, const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;Position)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the position of a point.  <a href="#f3eaee50b3af95d9884b41fc3996567e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#e3000e995446507929c24b3abbcce18c">SetPointPosition</a> (unsigned int Index, float X, float Y)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the position of a point.  <a href="#e3000e995446507929c24b3abbcce18c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#d55eab90a2fb9fd0bcc1dd695b0bc769">SetPointColor</a> (unsigned int Index, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;Col)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the color of a point.  <a href="#d55eab90a2fb9fd0bcc1dd695b0bc769"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#d28205b9e4784ae0adcc2209669572fe">SetPointOutlineColor</a> (unsigned int Index, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;OutlineCol)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the outline color of a point.  <a href="#d28205b9e4784ae0adcc2209669572fe"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#77ce4ef6cf1944768b2bc88c98a98b65">SetOutlineWidth</a> (float Width)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the width of the shape outline.  <a href="#77ce4ef6cf1944768b2bc88c98a98b65"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#2b3cf65f5453a84466f749b97e611436">GetPointPosition</a> (unsigned int Index) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the position of a point.  <a href="#2b3cf65f5453a84466f749b97e611436"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#f22db94719a2e359cb02dd4108e6ea92">GetPointColor</a> (unsigned int Index) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the color of a point.  <a href="#f22db94719a2e359cb02dd4108e6ea92"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#f9a40ea9b28f96f183533991e6f811b8">GetPointOutlineColor</a> (unsigned int Index) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the outline color of a point.  <a href="#f9a40ea9b28f96f183533991e6f811b8"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#ed31da968d6d4bc8f6a3b4bf808c1087">GetOutlineWidth</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the width of the shape outline.  <a href="#ed31da968d6d4bc8f6a3b4bf808c1087"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#419da954b1f2ad1ac2ae0b9ab6e72589">SetPosition</a> (float X, float Y)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the position of the object (take 2 values).  <a href="#419da954b1f2ad1ac2ae0b9ab6e72589"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#d2a279f3b13abf57cc25b2b4bd3b81ae">SetPosition</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;Position)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the position of the object (take a 2D vector).  <a href="#d2a279f3b13abf57cc25b2b4bd3b81ae"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#c8de7bfe092736083dcf23b0dbd22b1e">SetX</a> (float X)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the X position of the object.  <a href="#c8de7bfe092736083dcf23b0dbd22b1e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#83fecebe749c1aca9070eafd63e1a0c9">SetY</a> (float Y)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the Y position of the object.  <a href="#83fecebe749c1aca9070eafd63e1a0c9"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#0b486c56c2bd137bac629f72fea66769">SetScale</a> (float ScaleX, float ScaleY)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the scale of the object (take 2 values).  <a href="#0b486c56c2bd137bac629f72fea66769"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#84876c5ef7fa628c85c3c9e000e50aa1">SetScale</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;Scale)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the scale of the object (take a 2D vector).  <a href="#84876c5ef7fa628c85c3c9e000e50aa1"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#0cafae61a1d23bddb059d64df0e1502f">SetScaleX</a> (float FactorX)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the X scale factor of the object.  <a href="#0cafae61a1d23bddb059d64df0e1502f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#89e7793c74c656e5850b71d0ab34b8bf">SetScaleY</a> (float FactorY)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the Y scale factor of the object.  <a href="#89e7793c74c656e5850b71d0ab34b8bf"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#11ba1d92bc863af6d95831d216802f61">SetCenter</a> (float CenterX, float CenterY)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the center of the object, in coordinates relative to the top-left of the object (take 2 values).  <a href="#11ba1d92bc863af6d95831d216802f61"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#235e438555d8161f4995615f24fa0b11">SetCenter</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;Center)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the center of the object, in coordinates relative to the top-left of the object (take a 2D vector).  <a href="#235e438555d8161f4995615f24fa0b11"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#6d06383770eb01ffecf3d1cae6fec0ec">SetRotation</a> (float Rotation)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the orientation of the object.  <a href="#6d06383770eb01ffecf3d1cae6fec0ec"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#8cae9f22220985e368a1b38af7644ffb">SetColor</a> (const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;Col)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the color of the object.  <a href="#8cae9f22220985e368a1b38af7644ffb"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#aa6558b1ae27e29cb825028473707da5">SetBlendMode</a> (<a class="el" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca">Blend::Mode</a> Mode)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the blending mode for the object.  <a href="#aa6558b1ae27e29cb825028473707da5"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#9ad52594fd5e835cbd03b79098d70e0b">GetPosition</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the position of the object.  <a href="#9ad52594fd5e835cbd03b79098d70e0b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#fa4d6b97e7c10a82430ff9ee56009c97">GetScale</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the current scale of the object.  <a href="#fa4d6b97e7c10a82430ff9ee56009c97"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#de634efe8d6264282acc564fa5ea77c0">GetCenter</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the center of the object.  <a href="#de634efe8d6264282acc564fa5ea77c0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#4e82bec096673bccf7ceac5207617017">GetRotation</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the orientation of the object.  <a href="#4e82bec096673bccf7ceac5207617017"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#a2a028c4a975b5ed6d5a560a1c44e0c8">GetColor</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the color of the object.  <a href="#a2a028c4a975b5ed6d5a560a1c44e0c8"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca">Blend::Mode</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#b6446c4717a2800cad85db55cb55409a">GetBlendMode</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the current blending mode.  <a href="#b6446c4717a2800cad85db55cb55409a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#501df9af956362b3e3769d80381c051b">Move</a> (float OffsetX, float OffsetY)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Move the object of a given offset (take 2 values).  <a href="#501df9af956362b3e3769d80381c051b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#3c0ac0851d6b0ebed80ae9641ff93161">Move</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;Offset)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Move the object of a given offset (take a 2D vector).  <a href="#3c0ac0851d6b0ebed80ae9641ff93161"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#2a132c9f2f3736b7d0f6ea80303caacd">Scale</a> (float FactorX, float FactorY)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Scale the object (take 2 values).  <a href="#2a132c9f2f3736b7d0f6ea80303caacd"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#c969d85eaf63f072de9e963bd973e91a">Scale</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;Factor)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Scale the object (take a 2D vector).  <a href="#c969d85eaf63f072de9e963bd973e91a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#3e7d558d0ef488485a2d3f885ff2b419">Rotate</a> (float Angle)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Rotate the object.  <a href="#3e7d558d0ef488485a2d3f885ff2b419"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classsf_1_1Vector2.htm">sf::Vector2f</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#809f25ae0b3a2015ec8a44fe9f5a0008">TransformToLocal</a> (const <a class="el" href="classsf_1_1Vector2.htm">sf::Vector2f</a> &amp;Point) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Transform a point from global coordinates into local coordinates (ie it applies the inverse of object's center, translation, rotation and scale to the point).  <a href="#809f25ae0b3a2015ec8a44fe9f5a0008"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classsf_1_1Vector2.htm">sf::Vector2f</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#fe3cb6e62921ce13806c27dc727f8945">TransformToGlobal</a> (const <a class="el" href="classsf_1_1Vector2.htm">sf::Vector2f</a> &amp;Point) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Transform a point from local coordinates into global coordinates (ie it applies the object's center, translation, rotation and scale to the point).  <a href="#fe3cb6e62921ce13806c27dc727f8945"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classsf_1_1Shape.htm">Shape</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#90fe51b17c8029ed528d8590595a3f1f">Line</a> (float P1X, float P1Y, float P2X, float P2Y, float Thickness, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;Col, float Outline=0.f, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;OutlineCol=<a class="el" href="classsf_1_1Color.htm">sf::Color</a>(0, 0, 0))</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create a shape made of a single line (use floats).  <a href="#90fe51b17c8029ed528d8590595a3f1f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classsf_1_1Shape.htm">Shape</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#264e5374cac72a520fcf69c3bbdfe688">Line</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;P1, const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;P2, float Thickness, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;Col, float Outline=0.f, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;OutlineCol=<a class="el" href="classsf_1_1Color.htm">sf::Color</a>(0, 0, 0))</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create a shape made of a single line (use vectors).  <a href="#264e5374cac72a520fcf69c3bbdfe688"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classsf_1_1Shape.htm">Shape</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#aec9c0468a77871f6410aea757105498">Rectangle</a> (float P1X, float P1Y, float P2X, float P2Y, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;Col, float Outline=0.f, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;OutlineCol=<a class="el" href="classsf_1_1Color.htm">sf::Color</a>(0, 0, 0))</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create a shape made of a single rectangle (use floats).  <a href="#aec9c0468a77871f6410aea757105498"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classsf_1_1Shape.htm">Shape</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#7273d55fb2e6ede4d901428a97579169">Rectangle</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;P1, const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;P2, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;Col, float Outline=0.f, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;OutlineCol=<a class="el" href="classsf_1_1Color.htm">sf::Color</a>(0, 0, 0))</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create a shape made of a single rectangle (use vectors).  <a href="#7273d55fb2e6ede4d901428a97579169"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classsf_1_1Shape.htm">Shape</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#10ccaef12679a28cf4d3003fceffc2f0">Circle</a> (float X, float Y, float Radius, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;Col, float Outline=0.f, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;OutlineCol=<a class="el" href="classsf_1_1Color.htm">sf::Color</a>(0, 0, 0))</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create a shape made of a single circle (use floats).  <a href="#10ccaef12679a28cf4d3003fceffc2f0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classsf_1_1Shape.htm">Shape</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#b7b5082c253cf624b76de040f9c017d4">Circle</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;Center, float Radius, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;Col, float Outline=0.f, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;OutlineCol=<a class="el" href="classsf_1_1Color.htm">sf::Color</a>(0, 0, 0))</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create a shape made of a single circle (use vectors).  <a href="#b7b5082c253cf624b76de040f9c017d4"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shape.htm#b32d683b125efd3bd7ccf878b1f50a31">Render</a> (<a class="el" href="classsf_1_1RenderTarget.htm">RenderTarget</a> &amp;Target) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">/see Drawable::Render  <a href="#b32d683b125efd3bd7ccf878b1f50a31"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1Matrix3.htm">Matrix3</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#c659a89e42063d13aa9ebe2b534d404e">GetMatrix</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the transform matrix of the drawable.  <a href="#c659a89e42063d13aa9ebe2b534d404e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1Matrix3.htm">Matrix3</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.htm#48238d5726104ba7ddb42f21fc5d5b2f">GetInverseMatrix</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the inverse transform matrix of the drawable.  <a href="#48238d5726104ba7ddb42f21fc5d5b2f"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
<a class="el" href="classsf_1_1Shape.htm" title="Shape defines a drawable convex shape ; it also defines helper functions to draw...">Shape</a> defines a drawable convex shape ; it also defines helper functions to draw simple shapes like lines, rectangles, circles, etc. 
<p>Definition at line <a class="el" href="Shape_8hpp-source.htm#l00043">43</a> of file <a class="el" href="Shape_8hpp-source.htm">Shape.hpp</a>.</p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="413a457f720835b9f5d8e97ca8b80960"></a><!-- doxytag: member="sf::Shape::Shape" ref="413a457f720835b9f5d8e97ca8b80960" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Shape::Shape           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Default constructor. 
<p>

<p>Definition at line <a class="el" href="Shape_8cpp-source.htm#l00038">38</a> of file <a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a>.</p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="212f5b1d630e820989a53dcbf46d33e4"></a><!-- doxytag: member="sf::Shape::AddPoint" ref="212f5b1d630e820989a53dcbf46d33e4" args="(const Vector2f &amp;Position, const Color &amp;Col=Color(255, 255, 255), const Color &amp;OutlineCol=Color(0, 0, 0))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shape::AddPoint           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Position</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Col</em> = <code><a class="el" href="classsf_1_1Color.htm">Color</a>(255,&nbsp;255,&nbsp;255)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>OutlineCol</em> = <code><a class="el" href="classsf_1_1Color.htm">Color</a>(0,&nbsp;0,&nbsp;0)</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Add a point to the shape. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Position</em>&nbsp;</td><td>: Position of the point </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Col</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> of the point (white by default) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>OutlineCol</em>&nbsp;</td><td>: Outline color of the point (black by default) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Shape_8cpp-source.htm#l00061">61</a> of file <a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="b28fab6a7d2b596f15ef5c0611341c92"></a><!-- doxytag: member="sf::Shape::AddPoint" ref="b28fab6a7d2b596f15ef5c0611341c92" args="(float X, float Y, const Color &amp;Col=Color(255, 255, 255), const Color &amp;OutlineCol=Color(0, 0, 0))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shape::AddPoint           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>X</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Col</em> = <code><a class="el" href="classsf_1_1Color.htm">Color</a>(255,&nbsp;255,&nbsp;255)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>OutlineCol</em> = <code><a class="el" href="classsf_1_1Color.htm">Color</a>(0,&nbsp;0,&nbsp;0)</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Add a point to the shape. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>X,Y</em>&nbsp;</td><td>: Position of the point </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Col</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> of the point (white by default) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>OutlineCol</em>&nbsp;</td><td>: Outline color of the point (black by default) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Shape_8cpp-source.htm#l00052">52</a> of file <a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="b7b5082c253cf624b76de040f9c017d4"></a><!-- doxytag: member="sf::Shape::Circle" ref="b7b5082c253cf624b76de040f9c017d4" args="(const Vector2f &amp;Center, float Radius, const Color &amp;Col, float Outline=0.f, const Color &amp;OutlineCol=sf::Color(0, 0, 0))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Shape.htm">Shape</a> sf::Shape::Circle           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Center</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Radius</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Outline</em> = <code>0.f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>OutlineCol</em> = <code><a class="el" href="classsf_1_1Color.htm">sf::Color</a>(0,&nbsp;0,&nbsp;0)</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Create a shape made of a single circle (use vectors). 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Center</em>&nbsp;</td><td>: Position of the center </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Radius</em>&nbsp;</td><td>: Radius </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Col</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> used to fill the circle </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Outline</em>&nbsp;</td><td>: Outline width (0 by default) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>OutlineCol</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> used to draw the outline (black by default) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Shape_8cpp-source.htm#l00276">276</a> of file <a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="10ccaef12679a28cf4d3003fceffc2f0"></a><!-- doxytag: member="sf::Shape::Circle" ref="10ccaef12679a28cf4d3003fceffc2f0" args="(float X, float Y, float Radius, const Color &amp;Col, float Outline=0.f, const Color &amp;OutlineCol=sf::Color(0, 0, 0))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Shape.htm">Shape</a> sf::Shape::Circle           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>X</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Radius</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Outline</em> = <code>0.f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>OutlineCol</em> = <code><a class="el" href="classsf_1_1Color.htm">sf::Color</a>(0,&nbsp;0,&nbsp;0)</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Create a shape made of a single circle (use floats). 
<p>
Create a shape made of a single circle.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>X,Y</em>&nbsp;</td><td>: Position of the center </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Radius</em>&nbsp;</td><td>: Radius </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Col</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> used to fill the circle </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Outline</em>&nbsp;</td><td>: Outline width (0 by default) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>OutlineCol</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> used to draw the outline (black by default) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Shape_8cpp-source.htm#l00250">250</a> of file <a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="6370770e5f1d1c1b1abfeef80d6296ae"></a><!-- doxytag: member="sf::Shape::EnableFill" ref="6370770e5f1d1c1b1abfeef80d6296ae" args="(bool Enable)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shape::EnableFill           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>Enable</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Enable or disable filling the shape. 
<p>
Fill is enabled by default<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Enable</em>&nbsp;</td><td>: True to enable, false to disable</td></tr>
  </table>
</dl>
Fill is enabled by default 
<p>Definition at line <a class="el" href="Shape_8cpp-source.htm#l00081">81</a> of file <a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="f65abf11c7faa1a78c6d203e68a35a26"></a><!-- doxytag: member="sf::Shape::EnableOutline" ref="f65abf11c7faa1a78c6d203e68a35a26" args="(bool Enable)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shape::EnableOutline           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>Enable</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Enable or disable drawing the shape outline. 
<p>
Outline is enabled by default<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Enable</em>&nbsp;</td><td>: True to enable, false to disable</td></tr>
  </table>
</dl>
Outline is enabled by default 
<p>Definition at line <a class="el" href="Shape_8cpp-source.htm#l00091">91</a> of file <a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="b6446c4717a2800cad85db55cb55409a"></a><!-- doxytag: member="sf::Shape::GetBlendMode" ref="b6446c4717a2800cad85db55cb55409a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca">Blend::Mode</a> sf::Drawable::GetBlendMode           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the current blending mode. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Current blending mode </dd></dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00258">258</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="de634efe8d6264282acc564fa5ea77c0"></a><!-- doxytag: member="sf::Shape::GetCenter" ref="de634efe8d6264282acc564fa5ea77c0" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp; sf::Drawable::GetCenter           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the center of the object. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Current position of the center </dd></dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00231">231</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="a2a028c4a975b5ed6d5a560a1c44e0c8"></a><!-- doxytag: member="sf::Shape::GetColor" ref="a2a028c4a975b5ed6d5a560a1c44e0c8" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp; sf::Drawable::GetColor           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the color of the object. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Current color </dd></dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00249">249</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="48238d5726104ba7ddb42f21fc5d5b2f"></a><!-- doxytag: member="sf::Shape::GetInverseMatrix" ref="48238d5726104ba7ddb42f21fc5d5b2f" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Matrix3.htm">Matrix3</a> &amp; sf::Drawable::GetInverseMatrix           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the inverse transform matrix of the drawable. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Inverse transform matrix </dd></dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00350">350</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="c659a89e42063d13aa9ebe2b534d404e"></a><!-- doxytag: member="sf::Shape::GetMatrix" ref="c659a89e42063d13aa9ebe2b534d404e" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Matrix3.htm">Matrix3</a> &amp; sf::Drawable::GetMatrix           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the transform matrix of the drawable. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Transform matrix </dd></dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00334">334</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="8bafa82b4f42937d897c5c5aecd22350"></a><!-- doxytag: member="sf::Shape::GetNbPoints" ref="8bafa82b4f42937d897c5c5aecd22350" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int sf::Shape::GetNbPoints           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the number of points composing the shape. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Total</em>&nbsp;</td><td>number of points </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Shape_8cpp-source.htm#l00071">71</a> of file <a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="ed31da968d6d4bc8f6a3b4bf808c1087"></a><!-- doxytag: member="sf::Shape::GetOutlineWidth" ref="ed31da968d6d4bc8f6a3b4bf808c1087" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float sf::Shape::GetOutlineWidth           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the width of the shape outline. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Current outline width </dd></dl>

<p>Definition at line <a class="el" href="Shape_8cpp-source.htm#l00175">175</a> of file <a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="f22db94719a2e359cb02dd4108e6ea92"></a><!-- doxytag: member="sf::Shape::GetPointColor" ref="f22db94719a2e359cb02dd4108e6ea92" args="(unsigned int Index) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp; sf::Shape::GetPointColor           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Index</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the color of a point. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Index</em>&nbsp;</td><td>: Index of the point, in range [0, <a class="el" href="classsf_1_1Shape.htm#8bafa82b4f42937d897c5c5aecd22350" title="Get the number of points composing the shape.">GetNbPoints()</a> - 1]</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd><a class="el" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> of the Index-th point </dd></dl>

<p>Definition at line <a class="el" href="Shape_8cpp-source.htm#l00157">157</a> of file <a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="f9a40ea9b28f96f183533991e6f811b8"></a><!-- doxytag: member="sf::Shape::GetPointOutlineColor" ref="f9a40ea9b28f96f183533991e6f811b8" args="(unsigned int Index) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp; sf::Shape::GetPointOutlineColor           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Index</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the outline color of a point. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Index</em>&nbsp;</td><td>: Index of the point, in range [0, <a class="el" href="classsf_1_1Shape.htm#8bafa82b4f42937d897c5c5aecd22350" title="Get the number of points composing the shape.">GetNbPoints()</a> - 1]</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Outline color of the Index-th point </dd></dl>

<p>Definition at line <a class="el" href="Shape_8cpp-source.htm#l00166">166</a> of file <a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="2b3cf65f5453a84466f749b97e611436"></a><!-- doxytag: member="sf::Shape::GetPointPosition" ref="2b3cf65f5453a84466f749b97e611436" args="(unsigned int Index) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp; sf::Shape::GetPointPosition           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Index</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the position of a point. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Index</em>&nbsp;</td><td>: Index of the point, in range [0, <a class="el" href="classsf_1_1Shape.htm#8bafa82b4f42937d897c5c5aecd22350" title="Get the number of points composing the shape.">GetNbPoints()</a> - 1]</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Position of the Index-th point </dd></dl>

<p>Definition at line <a class="el" href="Shape_8cpp-source.htm#l00148">148</a> of file <a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="9ad52594fd5e835cbd03b79098d70e0b"></a><!-- doxytag: member="sf::Shape::GetPosition" ref="9ad52594fd5e835cbd03b79098d70e0b" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp; sf::Drawable::GetPosition           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the position of the object. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Current position </dd></dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00213">213</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="4e82bec096673bccf7ceac5207617017"></a><!-- doxytag: member="sf::Shape::GetRotation" ref="4e82bec096673bccf7ceac5207617017" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float sf::Drawable::GetRotation           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the orientation of the object. 
<p>
Rotation is always in the range [0, 360]<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Current rotation, in degrees </dd></dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00240">240</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="fa4d6b97e7c10a82430ff9ee56009c97"></a><!-- doxytag: member="sf::Shape::GetScale" ref="fa4d6b97e7c10a82430ff9ee56009c97" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp; sf::Drawable::GetScale           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the current scale of the object. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Current scale factor (always positive) </dd></dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00222">222</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="264e5374cac72a520fcf69c3bbdfe688"></a><!-- doxytag: member="sf::Shape::Line" ref="264e5374cac72a520fcf69c3bbdfe688" args="(const Vector2f &amp;P1, const Vector2f &amp;P2, float Thickness, const Color &amp;Col, float Outline=0.f, const Color &amp;OutlineCol=sf::Color(0, 0, 0))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Shape.htm">Shape</a> sf::Shape::Line           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>P1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>P2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Thickness</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Outline</em> = <code>0.f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>OutlineCol</em> = <code><a class="el" href="classsf_1_1Color.htm">sf::Color</a>(0,&nbsp;0,&nbsp;0)</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Create a shape made of a single line (use vectors). 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>P1X,P1Y</em>&nbsp;</td><td>: Position of the first point </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>P2X,P2Y</em>&nbsp;</td><td>: Position second point </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Thickness</em>&nbsp;</td><td>: Line thickness </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Col</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> used to draw the line </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Outline</em>&nbsp;</td><td>: Outline width (0 by default) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>OutlineCol</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> used to draw the outline (black by default) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Shape_8cpp-source.htm#l00212">212</a> of file <a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="90fe51b17c8029ed528d8590595a3f1f"></a><!-- doxytag: member="sf::Shape::Line" ref="90fe51b17c8029ed528d8590595a3f1f" args="(float P1X, float P1Y, float P2X, float P2Y, float Thickness, const Color &amp;Col, float Outline=0.f, const Color &amp;OutlineCol=sf::Color(0, 0, 0))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Shape.htm">Shape</a> sf::Shape::Line           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>P1X</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>P1Y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>P2X</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>P2Y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Thickness</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Outline</em> = <code>0.f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>OutlineCol</em> = <code><a class="el" href="classsf_1_1Color.htm">sf::Color</a>(0,&nbsp;0,&nbsp;0)</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Create a shape made of a single line (use floats). 
<p>
Create a shape made of a single line.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>P1X,P1Y</em>&nbsp;</td><td>: Position of the first point </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>P2X,P2Y</em>&nbsp;</td><td>: Position second point </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Thickness</em>&nbsp;</td><td>: Line thickness </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Col</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> used to draw the line </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Outline</em>&nbsp;</td><td>: Outline width (0 by default) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>OutlineCol</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> used to draw the outline (black by default) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Shape_8cpp-source.htm#l00184">184</a> of file <a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="3c0ac0851d6b0ebed80ae9641ff93161"></a><!-- doxytag: member="sf::Shape::Move" ref="3c0ac0851d6b0ebed80ae9641ff93161" args="(const Vector2f &amp;Offset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::Move           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Offset</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Move the object of a given offset (take a 2D vector). 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Offset</em>&nbsp;</td><td>: Amount of units to move the object of </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00278">278</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="501df9af956362b3e3769d80381c051b"></a><!-- doxytag: member="sf::Shape::Move" ref="501df9af956362b3e3769d80381c051b" args="(float OffsetX, float OffsetY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::Move           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>OffsetX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>OffsetY</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Move the object of a given offset (take 2 values). 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>OffsetX</em>&nbsp;</td><td>: X offset </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>OffsetY</em>&nbsp;</td><td>: Y offset</td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00268">268</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="7273d55fb2e6ede4d901428a97579169"></a><!-- doxytag: member="sf::Shape::Rectangle" ref="7273d55fb2e6ede4d901428a97579169" args="(const Vector2f &amp;P1, const Vector2f &amp;P2, const Color &amp;Col, float Outline=0.f, const Color &amp;OutlineCol=sf::Color(0, 0, 0))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Shape.htm">Shape</a> sf::Shape::Rectangle           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>P1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>P2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Outline</em> = <code>0.f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>OutlineCol</em> = <code><a class="el" href="classsf_1_1Color.htm">sf::Color</a>(0,&nbsp;0,&nbsp;0)</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Create a shape made of a single rectangle (use vectors). 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>P1</em>&nbsp;</td><td>: Position of the first point </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>P2</em>&nbsp;</td><td>: Position second point </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Col</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> used to fill the rectangle </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Outline</em>&nbsp;</td><td>: Outline width (0 by default) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>OutlineCol</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> used to draw the outline (black by default) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Shape_8cpp-source.htm#l00241">241</a> of file <a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="aec9c0468a77871f6410aea757105498"></a><!-- doxytag: member="sf::Shape::Rectangle" ref="aec9c0468a77871f6410aea757105498" args="(float P1X, float P1Y, float P2X, float P2Y, const Color &amp;Col, float Outline=0.f, const Color &amp;OutlineCol=sf::Color(0, 0, 0))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Shape.htm">Shape</a> sf::Shape::Rectangle           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>P1X</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>P1Y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>P2X</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>P2Y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Col</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Outline</em> = <code>0.f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>OutlineCol</em> = <code><a class="el" href="classsf_1_1Color.htm">sf::Color</a>(0,&nbsp;0,&nbsp;0)</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Create a shape made of a single rectangle (use floats). 
<p>
Create a shape made of a single rectangle.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>P1X,P1Y</em>&nbsp;</td><td>: Position of the first point </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>P2X,P2Y</em>&nbsp;</td><td>: Position second point </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Col</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> used to fill the rectangle </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Outline</em>&nbsp;</td><td>: Outline width (0 by default) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>OutlineCol</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> used to draw the outline (black by default) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Shape_8cpp-source.htm#l00221">221</a> of file <a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="b32d683b125efd3bd7ccf878b1f50a31"></a><!-- doxytag: member="sf::Shape::Render" ref="b32d683b125efd3bd7ccf878b1f50a31" args="(RenderTarget &amp;Target) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shape::Render           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1RenderTarget.htm">RenderTarget</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Target</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [protected, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
/see Drawable::Render 
<p>

<p>Implements <a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a>.</p>

<p>Definition at line <a class="el" href="Shape_8cpp-source.htm#l00285">285</a> of file <a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="3e7d558d0ef488485a2d3f885ff2b419"></a><!-- doxytag: member="sf::Shape::Rotate" ref="3e7d558d0ef488485a2d3f885ff2b419" args="(float Angle)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::Rotate           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Angle</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Rotate the object. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Angle</em>&nbsp;</td><td>: Angle of rotation, in degrees </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00306">306</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="c969d85eaf63f072de9e963bd973e91a"></a><!-- doxytag: member="sf::Shape::Scale" ref="c969d85eaf63f072de9e963bd973e91a" args="(const Vector2f &amp;Factor)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::Scale           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Factor</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Scale the object (take a 2D vector). 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Factor</em>&nbsp;</td><td>: Scaling factors (both values must be strictly positive) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00297">297</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="2a132c9f2f3736b7d0f6ea80303caacd"></a><!-- doxytag: member="sf::Shape::Scale" ref="2a132c9f2f3736b7d0f6ea80303caacd" args="(float FactorX, float FactorY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::Scale           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>FactorX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>FactorY</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Scale the object (take 2 values). 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>FactorX</em>&nbsp;</td><td>: Scaling factor on X (must be strictly positive) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>FactorY</em>&nbsp;</td><td>: Scaling factor on Y (must be strictly positive) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00287">287</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="aa6558b1ae27e29cb825028473707da5"></a><!-- doxytag: member="sf::Shape::SetBlendMode" ref="aa6558b1ae27e29cb825028473707da5" args="(Blend::Mode Mode)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetBlendMode           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca">Blend::Mode</a>&nbsp;</td>
          <td class="paramname"> <em>Mode</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the blending mode for the object. 
<p>
The default blend mode is <a class="el" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca23075ecfbf49e19b713cc18188a7661a" title="Pixel = Src * a + Dest * (1 - a).">Blend::Alpha</a><p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Mode</em>&nbsp;</td><td>: New blending mode</td></tr>
  </table>
</dl>
The default blend mode is <a class="el" href="namespacesf_1_1Blend.htm#1a2fa89de4bb0d82b2eb30399fe575ca23075ecfbf49e19b713cc18188a7661a" title="Pixel = Src * a + Dest * (1 - a).">Blend::Alpha</a> 
<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00204">204</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="235e438555d8161f4995615f24fa0b11"></a><!-- doxytag: member="sf::Shape::SetCenter" ref="235e438555d8161f4995615f24fa0b11" args="(const Vector2f &amp;Center)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetCenter           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Center</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the center of the object, in coordinates relative to the top-left of the object (take a 2D vector). 
<p>
Set the center of the object, in coordinates relative to the top-left of the object (take a 2D vector).<p>
The default center is (0, 0)<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Center</em>&nbsp;</td><td>: New center</td></tr>
  </table>
</dl>
The default center is (0, 0) 
<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00171">171</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="11ba1d92bc863af6d95831d216802f61"></a><!-- doxytag: member="sf::Shape::SetCenter" ref="11ba1d92bc863af6d95831d216802f61" args="(float CenterX, float CenterY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetCenter           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>CenterX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>CenterY</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the center of the object, in coordinates relative to the top-left of the object (take 2 values). 
<p>
Set the center of the object, in coordinates relative to the top-left of the object (take 2 values).<p>
The default center is (0, 0)<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>CenterX</em>&nbsp;</td><td>: X coordinate of the center </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>CenterY</em>&nbsp;</td><td>: Y coordinate of the center</td></tr>
  </table>
</dl>
The default center is (0, 0) 
<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00157">157</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="8cae9f22220985e368a1b38af7644ffb"></a><!-- doxytag: member="sf::Shape::SetColor" ref="8cae9f22220985e368a1b38af7644ffb" args="(const Color &amp;Col)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetColor           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Col</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the color of the object. 
<p>
The default color is white<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Col</em>&nbsp;</td><td>: New color</td></tr>
  </table>
</dl>
The default color is white 
<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00194">194</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="77ce4ef6cf1944768b2bc88c98a98b65"></a><!-- doxytag: member="sf::Shape::SetOutlineWidth" ref="77ce4ef6cf1944768b2bc88c98a98b65" args="(float Width)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shape::SetOutlineWidth           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Width</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Change the width of the shape outline. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Width</em>&nbsp;</td><td>: New width </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Shape_8cpp-source.htm#l00139">139</a> of file <a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="d55eab90a2fb9fd0bcc1dd695b0bc769"></a><!-- doxytag: member="sf::Shape::SetPointColor" ref="d55eab90a2fb9fd0bcc1dd695b0bc769" args="(unsigned int Index, const Color &amp;Col)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shape::SetPointColor           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Col</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the color of a point. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Index</em>&nbsp;</td><td>: Index of the point, in range [0, <a class="el" href="classsf_1_1Shape.htm#8bafa82b4f42937d897c5c5aecd22350" title="Get the number of points composing the shape.">GetNbPoints()</a> - 1] </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Col</em>&nbsp;</td><td>: New color of the Index-th point </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Shape_8cpp-source.htm#l00119">119</a> of file <a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="d28205b9e4784ae0adcc2209669572fe"></a><!-- doxytag: member="sf::Shape::SetPointOutlineColor" ref="d28205b9e4784ae0adcc2209669572fe" args="(unsigned int Index, const Color &amp;OutlineCol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shape::SetPointOutlineColor           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>OutlineCol</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the outline color of a point. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Index</em>&nbsp;</td><td>: Index of the point, in range [0, <a class="el" href="classsf_1_1Shape.htm#8bafa82b4f42937d897c5c5aecd22350" title="Get the number of points composing the shape.">GetNbPoints()</a> - 1] </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>OutlineCol</em>&nbsp;</td><td>: New outline color of the Index-th point </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Shape_8cpp-source.htm#l00129">129</a> of file <a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="e3000e995446507929c24b3abbcce18c"></a><!-- doxytag: member="sf::Shape::SetPointPosition" ref="e3000e995446507929c24b3abbcce18c" args="(unsigned int Index, float X, float Y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shape::SetPointPosition           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>X</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the position of a point. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Index</em>&nbsp;</td><td>: Index of the point, in range [0, <a class="el" href="classsf_1_1Shape.htm#8bafa82b4f42937d897c5c5aecd22350" title="Get the number of points composing the shape.">GetNbPoints()</a> - 1] </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>X</em>&nbsp;</td><td>: New X coordinate of the Index-th point </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Y</em>&nbsp;</td><td>: New Y coordinate of the Index-th point </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Shape_8cpp-source.htm#l00110">110</a> of file <a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="f3eaee50b3af95d9884b41fc3996567e"></a><!-- doxytag: member="sf::Shape::SetPointPosition" ref="f3eaee50b3af95d9884b41fc3996567e" args="(unsigned int Index, const Vector2f &amp;Position)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shape::SetPointPosition           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Position</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the position of a point. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Index</em>&nbsp;</td><td>: Index of the point, in range [0, <a class="el" href="classsf_1_1Shape.htm#8bafa82b4f42937d897c5c5aecd22350" title="Get the number of points composing the shape.">GetNbPoints()</a> - 1] </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Position</em>&nbsp;</td><td>: New position of the Index-th point </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Shape_8cpp-source.htm#l00100">100</a> of file <a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="d2a279f3b13abf57cc25b2b4bd3b81ae"></a><!-- doxytag: member="sf::Shape::SetPosition" ref="d2a279f3b13abf57cc25b2b4bd3b81ae" args="(const Vector2f &amp;Position)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetPosition           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Position</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the position of the object (take a 2D vector). 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Position</em>&nbsp;</td><td>: New position </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00075">75</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="419da954b1f2ad1ac2ae0b9ab6e72589"></a><!-- doxytag: member="sf::Shape::SetPosition" ref="419da954b1f2ad1ac2ae0b9ab6e72589" args="(float X, float Y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetPosition           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>X</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the position of the object (take 2 values). 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>X</em>&nbsp;</td><td>: New X coordinate </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Y</em>&nbsp;</td><td>: New Y coordinate </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00065">65</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="6d06383770eb01ffecf3d1cae6fec0ec"></a><!-- doxytag: member="sf::Shape::SetRotation" ref="6d06383770eb01ffecf3d1cae6fec0ec" args="(float Rotation)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetRotation           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Rotation</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the orientation of the object. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Rotation</em>&nbsp;</td><td>: Angle of rotation, in degrees </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00180">180</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="84876c5ef7fa628c85c3c9e000e50aa1"></a><!-- doxytag: member="sf::Shape::SetScale" ref="84876c5ef7fa628c85c3c9e000e50aa1" args="(const Vector2f &amp;Scale)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetScale           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Scale</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the scale of the object (take a 2D vector). 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Scale</em>&nbsp;</td><td>: New scale (both values must be strictly positive) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00117">117</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="0b486c56c2bd137bac629f72fea66769"></a><!-- doxytag: member="sf::Shape::SetScale" ref="0b486c56c2bd137bac629f72fea66769" args="(float ScaleX, float ScaleY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetScale           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>ScaleX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>ScaleY</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the scale of the object (take 2 values). 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ScaleX</em>&nbsp;</td><td>: New horizontal scale (must be strictly positive) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>ScaleY</em>&nbsp;</td><td>: New vertical scale (must be strictly positive) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00107">107</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="0cafae61a1d23bddb059d64df0e1502f"></a><!-- doxytag: member="sf::Shape::SetScaleX" ref="0cafae61a1d23bddb059d64df0e1502f" args="(float FactorX)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetScaleX           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>FactorX</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the X scale factor of the object. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>X</em>&nbsp;</td><td>: New X scale factor </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00127">127</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="89e7793c74c656e5850b71d0ab34b8bf"></a><!-- doxytag: member="sf::Shape::SetScaleY" ref="89e7793c74c656e5850b71d0ab34b8bf" args="(float FactorY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetScaleY           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>FactorY</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the Y scale factor of the object. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Y</em>&nbsp;</td><td>: New Y scale factor </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00141">141</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="c8de7bfe092736083dcf23b0dbd22b1e"></a><!-- doxytag: member="sf::Shape::SetX" ref="c8de7bfe092736083dcf23b0dbd22b1e" args="(float X)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetX           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>X</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the X position of the object. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>X</em>&nbsp;</td><td>: New X coordinate </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00085">85</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="83fecebe749c1aca9070eafd63e1a0c9"></a><!-- doxytag: member="sf::Shape::SetY" ref="83fecebe749c1aca9070eafd63e1a0c9" args="(float Y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetY           </td>
          <td>(</td>
          <td class="paramtype">float&nbsp;</td>
          <td class="paramname"> <em>Y</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the Y position of the object. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Y</em>&nbsp;</td><td>: New Y coordinate </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00096">96</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="fe3cb6e62921ce13806c27dc727f8945"></a><!-- doxytag: member="sf::Shape::TransformToGlobal" ref="fe3cb6e62921ce13806c27dc727f8945" args="(const sf::Vector2f &amp;Point) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.htm">sf::Vector2f</a> sf::Drawable::TransformToGlobal           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">sf::Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Point</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Transform a point from local coordinates into global coordinates (ie it applies the object's center, translation, rotation and scale to the point). 
<p>
Transform a point from local coordinates into global coordinates (ie it applies the object's center, translation, rotation and scale to the point).<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Point</em>&nbsp;</td><td>: Point to transform</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Transformed point </dd></dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00325">325</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="809f25ae0b3a2015ec8a44fe9f5a0008"></a><!-- doxytag: member="sf::Shape::TransformToLocal" ref="809f25ae0b3a2015ec8a44fe9f5a0008" args="(const sf::Vector2f &amp;Point) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.htm">sf::Vector2f</a> sf::Drawable::TransformToLocal           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">sf::Vector2f</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Point</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Transform a point from global coordinates into local coordinates (ie it applies the inverse of object's center, translation, rotation and scale to the point). 
<p>
Transform a point from global coordinates into local coordinates (ie it applies the inverse of object's center, translation, rotation and scale to the point).<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Point</em>&nbsp;</td><td>: Point to transform</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Transformed point </dd></dl>

<p>Definition at line <a class="el" href="Drawable_8cpp-source.htm#l00316">316</a> of file <a class="el" href="Drawable_8cpp-source.htm">Drawable.cpp</a>.</p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="Shape_8hpp-source.htm">Shape.hpp</a><li><a class="el" href="Shape_8cpp-source.htm">Shape.cpp</a></ul>
</div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
