<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>ImageLoader.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Graphics/ImageLoader.hpp&gt;</span>
<a name="l00029"></a>00029 <span class="keyword">extern</span> <span class="stringliteral">"C"</span>
<a name="l00030"></a>00030 {
<a name="l00031"></a>00031 <span class="preprocessor">    #include &lt;SFML/Graphics/libjpeg/jpeglib.h&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">    #include &lt;SFML/Graphics/libjpeg/jerror.h&gt;</span>
<a name="l00033"></a>00033 }
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;SFML/Graphics/libpng/png.h&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;SFML/Graphics/SOIL/SOIL.h&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="keyword">namespace</span>
<a name="l00040"></a>00040 {
<a name="l00044"></a>00044     <span class="keywordtype">void</span> PngErrorHandler(png_structp Png, png_const_charp Message)
<a name="l00045"></a>00045     {
<a name="l00046"></a>00046         std::cerr &lt;&lt; <span class="stringliteral">"Failed to write PNG image. Reason : "</span> &lt;&lt; Message &lt;&lt; std::endl;
<a name="l00047"></a>00047         longjmp(Png-&gt;jmpbuf, 1);
<a name="l00048"></a>00048     }
<a name="l00049"></a>00049 }
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="keyword">namespace </span>sf
<a name="l00053"></a>00053 {
<a name="l00054"></a>00054 <span class="keyword">namespace </span>priv
<a name="l00055"></a>00055 {
<a name="l00059"></a>00059 ImageLoader&amp; ImageLoader::GetInstance()
<a name="l00060"></a>00060 {
<a name="l00061"></a>00061     <span class="keyword">static</span> ImageLoader Instance;
<a name="l00062"></a>00062 
<a name="l00063"></a>00063     <span class="keywordflow">return</span> Instance;
<a name="l00064"></a>00064 }
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 
<a name="l00070"></a>00070 ImageLoader::ImageLoader()
<a name="l00071"></a>00071 {
<a name="l00072"></a>00072     <span class="comment">// Nothing to do</span>
<a name="l00073"></a>00073 }
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 
<a name="l00079"></a>00079 ImageLoader::~ImageLoader()
<a name="l00080"></a>00080 {
<a name="l00081"></a>00081     <span class="comment">// Nothing to do</span>
<a name="l00082"></a>00082 }
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 
<a name="l00088"></a>00088 <span class="keywordtype">bool</span> ImageLoader::LoadImageFromFile(<span class="keyword">const</span> std::string&amp; Filename, std::vector&lt;Color&gt;&amp; Pixels, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&amp; Width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&amp; Height)
<a name="l00089"></a>00089 {
<a name="l00090"></a>00090     <span class="comment">// Clear the array (just in case)</span>
<a name="l00091"></a>00091     Pixels.clear();
<a name="l00092"></a>00092 
<a name="l00093"></a>00093     <span class="comment">// Load the image and get a pointer to the pixels in memory</span>
<a name="l00094"></a>00094     <span class="keywordtype">int</span> ImgWidth, ImgHeight, ImgChannels;
<a name="l00095"></a>00095     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* PixelsPtr = SOIL_load_image(Filename.c_str(), &amp;ImgWidth, &amp;ImgHeight, &amp;ImgChannels, SOIL_LOAD_RGBA);
<a name="l00096"></a>00096 
<a name="l00097"></a>00097     <span class="keywordflow">if</span> (PixelsPtr)
<a name="l00098"></a>00098     {
<a name="l00099"></a>00099         <span class="comment">// Assign the image properties</span>
<a name="l00100"></a>00100         Width  = ImgWidth;
<a name="l00101"></a>00101         Height = ImgHeight;
<a name="l00102"></a>00102 
<a name="l00103"></a>00103         <span class="comment">// Copy the loaded pixels to the pixel buffer</span>
<a name="l00104"></a>00104         Pixels.resize(Width * Height);
<a name="l00105"></a>00105         memcpy(&amp;Pixels[0], PixelsPtr, Width * Height * 4);
<a name="l00106"></a>00106 
<a name="l00107"></a>00107         <span class="comment">// Free the loaded pixels (they are now in our own pixel buffer)</span>
<a name="l00108"></a>00108         SOIL_free_image_data(PixelsPtr);
<a name="l00109"></a>00109 
<a name="l00110"></a>00110         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00111"></a>00111     }
<a name="l00112"></a>00112     <span class="keywordflow">else</span>
<a name="l00113"></a>00113     {
<a name="l00114"></a>00114         <span class="comment">// Error, failed to load the image</span>
<a name="l00115"></a>00115         std::cerr &lt;&lt; <span class="stringliteral">"Failed to load image \""</span> &lt;&lt; Filename &lt;&lt; <span class="stringliteral">"\". Reason : "</span> &lt;&lt; SOIL_last_result() &lt;&lt; std::endl;
<a name="l00116"></a>00116 
<a name="l00117"></a>00117         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00118"></a>00118     }
<a name="l00119"></a>00119 }
<a name="l00120"></a>00120 
<a name="l00121"></a>00121 
<a name="l00125"></a>00125 <span class="keywordtype">bool</span> ImageLoader::LoadImageFromMemory(<span class="keyword">const</span> <span class="keywordtype">char</span>* Data, std::size_t SizeInBytes, std::vector&lt;Color&gt;&amp; Pixels, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&amp; Width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&amp; Height)
<a name="l00126"></a>00126 {
<a name="l00127"></a>00127     <span class="comment">// Clear the array (just in case)</span>
<a name="l00128"></a>00128     Pixels.clear();
<a name="l00129"></a>00129 
<a name="l00130"></a>00130     <span class="comment">// Load the image and get a pointer to the pixels in memory</span>
<a name="l00131"></a>00131     <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* Buffer = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(Data);
<a name="l00132"></a>00132     <span class="keywordtype">int</span> Size = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(SizeInBytes);
<a name="l00133"></a>00133     <span class="keywordtype">int</span> ImgWidth, ImgHeight, ImgChannels;
<a name="l00134"></a>00134     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* PixelsPtr = SOIL_load_image_from_memory(Buffer, Size, &amp;ImgWidth, &amp;ImgHeight, &amp;ImgChannels, SOIL_LOAD_RGBA);
<a name="l00135"></a>00135 
<a name="l00136"></a>00136     <span class="keywordflow">if</span> (PixelsPtr)
<a name="l00137"></a>00137     {
<a name="l00138"></a>00138         <span class="comment">// Assign the image properties</span>
<a name="l00139"></a>00139         Width  = ImgWidth;
<a name="l00140"></a>00140         Height = ImgHeight;
<a name="l00141"></a>00141 
<a name="l00142"></a>00142         <span class="comment">// Copy the loaded pixels to the pixel buffer</span>
<a name="l00143"></a>00143         Pixels.resize(Width * Height);
<a name="l00144"></a>00144         memcpy(&amp;Pixels[0], PixelsPtr, Width * Height * 4);
<a name="l00145"></a>00145 
<a name="l00146"></a>00146         <span class="comment">// Free the loaded pixels (they are now in our own pixel buffer)</span>
<a name="l00147"></a>00147         SOIL_free_image_data(PixelsPtr);
<a name="l00148"></a>00148 
<a name="l00149"></a>00149         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00150"></a>00150     }
<a name="l00151"></a>00151     <span class="keywordflow">else</span>
<a name="l00152"></a>00152     {
<a name="l00153"></a>00153         <span class="comment">// Error, failed to load the image</span>
<a name="l00154"></a>00154         std::cerr &lt;&lt; <span class="stringliteral">"Failed to load image from memory. Reason : "</span> &lt;&lt; SOIL_last_result() &lt;&lt; std::endl;
<a name="l00155"></a>00155 
<a name="l00156"></a>00156         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00157"></a>00157     }
<a name="l00158"></a>00158 }
<a name="l00159"></a>00159 
<a name="l00160"></a>00160 
<a name="l00164"></a>00164 <span class="keywordtype">bool</span> ImageLoader::SaveImageToFile(<span class="keyword">const</span> std::string&amp; Filename, <span class="keyword">const</span> std::vector&lt;Color&gt;&amp; Pixels, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Height)
<a name="l00165"></a>00165 {
<a name="l00166"></a>00166     <span class="comment">// Deduce the image type from its extension</span>
<a name="l00167"></a>00167     <span class="keywordtype">int</span> Type = -1;
<a name="l00168"></a>00168     <span class="keywordflow">if</span> (Filename.size() &gt; 3)
<a name="l00169"></a>00169     {
<a name="l00170"></a>00170         std::string Extension = Filename.substr(Filename.size() - 3);
<a name="l00171"></a>00171         <span class="keywordflow">if</span>      (Extension == <span class="stringliteral">"bmp"</span> || Extension == <span class="stringliteral">"BMP"</span>) Type = SOIL_SAVE_TYPE_BMP;
<a name="l00172"></a>00172         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (Extension == <span class="stringliteral">"tga"</span> || Extension == <span class="stringliteral">"TGA"</span>) Type = SOIL_SAVE_TYPE_TGA;
<a name="l00173"></a>00173         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (Extension == <span class="stringliteral">"dds"</span> || Extension == <span class="stringliteral">"DDS"</span>) Type = SOIL_SAVE_TYPE_DDS;
<a name="l00174"></a>00174 
<a name="l00175"></a>00175         <span class="comment">// Special handling for PNG and JPG -- not handled by SOIL</span>
<a name="l00176"></a>00176         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (Extension == <span class="stringliteral">"png"</span> || Extension == <span class="stringliteral">"PNG"</span>) <span class="keywordflow">return</span> WritePng(Filename, Pixels, Width, Height);
<a name="l00177"></a>00177         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (Extension == <span class="stringliteral">"jpg"</span> || Extension == <span class="stringliteral">"JPG"</span>) <span class="keywordflow">return</span> WriteJpg(Filename, Pixels, Width, Height);
<a name="l00178"></a>00178     }
<a name="l00179"></a>00179 
<a name="l00180"></a>00180     <span class="keywordflow">if</span> (Type == -1)
<a name="l00181"></a>00181     {
<a name="l00182"></a>00182         <span class="comment">// Error, incompatible type</span>
<a name="l00183"></a>00183         std::cerr &lt;&lt; <span class="stringliteral">"Failed to save image \""</span> &lt;&lt; Filename &lt;&lt; <span class="stringliteral">"\". Reason : this image format is not supported"</span> &lt;&lt; std::endl;
<a name="l00184"></a>00184         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00185"></a>00185     }
<a name="l00186"></a>00186 
<a name="l00187"></a>00187     <span class="comment">// Finally save the image</span>
<a name="l00188"></a>00188     <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* PixelsPtr = <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(&amp;Pixels[0]);
<a name="l00189"></a>00189     <span class="keywordflow">if</span> (!SOIL_save_image(Filename.c_str(), Type, <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(Width), static_cast&lt;int&gt;(Height), 4, PixelsPtr))
<a name="l00190"></a>00190     {
<a name="l00191"></a>00191         <span class="comment">// Error, failed to save the image</span>
<a name="l00192"></a>00192         std::cerr &lt;&lt; <span class="stringliteral">"Failed to save image \""</span> &lt;&lt; Filename &lt;&lt; <span class="stringliteral">"\". Reason : "</span> &lt;&lt; SOIL_last_result() &lt;&lt; std::endl;
<a name="l00193"></a>00193         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00194"></a>00194     }
<a name="l00195"></a>00195 
<a name="l00196"></a>00196     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00197"></a>00197 }
<a name="l00198"></a>00198 
<a name="l00199"></a>00199 
<a name="l00203"></a>00203 <span class="keywordtype">bool</span> ImageLoader::WriteJpg(<span class="keyword">const</span> std::string&amp; Filename, <span class="keyword">const</span> std::vector&lt;Color&gt;&amp; Pixels, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Height)
<a name="l00204"></a>00204 {
<a name="l00205"></a>00205     <span class="comment">// Open the file to write in</span>
<a name="l00206"></a>00206     FILE* File = fopen(Filename.c_str(), <span class="stringliteral">"wb"</span>);
<a name="l00207"></a>00207     <span class="keywordflow">if</span> (!File)
<a name="l00208"></a>00208     {
<a name="l00209"></a>00209         std::cerr &lt;&lt; <span class="stringliteral">"Failed to save image file \""</span> &lt;&lt; Filename &lt;&lt; <span class="stringliteral">"\". Reason : cannot open file"</span> &lt;&lt; std::endl;
<a name="l00210"></a>00210         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00211"></a>00211     }
<a name="l00212"></a>00212 
<a name="l00213"></a>00213     <span class="comment">// Initialize the error handler</span>
<a name="l00214"></a>00214     jpeg_compress_struct CompressInfo;
<a name="l00215"></a>00215     jpeg_error_mgr ErrorManager;
<a name="l00216"></a>00216     CompressInfo.err = jpeg_std_error(&amp;ErrorManager);
<a name="l00217"></a>00217 
<a name="l00218"></a>00218     <span class="comment">// Initialize all the writing and compression infos</span>
<a name="l00219"></a>00219     jpeg_create_compress(&amp;CompressInfo);
<a name="l00220"></a>00220     CompressInfo.image_width      = Width;
<a name="l00221"></a>00221     CompressInfo.image_height     = Height;
<a name="l00222"></a>00222     CompressInfo.input_components = 3;
<a name="l00223"></a>00223     CompressInfo.in_color_space   = JCS_RGB;
<a name="l00224"></a>00224     jpeg_stdio_dest(&amp;CompressInfo, File);
<a name="l00225"></a>00225     jpeg_set_defaults(&amp;CompressInfo);
<a name="l00226"></a>00226     jpeg_set_quality(&amp;CompressInfo, 90, TRUE);
<a name="l00227"></a>00227 
<a name="l00228"></a>00228     <span class="comment">// Get rid of the aplha channel</span>
<a name="l00229"></a>00229     std::vector&lt;Uint8&gt; PixelsBuffer(Width * Height * 3);
<a name="l00230"></a>00230     <span class="keywordflow">for</span> (std::size_t i = 0; i &lt; Pixels.size(); ++i)
<a name="l00231"></a>00231     {
<a name="l00232"></a>00232         PixelsBuffer[i * 3 + 0] = Pixels[i].r;
<a name="l00233"></a>00233         PixelsBuffer[i * 3 + 1] = Pixels[i].g;
<a name="l00234"></a>00234         PixelsBuffer[i * 3 + 2] = Pixels[i].b;
<a name="l00235"></a>00235     }
<a name="l00236"></a>00236     Uint8* PixelsPtr = &amp;PixelsBuffer[0];
<a name="l00237"></a>00237 
<a name="l00238"></a>00238     <span class="comment">// Start compression</span>
<a name="l00239"></a>00239     jpeg_start_compress(&amp;CompressInfo, TRUE);
<a name="l00240"></a>00240 
<a name="l00241"></a>00241     <span class="comment">// Write each row of the image</span>
<a name="l00242"></a>00242     <span class="keywordflow">while</span> (CompressInfo.next_scanline &lt; CompressInfo.image_height)
<a name="l00243"></a>00243     {
<a name="l00244"></a>00244         JSAMPROW RowPointer = PixelsPtr + (CompressInfo.next_scanline * Width * 3);
<a name="l00245"></a>00245         jpeg_write_scanlines(&amp;CompressInfo, &amp;RowPointer, 1);
<a name="l00246"></a>00246     }
<a name="l00247"></a>00247 
<a name="l00248"></a>00248     <span class="comment">// Finish compression</span>
<a name="l00249"></a>00249     jpeg_finish_compress(&amp;CompressInfo);
<a name="l00250"></a>00250     jpeg_destroy_compress(&amp;CompressInfo);
<a name="l00251"></a>00251 
<a name="l00252"></a>00252     <span class="comment">// Close the file</span>
<a name="l00253"></a>00253     fclose(File);
<a name="l00254"></a>00254 
<a name="l00255"></a>00255     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00256"></a>00256 }
<a name="l00257"></a>00257 
<a name="l00258"></a>00258 
<a name="l00262"></a>00262 <span class="keywordtype">bool</span> ImageLoader::WritePng(<span class="keyword">const</span> std::string&amp; Filename, <span class="keyword">const</span> std::vector&lt;Color&gt;&amp; Pixels, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Height)
<a name="l00263"></a>00263 {
<a name="l00264"></a>00264     <span class="comment">// Open the file to write in</span>
<a name="l00265"></a>00265     FILE* File = fopen(Filename.c_str(), <span class="stringliteral">"wb"</span>);
<a name="l00266"></a>00266     <span class="keywordflow">if</span> (!File)
<a name="l00267"></a>00267     {
<a name="l00268"></a>00268         std::cerr &lt;&lt; <span class="stringliteral">"Failed to save image file \""</span> &lt;&lt; Filename &lt;&lt; <span class="stringliteral">"\". Reason : cannot open file"</span> &lt;&lt; std::endl;
<a name="l00269"></a>00269         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00270"></a>00270     }
<a name="l00271"></a>00271 
<a name="l00272"></a>00272     <span class="comment">// Create the main PNG structure</span>
<a name="l00273"></a>00273     png_structp Png = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, &amp;PngErrorHandler, NULL);
<a name="l00274"></a>00274     <span class="keywordflow">if</span> (!Png)
<a name="l00275"></a>00275     {
<a name="l00276"></a>00276         fclose(File);
<a name="l00277"></a>00277         std::cerr &lt;&lt; <span class="stringliteral">"Failed to save image file \""</span> &lt;&lt; Filename &lt;&lt; <span class="stringliteral">"\". Reason : cannot allocate PNG write structure"</span> &lt;&lt; std::endl;
<a name="l00278"></a>00278         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00279"></a>00279     }
<a name="l00280"></a>00280 
<a name="l00281"></a>00281     <span class="comment">// Initialize the image informations</span>
<a name="l00282"></a>00282     png_infop PngInfo = png_create_info_struct(Png);
<a name="l00283"></a>00283     <span class="keywordflow">if</span> (!PngInfo)
<a name="l00284"></a>00284     {
<a name="l00285"></a>00285         fclose(File);
<a name="l00286"></a>00286         png_destroy_write_struct(&amp;Png, NULL);
<a name="l00287"></a>00287         std::cerr &lt;&lt; <span class="stringliteral">"Failed to save image file \""</span> &lt;&lt; Filename &lt;&lt; <span class="stringliteral">"\". Reason : cannot allocate PNG info structure"</span> &lt;&lt; std::endl;
<a name="l00288"></a>00288         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00289"></a>00289     }
<a name="l00290"></a>00290 
<a name="l00291"></a>00291     <span class="comment">// For proper error handling...</span>
<a name="l00292"></a>00292     <span class="keywordflow">if</span> (setjmp(Png-&gt;jmpbuf))
<a name="l00293"></a>00293     {
<a name="l00294"></a>00294         png_destroy_write_struct(&amp;Png, &amp;PngInfo);
<a name="l00295"></a>00295         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00296"></a>00296     }
<a name="l00297"></a>00297 
<a name="l00298"></a>00298     <span class="comment">// Link the file to the PNG structure</span>
<a name="l00299"></a>00299     png_init_io(Png, File);
<a name="l00300"></a>00300 
<a name="l00301"></a>00301     <span class="comment">// Set the image informations</span>
<a name="l00302"></a>00302     png_set_IHDR(Png, PngInfo, Width, Height, 8, PNG_COLOR_TYPE_RGB_ALPHA, PNG_INTERLACE_NONE, PNG_COMPRESSION_TYPE_BASE, PNG_FILTER_TYPE_BASE);
<a name="l00303"></a>00303 
<a name="l00304"></a>00304     <span class="comment">// Write the header</span>
<a name="l00305"></a>00305     png_write_info(Png, PngInfo);
<a name="l00306"></a>00306 
<a name="l00307"></a>00307     <span class="comment">// Get the pointers to the pixels rows into an array</span>
<a name="l00308"></a>00308     png_byte* PixelsPtr = (png_byte*)&amp;Pixels[0];
<a name="l00309"></a>00309     std::vector&lt;png_byte*&gt; RowPointers(Height);
<a name="l00310"></a>00310     <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; Height; ++i)
<a name="l00311"></a>00311     {
<a name="l00312"></a>00312         RowPointers[i] = PixelsPtr;
<a name="l00313"></a>00313         PixelsPtr += Width * 4;
<a name="l00314"></a>00314     }
<a name="l00315"></a>00315 
<a name="l00316"></a>00316     <span class="comment">// Write pixels row by row</span>
<a name="l00317"></a>00317     png_set_rows(Png, PngInfo, &amp;RowPointers[0]);
<a name="l00318"></a>00318     png_write_png(Png, PngInfo, PNG_TRANSFORM_IDENTITY, NULL);
<a name="l00319"></a>00319 
<a name="l00320"></a>00320     <span class="comment">// Finish writing the file</span>
<a name="l00321"></a>00321     png_write_end(Png, PngInfo);
<a name="l00322"></a>00322 
<a name="l00323"></a>00323     <span class="comment">// Cleanup resources</span>
<a name="l00324"></a>00324     png_destroy_write_struct(&amp;Png, &amp;PngInfo);
<a name="l00325"></a>00325     fclose(File);
<a name="l00326"></a>00326 
<a name="l00327"></a>00327     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00328"></a>00328 }
<a name="l00329"></a>00329 
<a name="l00330"></a>00330 } <span class="comment">// namespace priv</span>
<a name="l00331"></a>00331 
<a name="l00332"></a>00332 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
