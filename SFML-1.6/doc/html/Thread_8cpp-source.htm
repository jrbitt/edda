<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>Thread.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/System/Win32/Thread.hpp&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;process.h&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="keyword">namespace </span>sf
<a name="l00034"></a>00034 {
<a name="l00038"></a><a class="code" href="classsf_1_1Thread.htm#d719b83ce7b02b56db919d423a69f1a2">00038</a> <a class="code" href="classsf_1_1Thread.htm#d719b83ce7b02b56db919d423a69f1a2" title="Default constructor.">Thread::Thread</a>() :
<a name="l00039"></a>00039 myHandle  (NULL),
<a name="l00040"></a>00040 myFunction(NULL),
<a name="l00041"></a>00041 myUserData(NULL)
<a name="l00042"></a>00042 {
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 }
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 
<a name="l00050"></a><a class="code" href="classsf_1_1Thread.htm#5a5f6a41323c0983d6c0f4e496f4a173">00050</a> <a class="code" href="classsf_1_1Thread.htm#d719b83ce7b02b56db919d423a69f1a2" title="Default constructor.">Thread::Thread</a>(Thread::FuncType Function, <span class="keywordtype">void</span>* UserData) :
<a name="l00051"></a>00051 myHandle  (NULL),
<a name="l00052"></a>00052 myFunction(Function),
<a name="l00053"></a>00053 myUserData(UserData)
<a name="l00054"></a>00054 {
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 }
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 
<a name="l00062"></a><a class="code" href="classsf_1_1Thread.htm#f77942fc1730af7c31bc4c3a913a9c1d">00062</a> <a class="code" href="classsf_1_1Thread.htm#f77942fc1730af7c31bc4c3a913a9c1d" title="Virtual destructor.">Thread::~Thread</a>()
<a name="l00063"></a>00063 {
<a name="l00064"></a>00064     <span class="comment">// Wait for the thread to finish before destroying the instance</span>
<a name="l00065"></a>00065     <a class="code" href="classsf_1_1Thread.htm#67f3c609fdf99688531dbfae461ea4d2" title="Wait until the thread finishes.">Wait</a>();
<a name="l00066"></a>00066 }
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 
<a name="l00072"></a><a class="code" href="classsf_1_1Thread.htm#046df871f73d3cf452d1c72bcc143642">00072</a> <span class="keywordtype">void</span> <a class="code" href="classsf_1_1Thread.htm#046df871f73d3cf452d1c72bcc143642" title="Create and run the thread.">Thread::Launch</a>()
<a name="l00073"></a>00073 {
<a name="l00074"></a>00074     <span class="comment">// Wait for the thread to finish, in case it was already running</span>
<a name="l00075"></a>00075     <a class="code" href="classsf_1_1Thread.htm#67f3c609fdf99688531dbfae461ea4d2" title="Wait until the thread finishes.">Wait</a>();
<a name="l00076"></a>00076 
<a name="l00077"></a>00077     <span class="comment">// Create the thread</span>
<a name="l00078"></a>00078     myHandle = <span class="keyword">reinterpret_cast&lt;</span>HANDLE<span class="keyword">&gt;</span>(_beginthreadex(NULL, 0, &amp;Thread::ThreadFunc, <span class="keyword">this</span>, 0, NULL));
<a name="l00079"></a>00079 
<a name="l00080"></a>00080     <span class="comment">// Error ?</span>
<a name="l00081"></a>00081     <span class="keywordflow">if</span> (myHandle == NULL)
<a name="l00082"></a>00082         std::cerr &lt;&lt; <span class="stringliteral">"Failed to create thread"</span> &lt;&lt; std::endl;
<a name="l00083"></a>00083 }
<a name="l00084"></a>00084 
<a name="l00085"></a>00085 
<a name="l00089"></a><a class="code" href="classsf_1_1Thread.htm#67f3c609fdf99688531dbfae461ea4d2">00089</a> <span class="keywordtype">void</span> <a class="code" href="classsf_1_1Thread.htm#67f3c609fdf99688531dbfae461ea4d2" title="Wait until the thread finishes.">Thread::Wait</a>()
<a name="l00090"></a>00090 {
<a name="l00091"></a>00091     <span class="keywordflow">if</span> (myHandle)
<a name="l00092"></a>00092     {
<a name="l00093"></a>00093         <span class="comment">// Wait for the thread to finish, no timeout</span>
<a name="l00094"></a>00094         WaitForSingleObject(myHandle, INFINITE);
<a name="l00095"></a>00095 
<a name="l00096"></a>00096         <span class="comment">// Don't forget to close the thread handle (__endthreadex doesn't do it)</span>
<a name="l00097"></a>00097         CloseHandle(myHandle);
<a name="l00098"></a>00098         myHandle = NULL;
<a name="l00099"></a>00099     }
<a name="l00100"></a>00100 }
<a name="l00101"></a>00101 
<a name="l00102"></a>00102 
<a name="l00109"></a><a class="code" href="classsf_1_1Thread.htm#603d9493c6a845188f05c2eca48dc41b">00109</a> <span class="keywordtype">void</span> <a class="code" href="classsf_1_1Thread.htm#603d9493c6a845188f05c2eca48dc41b" title="Terminate the thread Terminating a thread with this function is not safe, you should...">Thread::Terminate</a>()
<a name="l00110"></a>00110 {
<a name="l00111"></a>00111     <span class="keywordflow">if</span> (myHandle)
<a name="l00112"></a>00112     {
<a name="l00113"></a>00113         TerminateThread(myHandle, 0);
<a name="l00114"></a>00114         myHandle = NULL;
<a name="l00115"></a>00115     }
<a name="l00116"></a>00116 }
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 
<a name="l00122"></a>00122 <span class="keywordtype">void</span> Thread::Run()
<a name="l00123"></a>00123 {
<a name="l00124"></a>00124     <span class="keywordflow">if</span> (myFunction)
<a name="l00125"></a>00125         myFunction(myUserData);
<a name="l00126"></a>00126 }
<a name="l00127"></a>00127 
<a name="l00128"></a>00128 
<a name="l00132"></a>00132 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> __stdcall Thread::ThreadFunc(<span class="keywordtype">void</span>* UserData)
<a name="l00133"></a>00133 {
<a name="l00134"></a>00134     <span class="comment">// The Thread instance is stored in the user data</span>
<a name="l00135"></a>00135     <a class="code" href="classsf_1_1Thread.htm#d719b83ce7b02b56db919d423a69f1a2" title="Default constructor.">Thread</a>* ThreadInstance = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="classsf_1_1Thread.htm#d719b83ce7b02b56db919d423a69f1a2" title="Default constructor.">Thread</a>*<span class="keyword">&gt;</span>(UserData);
<a name="l00136"></a>00136 
<a name="l00137"></a>00137     <span class="comment">// Forward to the instance</span>
<a name="l00138"></a>00138     ThreadInstance-&gt;Run();
<a name="l00139"></a>00139 
<a name="l00140"></a>00140     <span class="comment">// Optional, but it is cleaner</span>
<a name="l00141"></a>00141     _endthreadex(0);
<a name="l00142"></a>00142 
<a name="l00143"></a>00143     <span class="keywordflow">return</span> 0;
<a name="l00144"></a>00144 }
<a name="l00145"></a>00145 
<a name="l00146"></a>00146 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
